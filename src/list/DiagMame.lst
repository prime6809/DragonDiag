                      (     DiagCart.asm):00001                         use     ascii.asm
                      (        ascii.asm):00001         ; 
                      (        ascii.asm):00002         ; ASCII characters
                      (        ascii.asm):00003         ;
                      (        ascii.asm):00004         
     0000             (        ascii.asm):00005         NULL            equ             $00     ; null character 
     0001             (        ascii.asm):00006         SOH             equ             $01     ; start of heading
     0002             (        ascii.asm):00007         STX             equ             $02     ; start of text
     0003             (        ascii.asm):00008         ETX             equ             $03     ; end of text
     0004             (        ascii.asm):00009         EOT             equ             $04     ; end of transmission
     0005             (        ascii.asm):00010         ENQ             equ             $05     ; enquiry
     0006             (        ascii.asm):00011         ACK             equ             $06     ; acknowledge
     0007             (        ascii.asm):00012         BELL            equ             $07     ; bell 
     0008             (        ascii.asm):00013         BS              equ             $08     ; backspace
     0009             (        ascii.asm):00014         HT              equ             $09     ; horizontal tab
     000A             (        ascii.asm):00015         LF              equ             $0A     ; line feed
     000B             (        ascii.asm):00016         VT              equ             $0B     ; vertical tab
     000C             (        ascii.asm):00017         FF              equ             $0C     ; form feed
     000D             (        ascii.asm):00018         CR              equ             $0D     ; carrige return
     000E             (        ascii.asm):00019         SO              equ             $0E     ; shift out
     000F             (        ascii.asm):00020         SI              equ             $0F     ; shift in
     0010             (        ascii.asm):00021         DLE             equ             $10     ; data line escape
     0011             (        ascii.asm):00022         DC1             equ             $11     ; data control 1                                        
     0012             (        ascii.asm):00023         DC2             equ             $12     ; data control 2
     0013             (        ascii.asm):00024         DC3             equ             $13     ; data control 3
     0014             (        ascii.asm):00025         DC4             equ             $14     ; data control 4
     0015             (        ascii.asm):00026         NAK             equ             $15     ; negative acknowledge
     0016             (        ascii.asm):00027         SYN             equ             $16     ; syncronous idle
     0017             (        ascii.asm):00028         ETB             equ             $17     ; end of transmit block
     0018             (        ascii.asm):00029         CAN             equ             $18     ; cancel
     0019             (        ascii.asm):00030         EM              equ             $19     ; end of medium
     001A             (        ascii.asm):00031         SUB             equ             $1A     ; substitute
     001B             (        ascii.asm):00032         ESC             equ             $1B     ; escape
     001C             (        ascii.asm):00033         FS              equ             $1C     ; file seperator
     001D             (        ascii.asm):00034         GS              equ             $1D     ; group seperator
     001E             (        ascii.asm):00035         RS              equ             $1E     ; record seperator
     001F             (        ascii.asm):00036         US              equ             $1F     ; unit seperator
                      (     DiagCart.asm):00002                         use     basicdefs.asm
                      (    basicdefs.asm):00001         ;
                      (    basicdefs.asm):00002         ; BasicDefs.asm : definitions for Dragon / CoCo BASIC.
                      (    basicdefs.asm):00003         ;
                      (    basicdefs.asm):00004         
     F9FF             (    basicdefs.asm):00005         BasMaxLineNo    EQU     $F9FF   ; Maximum allowable line number.
                      (    basicdefs.asm):00006         
                      (    basicdefs.asm):00007         ;
                      (    basicdefs.asm):00008         ; Dragon Basic Error codes
                      (    basicdefs.asm):00009         ; 
     0000             (    basicdefs.asm):00010         DBErrNF         EQU     $00             ; Next without for              
     0002             (    basicdefs.asm):00011         DBErrSN         EQU     $02             ; Syntax
     0004             (    basicdefs.asm):00012         DBErrRG         EQU     $04             ; Return without GOSUB
     0006             (    basicdefs.asm):00013         DBErrOD         EQU     $06             ; Out of Data
     0008             (    basicdefs.asm):00014         DBErrFC         EQU     $08             ; Function Call
     000A             (    basicdefs.asm):00015         DBErrOV         EQU     $0A             ; OVerflow
     000C             (    basicdefs.asm):00016         DBErrOM         EQU     $0C             ; Out of Memory
     000E             (    basicdefs.asm):00017         DBErrUL         EQU     $0E             ; Undefined Line
     0010             (    basicdefs.asm):00018         DBErrBS         EQU     $10             ; Bad Subscript
     0012             (    basicdefs.asm):00019         DBErrDD         EQU     $12             ; Direct Dimension
     0014             (    basicdefs.asm):00020         DBErrZD         EQU     $14             ; Zero Divide
     0016             (    basicdefs.asm):00021         DBErrID         EQU     $16             ; Illegal Direct
     0018             (    basicdefs.asm):00022         DBErrTM         EQU     $18             ; Type Mismatch
     001A             (    basicdefs.asm):00023         DBErrOS         EQU     $1A             ; Out of String space
     001C             (    basicdefs.asm):00024         DBErrLS         EQU     $1C             ; Long String (len > 255)
     001E             (    basicdefs.asm):00025         DBErrST         EQU     $1E             ; String formula Too complex
     0020             (    basicdefs.asm):00026         DBErrCN         EQU     $20             ; Can't coNtinue
     0022             (    basicdefs.asm):00027         DBErrUF         EQU     $22             ; Undefined Function
     0024             (    basicdefs.asm):00028         DBErrFD         EQU     $24             ; bad File Data
     0026             (    basicdefs.asm):00029         DBErrAO         EQU     $26             ; Already Open
     0028             (    basicdefs.asm):00030         DBErrDN         EQU     $28             ; Device Number
     002A             (    basicdefs.asm):00031         DBErrIO         EQU     $2A             ; Input Output
     002C             (    basicdefs.asm):00032         DBErrFM         EQU     $2C             ; File Mismatch
     002E             (    basicdefs.asm):00033         DBErrNO         EQU     $2E             ; file Not Open
     0030             (    basicdefs.asm):00034         DBErrIE         EQU     $30             ; Input past End of file
     0032             (    basicdefs.asm):00035         DBErrDS         EQU     $32             ; Direct Statement
     0034             (    basicdefs.asm):00036         DBErrNE         EQU     $34             ; file does Not Exist
                      (    basicdefs.asm):00037         
                      (    basicdefs.asm):00038         ;
                      (    basicdefs.asm):00039         ; CoCo Basic Error codes.
                      (    basicdefs.asm):00040         ;
                      (    basicdefs.asm):00041         
     0000             (    basicdefs.asm):00042         CBErrNF         EQU     $00             ; Next without for              
     0002             (    basicdefs.asm):00043         CBErrSN         EQU     $02             ; Syntax
     0004             (    basicdefs.asm):00044         CBErrRG         EQU     $04             ; Return without GOSUB
     0006             (    basicdefs.asm):00045         CBErrOD         EQU     $06             ; Out of Data
     0008             (    basicdefs.asm):00046         CBErrFC         EQU     $08             ; Function Call
     000A             (    basicdefs.asm):00047         CBErrOV         EQU     $0A             ; OVerflow
     000C             (    basicdefs.asm):00048         CBErrOM         EQU     $0C             ; Out of Memory
     000E             (    basicdefs.asm):00049         CBErrUL         EQU     $0E             ; Undefined Line
     0010             (    basicdefs.asm):00050         CBErrBS         EQU     $10             ; Bad Subscript
     0012             (    basicdefs.asm):00051         CBErrDD         EQU     $12             ; Direct Dimension
     0014             (    basicdefs.asm):00052         CBErrZD         EQU     $14             ; Zero Divide
     0016             (    basicdefs.asm):00053         CBErrID         EQU     $16             ; Illegal Direct
     0018             (    basicdefs.asm):00054         CBErrTM         EQU     $18             ; Type Mismatch
     001A             (    basicdefs.asm):00055         CBErrOS         EQU     $1A             ; Out of String space
     001C             (    basicdefs.asm):00056         CBErrLS         EQU     $1C             ; Long String (len > 255)
     001E             (    basicdefs.asm):00057         CBErrST         EQU     $1E             ; String formula Too complex
     0020             (    basicdefs.asm):00058         CBErrCN         EQU     $20             ; Can't coNtinue
                      (    basicdefs.asm):00059         
     0022             (    basicdefs.asm):00060         CBErrFD         EQU     $22             ; bad File Data
     0024             (    basicdefs.asm):00061         CBErrAO         EQU     $24             ; Already Open
     0026             (    basicdefs.asm):00062         CBErrDN         EQU     $26             ; Device Number
     0028             (    basicdefs.asm):00063         CBErrIO         EQU     $28             ; Input Output
     002A             (    basicdefs.asm):00064         CBErrFM         EQU     $2A             ; File Mismatch
     002C             (    basicdefs.asm):00065         CBErrNO         EQU     $2C             ; file Not Open
     002E             (    basicdefs.asm):00066         CBErrIE         EQU     $2E             ; Input past End of file
     0030             (    basicdefs.asm):00067         CBErrDS         EQU     $30             ; Direct Statement
                      (    basicdefs.asm):00068         
                      (    basicdefs.asm):00069         ;
                      (    basicdefs.asm):00070         ; CoCo Extended basic error codes
                      (    basicdefs.asm):00071         ;
                      (    basicdefs.asm):00072         
     0032             (    basicdefs.asm):00073         CBErrUF         EQU     $32             ; Undefined Function
     0034             (    basicdefs.asm):00074         CBErrNE         EQU     $34             ; file does Not Exist
                      (    basicdefs.asm):00075         
                      (    basicdefs.asm):00076                 ifdef   Dragon
     0000             (    basicdefs.asm):00077         BErrNF          EQU     DBErrNF         ; Next without for              
     0002             (    basicdefs.asm):00078         BErrSN          EQU     DBErrSN         ; Syntax
     0004             (    basicdefs.asm):00079         BErrRG          EQU     DBErrRG         ; Return without GOSUB
     0006             (    basicdefs.asm):00080         BErrOD          EQU     DBErrOD         ; Out of Data
     0008             (    basicdefs.asm):00081         BErrFC          EQU     DBErrFC         ; Function Call
     000A             (    basicdefs.asm):00082         BErrOV          EQU     DBErrOV         ; OVerflow
     000C             (    basicdefs.asm):00083         BErrOM          EQU     DBErrOM         ; Out of Memory
     000E             (    basicdefs.asm):00084         BErrUL          EQU     DBErrUL         ; Undefined Line
     0010             (    basicdefs.asm):00085         BErrBS          EQU     DBErrBS         ; Bad Subscript
     0012             (    basicdefs.asm):00086         BErrDD          EQU     DBErrDD         ; Direct Dimension
     0014             (    basicdefs.asm):00087         BErrZD          EQU     DBErrZD         ; Zero Divide
     0016             (    basicdefs.asm):00088         BErrID          EQU     DBErrID         ; Illegal Direct
     0018             (    basicdefs.asm):00089         BErrTM          EQU     DBErrTM         ; Type Mismatch
     001A             (    basicdefs.asm):00090         BErrOS          EQU     DBErrOS         ; Out of String space
     001C             (    basicdefs.asm):00091         BErrLS          EQU     DBErrLS         ; Long String (len > 255)
     001E             (    basicdefs.asm):00092         BErrST          EQU     DBErrST         ; String formula Too complex
     0020             (    basicdefs.asm):00093         BErrCN          EQU     DBErrCN         ; Can't coNtinue
     0022             (    basicdefs.asm):00094         BErrUF          EQU     DBErrUF         ; Undefined Function
     0024             (    basicdefs.asm):00095         BErrFD          EQU     DBErrFD         ; bad File Data
     0026             (    basicdefs.asm):00096         BErrAO          EQU     DBErrAO         ; Already Open
     0028             (    basicdefs.asm):00097         BErrDN          EQU     DBErrDN         ; Device Number
     002A             (    basicdefs.asm):00098         BErrIO          EQU     DBErrIO         ; Input Output
     002C             (    basicdefs.asm):00099         BErrFM          EQU     DBErrFM         ; File Mismatch
     002E             (    basicdefs.asm):00100         BErrNO          EQU     DBErrNO         ; file Not Open
     0030             (    basicdefs.asm):00101         BErrIE          EQU     DBErrIE         ; Input past End of file
     0032             (    basicdefs.asm):00102         BErrDS          EQU     DBErrDS         ; Direct Statement
     0034             (    basicdefs.asm):00103         BErrNE          EQU     DBErrNE         ; file does Not Exist
                      (    basicdefs.asm):00104                 else
0000                  (    basicdefs.asm):00105         BErrNF          EQU     CBErrNF         ; Next without for              
0000                  (    basicdefs.asm):00106         BErrSN          EQU     CBErrSN         ; Syntax
0000                  (    basicdefs.asm):00107         BErrRG          EQU     CBErrRG         ; Return without GOSUB
0000                  (    basicdefs.asm):00108         BErrOD          EQU     CBErrOD         ; Out of Data
0000                  (    basicdefs.asm):00109         BErrFC          EQU     CBErrFC         ; Function Call
0000                  (    basicdefs.asm):00110         BErrOV          EQU     CBErrOV         ; OVerflow
0000                  (    basicdefs.asm):00111         BErrOM          EQU     CBErrOM         ; Out of Memory
0000                  (    basicdefs.asm):00112         BErrUL          EQU     CBErrUL         ; Undefined Line
0000                  (    basicdefs.asm):00113         BErrBS          EQU     CBErrBS         ; Bad Subscript
0000                  (    basicdefs.asm):00114         BErrDD          EQU     CBErrDD         ; Direct Dimension
0000                  (    basicdefs.asm):00115         BErrZD          EQU     CBErrZD         ; Zero Divide
0000                  (    basicdefs.asm):00116         BErrID          EQU     CBErrID         ; Illegal Direct
0000                  (    basicdefs.asm):00117         BErrTM          EQU     CBErrTM         ; Type Mismatch
0000                  (    basicdefs.asm):00118         BErrOS          EQU     CBErrOS         ; Out of String space
0000                  (    basicdefs.asm):00119         BErrLS          EQU     CBErrLS         ; Long String (len > 255)
0000                  (    basicdefs.asm):00120         BErrST          EQU     CBErrST         ; String formula Too complex
0000                  (    basicdefs.asm):00121         BErrCN          EQU     CBErrCN         ; Can't coNtinue
0000                  (    basicdefs.asm):00122         BErrUF          EQU     CBErrUF         ; Undefined Function
0000                  (    basicdefs.asm):00123         BErrFD          EQU     CBErrFD         ; bad File Data
0000                  (    basicdefs.asm):00124         BErrAO          EQU     CBErrAO         ; Already Open
0000                  (    basicdefs.asm):00125         BErrDN          EQU     CBErrDN         ; Device Number
0000                  (    basicdefs.asm):00126         BErrIO          EQU     CBErrIO         ; Input Output
0000                  (    basicdefs.asm):00127         BErrFM          EQU     CBErrFM         ; File Mismatch
0000                  (    basicdefs.asm):00128         BErrNO          EQU     CBErrNO         ; file Not Open
0000                  (    basicdefs.asm):00129         BErrIE          EQU     CBErrIE         ; Input past End of file
0000                  (    basicdefs.asm):00130         BErrDS          EQU     CBErrDS         ; Direct Statement
0000                  (    basicdefs.asm):00131         BErrNE          EQU     CBErrNE         ; file does Not Exist
                      (    basicdefs.asm):00132                 endc
                      (     DiagCart.asm):00003                         use     basictokens.asm
                      (  basictokens.asm):00001         ;
                      (  basictokens.asm):00002         ; BasicTokens.asm
                      (  basictokens.asm):00003         ;
                      (  basictokens.asm):00004         ; Values for Dragon and CoCo basic tokens.
                      (  basictokens.asm):00005         ;
                      (  basictokens.asm):00006         
                      (  basictokens.asm):00007         ;
                      (  basictokens.asm):00008         ; Dragon Commands
                      (  basictokens.asm):00009         ;
                      (  basictokens.asm):00010         
     0080             (  basictokens.asm):00011         DTokFOR         EQU     $80
     0081             (  basictokens.asm):00012         DTokGO          EQU     $81
     0082             (  basictokens.asm):00013         DTokREM         EQU     $82
     0083             (  basictokens.asm):00014         DTokREMComma    EQU     $83
     0084             (  basictokens.asm):00015         DTokELSE        EQU     $84
     0085             (  basictokens.asm):00016         DTokIF          EQU     $85
     0086             (  basictokens.asm):00017         DTokDATA        EQU     $86
     0087             (  basictokens.asm):00018         DTokPRINT       EQU     $87
     0088             (  basictokens.asm):00019         DTokON          EQU     $88
     0089             (  basictokens.asm):00020         DTokINPUT       EQU     $89
     008A             (  basictokens.asm):00021         DTokEND         EQU     $8A
     008B             (  basictokens.asm):00022         DTokNEXT        EQU     $8B
     008C             (  basictokens.asm):00023         DTokDIM         EQU     $8C
     008D             (  basictokens.asm):00024         DTokREAD        EQU     $8D
     008E             (  basictokens.asm):00025         DTokLET         EQU     $8E
     008F             (  basictokens.asm):00026         DTokRUN         EQU     $8F
     0090             (  basictokens.asm):00027         DTokRESTORE     EQU     $90
     0091             (  basictokens.asm):00028         DTokRETURN      EQU     $91
     0092             (  basictokens.asm):00029         DTokSTOP        EQU     $92
     0093             (  basictokens.asm):00030         DTokPOKE        EQU     $93
     0094             (  basictokens.asm):00031         DTokCONT        EQU     $94
     0095             (  basictokens.asm):00032         DTokLIST        EQU     $95
     0096             (  basictokens.asm):00033         DTokCLEAR       EQU     $96
     0097             (  basictokens.asm):00034         DTokNEW         EQU     $97
     0098             (  basictokens.asm):00035         DTokDEF         EQU     $98
     0099             (  basictokens.asm):00036         DTokCLOAD       EQU     $99
     009A             (  basictokens.asm):00037         DTokCSAVE       EQU     $9A
     009B             (  basictokens.asm):00038         DTokOPEN        EQU     $9B
     009C             (  basictokens.asm):00039         DTokCLOSE       EQU     $9C
     009D             (  basictokens.asm):00040         DTokLLIST       EQU     $9D
     009E             (  basictokens.asm):00041         DTokSET         EQU     $9E
     009F             (  basictokens.asm):00042         DTokRESET       EQU     $9F
     00A0             (  basictokens.asm):00043         DTokCLS         EQU     $A0
     00A1             (  basictokens.asm):00044         DTokMOTOR       EQU     $A1
     00A2             (  basictokens.asm):00045         DTokSOUND       EQU     $A2
     00A3             (  basictokens.asm):00046         DTokAUDIO       EQU     $A3
     00A4             (  basictokens.asm):00047         DTokEXEC        EQU     $A4
     00A5             (  basictokens.asm):00048         DTokSKIPF       EQU     $A5
     00A6             (  basictokens.asm):00049         DTokDELETE      EQU     $A6
     00A7             (  basictokens.asm):00050         DTokEDIT        EQU     $A7
     00A8             (  basictokens.asm):00051         DTokTRON        EQU     $A8
     00A9             (  basictokens.asm):00052         DTokTROFF       EQU     $A9
     00AA             (  basictokens.asm):00053         DTokLINE        EQU     $AA
     00AB             (  basictokens.asm):00054         DTokPCLS        EQU     $AB
     00AC             (  basictokens.asm):00055         DTokPSET        EQU     $AC
     00AD             (  basictokens.asm):00056         DTokPRESET      EQU     $AD
     00AE             (  basictokens.asm):00057         DTokSCREEN      EQU     $AE
     00AF             (  basictokens.asm):00058         DTokPCLEAR      EQU     $AF
     00B0             (  basictokens.asm):00059         DTokCOLOR       EQU     $B0
     00B1             (  basictokens.asm):00060         DTokCIRCLE      EQU     $B1
     00B2             (  basictokens.asm):00061         DTokPAINT       EQU     $B2
     00B3             (  basictokens.asm):00062         DTokGET         EQU     $B3
     00B4             (  basictokens.asm):00063         DTokPUT         EQU     $B4
     00B5             (  basictokens.asm):00064         DTokDRAW        EQU     $B5
     00B6             (  basictokens.asm):00065         DTokPCOPY       EQU     $B6
     00B7             (  basictokens.asm):00066         DTokPMODE       EQU     $B7
     00B8             (  basictokens.asm):00067         DTokPLAY        EQU     $B8
     00B9             (  basictokens.asm):00068         DTokDLOAD       EQU     $B9
     00BA             (  basictokens.asm):00069         DTokRENUM       EQU     $BA
     00BB             (  basictokens.asm):00070         DTokTAB         EQU     $BB
     00BC             (  basictokens.asm):00071         DTokTO          EQU     $BC
     00BD             (  basictokens.asm):00072         DTokSUB         EQU     $BD
     00BE             (  basictokens.asm):00073         DTokFN          EQU     $BE
     00BF             (  basictokens.asm):00074         DTokTHEN        EQU     $BF
     00C0             (  basictokens.asm):00075         DTokNOT         EQU     $C0
     00C1             (  basictokens.asm):00076         DTokSTEP        EQU     $C1
     00C2             (  basictokens.asm):00077         DTokOFF         EQU     $C2
     00C3             (  basictokens.asm):00078         DTokPLUS        EQU     $C3
     00C4             (  basictokens.asm):00079         DTokMINUS       EQU     $C4
     00C5             (  basictokens.asm):00080         DTokTIMES       EQU     $C5
     00C6             (  basictokens.asm):00081         DTokDIVIDE      EQU     $C6
     00C7             (  basictokens.asm):00082         DTokAT          EQU     $C7
     00C8             (  basictokens.asm):00083         DTokAND         EQU     $C8
     00C9             (  basictokens.asm):00084         DTokOR          EQU     $C9
     00CA             (  basictokens.asm):00085         DTokGREATER     EQU     $CA
     00CB             (  basictokens.asm):00086         DTokEQUAL       EQU     $CB
     00CC             (  basictokens.asm):00087         DTokLESS        EQU     $CC
     00CD             (  basictokens.asm):00088         DTokUSING       EQU     $CD
                      (  basictokens.asm):00089         
     0080             (  basictokens.asm):00090         DTokFirstC      EQU     DTokFOR
     00CD             (  basictokens.asm):00091         DTokLastC       EQU     DTokUSING
                      (  basictokens.asm):00092         
                      (  basictokens.asm):00093         ;
                      (  basictokens.asm):00094         ; Dragon Functions
                      (  basictokens.asm):00095         ; Tokens are preceeded by $FF
                      (  basictokens.asm):00096         ;
                      (  basictokens.asm):00097         
     0080             (  basictokens.asm):00098         DTokSGN         EQU     $80
     0081             (  basictokens.asm):00099         DTokINT         EQU     $81
     0082             (  basictokens.asm):00100         DTokABS         EQU     $82
     0083             (  basictokens.asm):00101         DTokPOS         EQU     $83
     0084             (  basictokens.asm):00102         DTokRND         EQU     $84
     0085             (  basictokens.asm):00103         DTokSQR         EQU     $85
     0086             (  basictokens.asm):00104         DTokLOG         EQU     $86
     0087             (  basictokens.asm):00105         DTokEXP         EQU     $87
     0088             (  basictokens.asm):00106         DTokSIN         EQU     $88
     0089             (  basictokens.asm):00107         DTokCOS         EQU     $89
     008A             (  basictokens.asm):00108         DTokTAN         EQU     $8A
     008B             (  basictokens.asm):00109         DTokATN         EQU     $8B
     008C             (  basictokens.asm):00110         DTokPEEK        EQU     $8C
     008D             (  basictokens.asm):00111         DTokLEN         EQU     $8D
     008E             (  basictokens.asm):00112         DTokSTRS        EQU     $8E
     008F             (  basictokens.asm):00113         DTokVAL         EQU     $8F
     0090             (  basictokens.asm):00114         DTokASC         EQU     $90
     0091             (  basictokens.asm):00115         DTokCHRS        EQU     $91
     0092             (  basictokens.asm):00116         DTokEOF         EQU     $92
     0093             (  basictokens.asm):00117         DTokJOYSTK      EQU     $93
     0094             (  basictokens.asm):00118         DTokFIX         EQU     $94
     0095             (  basictokens.asm):00119         DTokHEXS        EQU     $95
     0096             (  basictokens.asm):00120         DTokLEFTS       EQU     $96
     0097             (  basictokens.asm):00121         DTokRIGHTS      EQU     $97
     0098             (  basictokens.asm):00122         DTokMIDS        EQU     $98
     0099             (  basictokens.asm):00123         DTokPOINT       EQU     $99
     009A             (  basictokens.asm):00124         DTokINKEYS      EQU     $9A
     009B             (  basictokens.asm):00125         DTokMEM         EQU     $9B
     009C             (  basictokens.asm):00126         DTokVARPTR      EQU     $9C
     009D             (  basictokens.asm):00127         DTokINSTR       EQU     $9D
     009E             (  basictokens.asm):00128         DTokTIMER       EQU     $9E
     009F             (  basictokens.asm):00129         DTokPPOINT      EQU     $9F
     00A0             (  basictokens.asm):00130         DTokSTRINGS     EQU     $A0
     00A1             (  basictokens.asm):00131         DTokUSR         EQU     $A1
                      (  basictokens.asm):00132         
     0080             (  basictokens.asm):00133         DTokFirstF      EQU     DTokSGN
     00A1             (  basictokens.asm):00134         DTokLastF       EQU     DTokUSR
     0021             (  basictokens.asm):00135         DTokCountF      EQU     (DTokLastF-DTokFirstF)
                      (  basictokens.asm):00136         
                      (  basictokens.asm):00137         ;
                      (  basictokens.asm):00138         ; DragonDOS / SuperDOS command tokens
                      (  basictokens.asm):00139         ;
     00CE             (  basictokens.asm):00140         DDTokAUTO       EQU     $CE     
     00CE             (  basictokens.asm):00141         DDTokBACKUP     EQU     $CE
     00D0             (  basictokens.asm):00142         DDTokBEEP       EQU     $D0
     00D1             (  basictokens.asm):00143         DDTokBOOT       EQU     $D1
     00D2             (  basictokens.asm):00144         DDTokCHAIN      EQU     $D2
     00D3             (  basictokens.asm):00145         DDTokCOPY       EQU     $D3
     00D4             (  basictokens.asm):00146         DDTokCREATE     EQU     $D4
     00D5             (  basictokens.asm):00147         DDTokDIR        EQU     $D5
     00D6             (  basictokens.asm):00148         DDTokDRIVE      EQU     $D6
     00D7             (  basictokens.asm):00149         DDTokDSKINIT    EQU     $D7
     00D8             (  basictokens.asm):00150         DDTokFREAD      EQU     $D8
     00D9             (  basictokens.asm):00151         DDTokFWRITE     EQU     $D9
     00DA             (  basictokens.asm):00152         DDTokERROR      EQU     $DA
     00DB             (  basictokens.asm):00153         DDTokKILL       EQU     $DB
     00DC             (  basictokens.asm):00154         DDTokLOAD       EQU     $DC
     00DD             (  basictokens.asm):00155         DDTokMERGE      EQU     $DD
     00DE             (  basictokens.asm):00156         DDTokPROTECT    EQU     $DE
     00DF             (  basictokens.asm):00157         DDTokWAIT       EQU     $DF
     00E0             (  basictokens.asm):00158         DDTokRENAME     EQU     $E0
     00E1             (  basictokens.asm):00159         DDTokSAVE       EQU     $E1
     00E2             (  basictokens.asm):00160         DDTokSREAD      EQU     $E2
     00E3             (  basictokens.asm):00161         DDTokSWRITE     EQU     $E3
     00E4             (  basictokens.asm):00162         DDTokVERIFY     EQU     $E4
     00E5             (  basictokens.asm):00163         DDTokFROM       EQU     $E5
     00E6             (  basictokens.asm):00164         DDTokFLREAD     EQU     $E6
     00E7             (  basictokens.asm):00165         DDTokSWAP       EQU     $E7
                      (  basictokens.asm):00166         
     00CE             (  basictokens.asm):00167         DDTokFirstC     EQU     DDTokAUTO       ; First + Last Dragondos command Token
     00E7             (  basictokens.asm):00168         DDTokLastC      EQU     DDTokSWAP
     001A             (  basictokens.asm):00169         DDTokCountC     EQU     (DDTokLastC-DDTokFirstC)+1
                      (  basictokens.asm):00170         ;
                      (  basictokens.asm):00171         ; DragonDOS / SuperDOS function tokens
                      (  basictokens.asm):00172         ;
                      (  basictokens.asm):00173         
     00A2             (  basictokens.asm):00174         DDTokLOF        EQU     $A2
     00A3             (  basictokens.asm):00175         DDTokFREE       EQU     $A3
     00A4             (  basictokens.asm):00176         DDTokERL        EQU     $A4
     00A5             (  basictokens.asm):00177         DDTokERR        EQU     $A5
     00A6             (  basictokens.asm):00178         DDTokHIMEM      EQU     $A6
     00A7             (  basictokens.asm):00179         DDTokLOC        EQU     $A7
     00A8             (  basictokens.asm):00180         DDTokFRES       EQU     $A8
                      (  basictokens.asm):00181         
     00A2             (  basictokens.asm):00182         DDTokFirstF     EQU     DDTokLOF        ; First + Last Dragondos function Token
     00A8             (  basictokens.asm):00183         DDTokLastF      EQU     DDTokFRES
     0007             (  basictokens.asm):00184         DDTokCountF     EQU     (DDTokLastF-DDTokFirstF)+1
                      (  basictokens.asm):00185         
                      (  basictokens.asm):00186         ; CoCo 1/2 Commands
                      (  basictokens.asm):00187         ;
                      (  basictokens.asm):00188         
     0080             (  basictokens.asm):00189         CTokFOR         EQU     $80
     0081             (  basictokens.asm):00190         CTokGO          EQU     $81
     0082             (  basictokens.asm):00191         CTokREM         EQU     $82
     0083             (  basictokens.asm):00192         CTokREMComma    EQU     $83
     0084             (  basictokens.asm):00193         CTokELSE        EQU     $84
     0085             (  basictokens.asm):00194         CTokIF          EQU     $85
     0086             (  basictokens.asm):00195         CTokDATA        EQU     $86
     0087             (  basictokens.asm):00196         CTokPRINT       EQU     $87
     0088             (  basictokens.asm):00197         CTokON          EQU     $88
     0089             (  basictokens.asm):00198         CTokINPUT       EQU     $89
     008A             (  basictokens.asm):00199         CTokEND         EQU     $8A
     008B             (  basictokens.asm):00200         CTokNEXT        EQU     $8B
     008C             (  basictokens.asm):00201         CTokDIM         EQU     $8C
     008D             (  basictokens.asm):00202         CTokREAD        EQU     $8D
     00BA             (  basictokens.asm):00203         CTokLET         EQU     $BA
     008E             (  basictokens.asm):00204         CTokRUN         EQU     $8E
     008F             (  basictokens.asm):00205         CTokRESTORE     EQU     $8F
     0090             (  basictokens.asm):00206         CTokRETURN      EQU     $90
     0091             (  basictokens.asm):00207         CTokSTOP        EQU     $91
     0092             (  basictokens.asm):00208         CTokPOKE        EQU     $92
     0093             (  basictokens.asm):00209         CTokCONT        EQU     $93
     0094             (  basictokens.asm):00210         CTokLIST        EQU     $94
     0095             (  basictokens.asm):00211         CTokCLEAR       EQU     $95
     0096             (  basictokens.asm):00212         CTokNEW         EQU     $96
     00B9             (  basictokens.asm):00213         CTokDEF         EQU     $B9
     0097             (  basictokens.asm):00214         CTokCLOAD       EQU     $97
     0098             (  basictokens.asm):00215         CTokCSAVE       EQU     $98
     0099             (  basictokens.asm):00216         CTokOPEN        EQU     $99
     009A             (  basictokens.asm):00217         CTokCLOSE       EQU     $9A
     009B             (  basictokens.asm):00218         CTokLLIST       EQU     $9B
     009C             (  basictokens.asm):00219         CTokSET         EQU     $9C
     009D             (  basictokens.asm):00220         CTokRESET       EQU     $9D
     009E             (  basictokens.asm):00221         CTokCLS         EQU     $9E
     009F             (  basictokens.asm):00222         CTokMOTOR       EQU     $9F
     00A0             (  basictokens.asm):00223         CTokSOUND       EQU     $A0
     00A1             (  basictokens.asm):00224         CTokAUDIO       EQU     $A1
     00A2             (  basictokens.asm):00225         CTokEXEC        EQU     $A2
     00A3             (  basictokens.asm):00226         CTokSKIPF       EQU     $A3
     00B5             (  basictokens.asm):00227         CTokDELETE      EQU     $B5
     00B6             (  basictokens.asm):00228         CTokEDIT        EQU     $B6
     00B7             (  basictokens.asm):00229         CTokTRON        EQU     $B7
     00B8             (  basictokens.asm):00230         CTokTROFF       EQU     $B8
     00BB             (  basictokens.asm):00231         CTokLINE        EQU     $BB
     00BC             (  basictokens.asm):00232         CTokPCLS        EQU     $BC
     00BD             (  basictokens.asm):00233         CTokPSET        EQU     $BD
     00BE             (  basictokens.asm):00234         CTokPRESET      EQU     $BE
     00BF             (  basictokens.asm):00235         CTokSCREEN      EQU     $BF
     00C0             (  basictokens.asm):00236         CTokPCLEAR      EQU     $C0
     00C1             (  basictokens.asm):00237         CTokCOLOR       EQU     $C1
     00C2             (  basictokens.asm):00238         CTokCIRCLE      EQU     $C2
     00C3             (  basictokens.asm):00239         CTokPAINT       EQU     $C3
     00C4             (  basictokens.asm):00240         CTokGET         EQU     $C4
     00C5             (  basictokens.asm):00241         CTokPUT         EQU     $C5
     00C6             (  basictokens.asm):00242         CTokDRAW        EQU     $C6
     00C7             (  basictokens.asm):00243         CTokPCOPY       EQU     $C7
     00C8             (  basictokens.asm):00244         CTokPMODE       EQU     $C8
     00C9             (  basictokens.asm):00245         CTokPLAY        EQU     $C9
     00CA             (  basictokens.asm):00246         CTokDLOAD       EQU     $CA
     00CB             (  basictokens.asm):00247         CTokRENUM       EQU     $CB
     00A4             (  basictokens.asm):00248         CTokTAB         EQU     $A4
     00A5             (  basictokens.asm):00249         CTokTO          EQU     $A5
     00A6             (  basictokens.asm):00250         CTokSUB         EQU     $A6
     00CC             (  basictokens.asm):00251         CTokFN          EQU     $CC
     00A7             (  basictokens.asm):00252         CTokTHEN        EQU     $A7
     00A8             (  basictokens.asm):00253         CTokNOT         EQU     $A8
     00A9             (  basictokens.asm):00254         CTokSTEP        EQU     $A9
     00AA             (  basictokens.asm):00255         CTokOFF         EQU     $AA
     00AB             (  basictokens.asm):00256         CTokPLUS        EQU     $AB
     00AC             (  basictokens.asm):00257         CTokMINUS       EQU     $AC
     00AD             (  basictokens.asm):00258         CTokTIMES       EQU     $AD
     00AE             (  basictokens.asm):00259         CTokDIVIDE      EQU     $AE
     00AF             (  basictokens.asm):00260         CTokAT          EQU     $AF
     00B0             (  basictokens.asm):00261         CTokAND         EQU     $B0
     00B1             (  basictokens.asm):00262         CTokOR          EQU     $B1
     00B2             (  basictokens.asm):00263         CTokGREATER     EQU     $B2
     00B3             (  basictokens.asm):00264         CTokEQUAL       EQU     $B3
     00B4             (  basictokens.asm):00265         CTokLESS        EQU     $B4
     00CD             (  basictokens.asm):00266         CTokUSING       EQU     $CD
                      (  basictokens.asm):00267         
     0080             (  basictokens.asm):00268         CTokFirstC      EQU     CTokFOR
     ????             (  basictokens.asm):00269         CtokLastC       EQU     CTokUsing
                      (  basictokens.asm):00270         
                      (  basictokens.asm):00271         ;
                      (  basictokens.asm):00272         ; CoCo 1/2 Functions
                      (  basictokens.asm):00273         ; Tokens are preceeded by $FF
                      (  basictokens.asm):00274         ;
                      (  basictokens.asm):00275         
     0080             (  basictokens.asm):00276         CTokSGN         EQU     $80
     0081             (  basictokens.asm):00277         CTokINT         EQU     $81
     0082             (  basictokens.asm):00278         CTokABS         EQU     $82
     009A             (  basictokens.asm):00279         CTokPOS         EQU     $9A
     0084             (  basictokens.asm):00280         CTokRND         EQU     $84
     009B             (  basictokens.asm):00281         CTokSQR         EQU     $9B
     0099             (  basictokens.asm):00282         CTokLOG         EQU     $99
     0097             (  basictokens.asm):00283         CTokEXP         EQU     $97
     0085             (  basictokens.asm):00284         CTokSIN         EQU     $85
     0095             (  basictokens.asm):00285         CTokCOS         EQU     $95
     0096             (  basictokens.asm):00286         CTokTAN         EQU     $96
     0094             (  basictokens.asm):00287         CTokATN         EQU     $94
     0086             (  basictokens.asm):00288         CTokPEEK        EQU     $86
     0087             (  basictokens.asm):00289         CTokLEN         EQU     $87
     0088             (  basictokens.asm):00290         CTokSTRS        EQU     $88
     0089             (  basictokens.asm):00291         CTokVAL         EQU     $89
     008A             (  basictokens.asm):00292         CTokASC         EQU     $8A
     008B             (  basictokens.asm):00293         CTokCHRS        EQU     $8B
     008C             (  basictokens.asm):00294         CTokEOF         EQU     $8C
     008D             (  basictokens.asm):00295         CTokJOYSTK      EQU     $8D
     0098             (  basictokens.asm):00296         CTokFIX         EQU     $98
     009C             (  basictokens.asm):00297         CTokHEXS        EQU     $9C
     008E             (  basictokens.asm):00298         CTokLEFTS       EQU     $8E
     008F             (  basictokens.asm):00299         CTokRIGHTS      EQU     $8F
     0090             (  basictokens.asm):00300         CTokMIDS        EQU     $90
     0091             (  basictokens.asm):00301         CTokPOINT       EQU     $91
     0092             (  basictokens.asm):00302         CTokINKEYS      EQU     $92
     0093             (  basictokens.asm):00303         CTokMEM         EQU     $93
     009D             (  basictokens.asm):00304         CTokVARPTR      EQU     $9D
     009E             (  basictokens.asm):00305         CTokINSTR       EQU     $9E
     009F             (  basictokens.asm):00306         CTokTIMER       EQU     $9F
     00A0             (  basictokens.asm):00307         CTokPPOINT      EQU     $A0
     00A1             (  basictokens.asm):00308         CTokSTRINGS     EQU     $A1
     0083             (  basictokens.asm):00309         CTokUSR         EQU     $83
                      (  basictokens.asm):00310         
     0080             (  basictokens.asm):00311         CTokFirstF      EQU     CTokSGN
     00A1             (  basictokens.asm):00312         CTokLastF       EQU     CTokSTRINGS
                      (  basictokens.asm):00313         
                      (  basictokens.asm):00314         
                      (  basictokens.asm):00315         ;
                      (  basictokens.asm):00316         ; CoCo RS-DOS command tokens
                      (  basictokens.asm):00317         ;
                      (  basictokens.asm):00318         
     00CE             (  basictokens.asm):00319         CDTokDIR        EQU     $CE
     00CF             (  basictokens.asm):00320         CDTokDRIVE      EQU     $CF
     00D0             (  basictokens.asm):00321         CDTokFIELD      EQU     $D0
     00D1             (  basictokens.asm):00322         CDTokFILES      EQU     $D1
     00D2             (  basictokens.asm):00323         CDTokKILL       EQU     $D2
     00D3             (  basictokens.asm):00324         CDTokLOAD       EQU     $D3
     00D4             (  basictokens.asm):00325         CDTokLSET       EQU     $D4
     00D5             (  basictokens.asm):00326         CDTokMERGE      EQU     $D5
     00D6             (  basictokens.asm):00327         CDTokRENAME     EQU     $D6
     00D7             (  basictokens.asm):00328         CDTokRSET       EQU     $D7
     00D8             (  basictokens.asm):00329         CDTokSAVE       EQU     $D8
     00D9             (  basictokens.asm):00330         CDTokWRITE      EQU     $D9
     00DA             (  basictokens.asm):00331         CDTokVERIFY     EQU     $DA
     00DB             (  basictokens.asm):00332         CDTokUNLOAD     EQU     $DB
     00DC             (  basictokens.asm):00333         CDTokDSKINI     EQU     $DC
     00DD             (  basictokens.asm):00334         CDTokBACKUP     EQU     $DD
     00DE             (  basictokens.asm):00335         CDTokCOPY       EQU     $DE
     00DF             (  basictokens.asm):00336         CDTokDISKIS     EQU     $DF
     00E0             (  basictokens.asm):00337         CDTokDISKOS     EQU     $E0
                      (  basictokens.asm):00338         
     00CE             (  basictokens.asm):00339         CDTokFirstC     EQU     CDTokDIR        ; First RS-DOS command Token
     00E0             (  basictokens.asm):00340         CDTokLastC      EQU     CDTokDISKOS
     0013             (  basictokens.asm):00341         CDTokCountC     EQU     (CDTokLastC-CDTokFirstC)+1
                      (  basictokens.asm):00342         
                      (  basictokens.asm):00343         ;
                      (  basictokens.asm):00344         ; CoCo RS-DOS function tokens
                      (  basictokens.asm):00345         ;
                      (  basictokens.asm):00346         
     00A2             (  basictokens.asm):00347         CDTokCVN        EQU     $A2
     00A3             (  basictokens.asm):00348         CDTokFREE       EQU     $A3
     00A4             (  basictokens.asm):00349         CDTokLOC        EQU     $A4
     00A5             (  basictokens.asm):00350         CDTokLOF        EQU     $A5
     00A6             (  basictokens.asm):00351         CDTokMKNS       EQU     $A6
                      (  basictokens.asm):00352         
     00A2             (  basictokens.asm):00353         CDTokFirstF     EQU     CDTokCVN        ; First RS-DOS function Token
     00A6             (  basictokens.asm):00354         CDTokLastF      EQU     CDTokMKNS
     0005             (  basictokens.asm):00355         CDTokCountF     EQU     (CDTokLastF-CDTokFirstF)+1
                      (  basictokens.asm):00356         
                      (  basictokens.asm):00357         
     0005             (  basictokens.asm):00358         CmdTableSize    equ     5               ; 5 bytes in command table
     0005             (  basictokens.asm):00359         FuncTableSize   equ     5               ; 5 bytes in function table
     000A             (  basictokens.asm):00360         BasTableSize    equ     (CmdTableSize+FuncTableSize)
                      (  basictokens.asm):00361         
                      (  basictokens.asm):00362         ; offsets in command / function table stubs
     0000             (  basictokens.asm):00363         BasTableCount   equ     0               ; No of commands
     0001             (  basictokens.asm):00364         BasTableWords   equ     1               ; address of reserved word list
     0003             (  basictokens.asm):00365         BasTableAddrs   equ     3               ; address of dispatch address table
                      (  basictokens.asm):00366         
                      (  basictokens.asm):00367                         ifdef   Dragon
                      (  basictokens.asm):00368         
     00CE             (  basictokens.asm):00369         DOSTokFirstC    EQU     DDTokFirstC
     00E7             (  basictokens.asm):00370         DOSTokLastC     EQU     DDTokLastC
     001A             (  basictokens.asm):00371         DOSTokCountC    EQU     DDTokCountC
                      (  basictokens.asm):00372         
     00A2             (  basictokens.asm):00373         DOSTokFirstF    EQU     DDTokFirstF
     00A8             (  basictokens.asm):00374         DOSTokLastF     EQU     DDTokLastF
     0007             (  basictokens.asm):00375         DOSTokCountF    EQU     DDTokCountF
                      (  basictokens.asm):00376                         else
                      (  basictokens.asm):00377         
0000                  (  basictokens.asm):00378         DOSTokFirstC    EQU     CDTokFirstC
0000                  (  basictokens.asm):00379         DOSTokLastC     EQU     CDTokLastC
0000                  (  basictokens.asm):00380         DOSTokCountC    EQU     CDTokCountC
                      (  basictokens.asm):00381         
0000                  (  basictokens.asm):00382         DOSTokFirstF    EQU     CDTokFirstF
0000                  (  basictokens.asm):00383         DOSTokLastF     EQU     CDTokLastF
0000                  (  basictokens.asm):00384         DOSTokCountF    EQU     CDTokCountF
                      (  basictokens.asm):00385                         endc
                      (  basictokens.asm):00386         
                      (     DiagCart.asm):00004                         use     coco3.asm
                      (        coco3.asm):00001         ;
                      (        coco3.asm):00002         ; CoCo3 specific defines.
                      (        coco3.asm):00003         ;
                      (        coco3.asm):00004         
     FF90             (        coco3.asm):00005         InitReg1        EQU     $FF90           ; initialization register 1
                      (        coco3.asm):00006         
     0080             (        coco3.asm):00007         Init1CoCo       EQU     %10000000       ; CoCo 1/2 compatible mode
     0040             (        coco3.asm):00008         Init1MMU        EQU     %01000000       ; MMU enable
     0020             (        coco3.asm):00009         Init1GIRQ       EQU     %00100000       ; GIME IRQ enabled
     0010             (        coco3.asm):00010         Init1GFIRQ      EQU     %00010000       ; GIME FIRQ enabled
     0008             (        coco3.asm):00011         Intit1RFE       EQU     %00001000       ; Ram at FExx constant
     0004             (        coco3.asm):00012         Init1SCS        EQU     %00000100       ; Standard P2/SCS
     0002             (        coco3.asm):00013         Init1MC1        EQU     %00000010       ; ROM map control bit 1
     0001             (        coco3.asm):00014         Init1MC0        EQU     %00000001       ; ROM map control bit 0
                      (        coco3.asm):00015         
                      (        coco3.asm):00016         ; Rom types for Init1MC0, Init1MC1
     0000             (        coco3.asm):00017         Init1ROMIntExt  EQU     %00000000       ; 16K internal, 16K external (like CoCo 1,2)
     0002             (        coco3.asm):00018         IntitROMInt     EQU     %00000010       ; 32K internal
     0003             (        coco3.asm):00019         IntitROMExt     EQU     %00000011       ; 32K external (except interrupt vectors).
                      (        coco3.asm):00020         
     0003             (        coco3.asm):00021         Init1ROMMask    EQU     Init1MC1+Init1MC0       ; Mask for ROM bits
                      (        coco3.asm):00022         
     FF91             (        coco3.asm):00023         InitReg2        EQU     $FF91           ; Initialization register 2
                      (        coco3.asm):00024         
                      (        coco3.asm):00025         ; bits 7,6,4,3,2,1 unused
     0020             (        coco3.asm):00026         Init2TINS       EQU     %00100000       ; Timer input select, 1 = 70ns, 0 = 63.5 ns
     0001             (        coco3.asm):00027         Init2Task       EQU     %00000001       ; Task register select
                      (        coco3.asm):00028         
     FF92             (        coco3.asm):00029         IRQEnableReg    EQU     $FF92           ; Interrupt request enable register
                      (        coco3.asm):00030         
                      (        coco3.asm):00031         ; bits 7, 6 unused
     0020             (        coco3.asm):00032         IRQEnTMR        EQU     %00100000       ; Timer interrupt
     0010             (        coco3.asm):00033         IRQEnHBORD      EQU     %00010000       ; Horizontal border interrupt
     0008             (        coco3.asm):00034         IRQEnVBORD      EQU     %00001000       ; Vertical border interrupt
     0004             (        coco3.asm):00035         IRQEnEI2        EQU     %00000100       ; Serial data interrupt
     0002             (        coco3.asm):00036         IRQEnEI1        EQU     %00000010       ; Keyboard interrupt
     0001             (        coco3.asm):00037         IRQEnEI0        EQU     %00000001       ; Cartridge interrupt
                      (        coco3.asm):00038         
     FF93             (        coco3.asm):00039         FIRQEnableReg   EQU     $FF93           ; Fast Interrupt request enable register
                      (        coco3.asm):00040         
                      (        coco3.asm):00041         ; bits 7, 6 unused
     0020             (        coco3.asm):00042         FIRQEnTMR       EQU     %00100000       ; Timer interrupt
     0010             (        coco3.asm):00043         FIRQEnHBORD     EQU     %00010000       ; Horizontal border interrupt
     0008             (        coco3.asm):00044         FIRQEnVBORD     EQU     %00001000       ; Vertical border interrupt
     0004             (        coco3.asm):00045         FIRQEnEI2       EQU     %00000100       ; Serial data interrupt
     0002             (        coco3.asm):00046         FIRQEnEI1       EQU     %00000010       ; Keyboard interrupt
     0001             (        coco3.asm):00047         FIRQEnEI0       EQU     %00000001       ; Cartridge interrupt
                      (        coco3.asm):00048         
     FF94             (        coco3.asm):00049         TimerMSB        EQU     $FF94           ; High order bits of timer (bits 7..4 unused).
     FF95             (        coco3.asm):00050         TimerLSB        EQU     $FF95           ; Low order bits of timer
                      (        coco3.asm):00051         
     FF98             (        coco3.asm):00052         VideoReg        EQU     $FF98           ; Video register
                      (        coco3.asm):00053         
                      (        coco3.asm):00054         ; bit 6 unused
     0080             (        coco3.asm):00055         VideoBP         EQU     %10000000       ; Bitplane 0 = text modes, 1 = graphics modes
     0020             (        coco3.asm):00056         VideoBPI        EQU     %00100000       ; Burst phase invert (colour set)
     0010             (        coco3.asm):00057         VideoMOCH       EQU     %00010000       ; Monochrome on composite (when 1)
     0008             (        coco3.asm):00058         VideoH50        EQU     %00001000       ; 1 = 50Hz power, 0 = 60Hz power
     0007             (        coco3.asm):00059         VideoLPRMask    EQU     %00000111       ; Lines per row (see below)
                      (        coco3.asm):00060         
     0000             (        coco3.asm):00061         VideoLPR1       EQU     %00000000       ; One line per row
     0001             (        coco3.asm):00062         VideoLPR2       EQU     %00000001       ; Two lines per row
     0002             (        coco3.asm):00063         VideoLPR3       EQU     %00000010       ; Three lines per row
     0003             (        coco3.asm):00064         VideoLPR8       EQU     %00000011       ; Eight lines per row
     0004             (        coco3.asm):00065         VideoLPR9       EQU     %00000100       ; Nine lines per row
     0005             (        coco3.asm):00066         VideoLPR10      EQU     %00000101       ; Ten lines per row
     0006             (        coco3.asm):00067         VideoLPR12      EQU     %00000110       ; Twelve lines per row
     0007             (        coco3.asm):00068         VideoLPRRes     EQU     %00000111       ; Reserved
                      (        coco3.asm):00069         
                      (        coco3.asm):00070         ; bit 7, undefined
                      (        coco3.asm):00071         ; bits 6..5 Lines per field (number of rows)
                      (        coco3.asm):00072         ; bits 4..2 Horizontal resolution
                      (        coco3.asm):00073         ; bits 1..0 Colour resolution
     FF99             (        coco3.asm):00074         VideoResReg     EQU     $FF99           ; video resolution register
                      (        coco3.asm):00075         
     0060             (        coco3.asm):00076         VidLPFMask      EQU     %01100000
     0000             (        coco3.asm):00077         VidLPF192       EQU     %00000000       ; 192 rows
     0020             (        coco3.asm):00078         VidLPF200       EQU     %00100000       ; 200 rows
     0040             (        coco3.asm):00079         VidLPF210       EQU     %01000000       ; 210 rows
     0060             (        coco3.asm):00080         VidLPF225       EQU     %01100000       ; 225 rows
                      (        coco3.asm):00081         
     001C             (        coco3.asm):00082         VidHRESMask     EQU     %00011100       
     001C             (        coco3.asm):00083         VidHRES160      EQU     %00011100       ; 160 graphics / 80 text
     0018             (        coco3.asm):00084         VidHRES128      EQU     %00011000       ; 128 graphics / 64 text
     0014             (        coco3.asm):00085         VidHRES80       EQU     %00010100       ; 80 graphics / 80 text
     0010             (        coco3.asm):00086         VidHRES64       EQU     %00010000       ; 64 graphics / 64 text
     000C             (        coco3.asm):00087         VidHRES40       EQU     %00001100       ; 40 graphics / 40 text
     0008             (        coco3.asm):00088         VidHRES32       EQU     %00001000       ; 32 graphics / 32 text
     0004             (        coco3.asm):00089         VidHRES20       EQU     %00000100       ; 20 graphics / 40 text
     0000             (        coco3.asm):00090         VidHRES16       EQU     %00000000       ; 16 graphics / 32 text
                      (        coco3.asm):00091         
                      (        coco3.asm):00092         ; bits 7,6 unused, bits 5..0 contain border colour.
     FF9A             (        coco3.asm):00093         BorderReg       EQU     $FF9A           ; Border register
                      (        coco3.asm):00094         
                      (        coco3.asm):00095         ; bits 7..4 reserved, bits 3..0 vertical scroll bits
     FF9C             (        coco3.asm):00096         VScrollReg      EQU     $FF9C           ; vertical scroll register
                      (        coco3.asm):00097         
     FF9D             (        coco3.asm):00098         VertOffsetMSB   EQU     $FF9D           ; Vertical offset MSB
     FF9E             (        coco3.asm):00099         VertOffsetLSB   EQU     $FF9E           ; Vertical offset LSB
                      (        coco3.asm):00100         
     FF9F             (        coco3.asm):00101         HOffsetReg      EQU     $FF9F           ; horizontal offset register
                      (        coco3.asm):00102         
     FFA0             (        coco3.asm):00103         MMUBase         EQU     $FFA0           ; base of MMU regs
     FFA0             (        coco3.asm):00104         MMUT0Base       EQU     MMUBase+0       ; Base of Task 0 registers
     FFA8             (        coco3.asm):00105         MMUT1Base       EQU     MMUBase+8       ; Base of Task 1 registers
                      (        coco3.asm):00106         
     FFA0             (        coco3.asm):00107         MMUT0Block0     EQU     MMUT0Base+0     ; task 0, block 0
     FFA1             (        coco3.asm):00108         MMUT0Block1     EQU     MMUT0Base+1     ; task 0, block 1
     FFA2             (        coco3.asm):00109         MMUT0Block2     EQU     MMUT0Base+2     ; task 0, block 2
     FFA3             (        coco3.asm):00110         MMUT0Block3     EQU     MMUT0Base+3     ; task 0, block 3
     FFA4             (        coco3.asm):00111         MMUT0Block4     EQU     MMUT0Base+4     ; task 0, block 4
     FFA5             (        coco3.asm):00112         MMUT0Block5     EQU     MMUT0Base+5     ; task 0, block 5
     FFA6             (        coco3.asm):00113         MMUT0Block6     EQU     MMUT0Base+6     ; task 0, block 6
     FFA7             (        coco3.asm):00114         MMUT0Block7     EQU     MMUT0Base+7     ; task 0, block 7
                      (        coco3.asm):00115         
     FFA8             (        coco3.asm):00116         MMUT1Block0     EQU     MMUT1Base+0     ; task 1, block 0
     FFA9             (        coco3.asm):00117         MMUT1Block1     EQU     MMUT1Base+1     ; task 1, block 1
     FFAA             (        coco3.asm):00118         MMUT1Block2     EQU     MMUT1Base+2     ; task 1, block 2
     FFAB             (        coco3.asm):00119         MMUT1Block3     EQU     MMUT1Base+3     ; task 1, block 3
     FFAC             (        coco3.asm):00120         MMUT1Block4     EQU     MMUT1Base+4     ; task 1, block 4
     FFAD             (        coco3.asm):00121         MMUT1Block5     EQU     MMUT1Base+5     ; task 1, block 5
     FFAE             (        coco3.asm):00122         MMUT1Block6     EQU     MMUT1Base+6     ; task 1, block 6
     FFAF             (        coco3.asm):00123         MMUT1Block7     EQU     MMUT1Base+7     ; task 1, block 7
                      (        coco3.asm):00124         
                      (        coco3.asm):00125         ; MMU blocks
                      (        coco3.asm):00126         ; For a basic 128K CoCo3, the 128K occupies the *TOP* 128K of the
                      (        coco3.asm):00127         ; virtual address space.
                      (        coco3.asm):00128         ; Bits 5..3 determine the block number, bits 2..0 determine the 8K
                      (        coco3.asm):00129         ; page within the block.
                      (        coco3.asm):00130         
     0030             (        coco3.asm):00131         Block60         EQU     $30
     0031             (        coco3.asm):00132         Block61         EQU     $31
     0032             (        coco3.asm):00133         Block62         EQU     $32
     0033             (        coco3.asm):00134         Block63         EQU     $33
     0034             (        coco3.asm):00135         Block64         EQU     $34
     0035             (        coco3.asm):00136         Block65         EQU     $35
     0036             (        coco3.asm):00137         Block66         EQU     $36
     0037             (        coco3.asm):00138         Block67         EQU     $37
                      (        coco3.asm):00139         
     0038             (        coco3.asm):00140         Block70         EQU     $38
     0039             (        coco3.asm):00141         Block71         EQU     $39
     003A             (        coco3.asm):00142         Block72         EQU     $3A
     003B             (        coco3.asm):00143         Block73         EQU     $3B
     003C             (        coco3.asm):00144         Block74         EQU     $3C
     003D             (        coco3.asm):00145         Block75         EQU     $3D
     003E             (        coco3.asm):00146         Block76         EQU     $3E
     003F             (        coco3.asm):00147         Block77         EQU     $3F
                      (        coco3.asm):00148         
     0030             (        coco3.asm):00149         MinBlock128     EQU     $30
     0000             (        coco3.asm):00150         MinBlock512     EQU     $00
     003F             (        coco3.asm):00151         MaxBlock        EQU     $3F
     003B             (        coco3.asm):00152         MaxBlockRRMode  EQU     $3B             ; Maximimum RAM block if ROM enabled.
                      (        coco3.asm):00153         
     003F             (        coco3.asm):00154         BlockNoMask     EQU     $3F
                      (        coco3.asm):00155         
     0000             (        coco3.asm):00156         Block0Base      EQU     $0000           ; $0000-$1FFF
     2000             (        coco3.asm):00157         Block1Base      EQU     $2000           ; $2000-$1FFF
     4000             (        coco3.asm):00158         Block2Base      EQU     $4000           ; $4000-$1FFF
     6000             (        coco3.asm):00159         Block3Base      EQU     $6000           ; $6000-$1FFF
     8000             (        coco3.asm):00160         Block4Base      EQU     $8000           ; $8000-$1FFF
     A000             (        coco3.asm):00161         Block5Base      EQU     $A000           ; $A000-$1FFF
     C000             (        coco3.asm):00162         Block6Base      EQU     $C000           ; $C000-$1FFF
     E000             (        coco3.asm):00163         Block7Base      EQU     $E000           ; $E000-$1FFF
                      (        coco3.asm):00164         
                      (        coco3.asm):00165         
     FFB0             (        coco3.asm):00166         PaletteBase     EQU     $FFB0           ; base of palette registers
     FFB0             (        coco3.asm):00167         Palette0        EQU     PaletteBase+0
     FFB1             (        coco3.asm):00168         Palette1        EQU     PaletteBase+1
     FFB2             (        coco3.asm):00169         Palette2        EQU     PaletteBase+2
     FFB3             (        coco3.asm):00170         Palette3        EQU     PaletteBase+3
     FFB4             (        coco3.asm):00171         Palette4        EQU     PaletteBase+4
     FFB5             (        coco3.asm):00172         Palette5        EQU     PaletteBase+5
     FFB6             (        coco3.asm):00173         Palette6        EQU     PaletteBase+6
     FFB7             (        coco3.asm):00174         Palette7        EQU     PaletteBase+7
     FFB8             (        coco3.asm):00175         Palette8        EQU     PaletteBase+8
     FFB9             (        coco3.asm):00176         Palette9        EQU     PaletteBase+9
     FFBA             (        coco3.asm):00177         Palette10       EQU     PaletteBase+10
     FFBB             (        coco3.asm):00178         Palette11       EQU     PaletteBase+11
     FFBC             (        coco3.asm):00179         Palette12       EQU     PaletteBase+12
     FFBD             (        coco3.asm):00180         Palette13       EQU     PaletteBase+13
     FFBE             (        coco3.asm):00181         Palette14       EQU     PaletteBase+14
     FFBF             (        coco3.asm):00182         Palette15       EQU     PaletteBase+15
                      (     DiagCart.asm):00005                         use     cpudefs.asm
                      (      cpudefs.asm):00001         ;
                      (      cpudefs.asm):00002         ; CPUDEFS
                      (      cpudefs.asm):00003         ;
                      (      cpudefs.asm):00004         
                      (      cpudefs.asm):00005         ; bitmasks for flags
     0001             (      cpudefs.asm):00006         FlagCarry               equ             $01
     0002             (      cpudefs.asm):00007         FlagOverflow    equ             $02
     0004             (      cpudefs.asm):00008         FlagZero                equ             $04
     0008             (      cpudefs.asm):00009         FlagNegative    equ             $08
     0010             (      cpudefs.asm):00010         FlagIRQ                 equ             $10
     0020             (      cpudefs.asm):00011         FlagHlafCarry   equ             $20
     0040             (      cpudefs.asm):00012         FlagFIRQ                equ             $40
     0080             (      cpudefs.asm):00013         FlagEntire              equ             $80
                      (      cpudefs.asm):00014         
                      (      cpudefs.asm):00015         ; ANDCC with IntsEnable to enable IRQ + FIRQ
                      (      cpudefs.asm):00016         ; ORCC with IntsDisable to disable IRQ + FIRQ
     FFAF             (      cpudefs.asm):00017         IntsEnable              equ             ~(FlagFIRQ+FlagIRQ)
     0050             (      cpudefs.asm):00018         IntsDisable             equ             (FlagFIRQ+FlagIRQ)      
                      (      cpudefs.asm):00019         
     FFF2             (      cpudefs.asm):00020         HWVecBase               equ             $FFF2
     FFF2             (      cpudefs.asm):00021         HWVecSWI3               equ             $FFF2
     FFF4             (      cpudefs.asm):00022         HWVecSWI2               equ             $FFF4
     FFF6             (      cpudefs.asm):00023         HWVecFIRQ               equ             $FFF6
     FFF8             (      cpudefs.asm):00024         HWVecIRQ                equ             $FFF8
     FFFA             (      cpudefs.asm):00025         HWVecSWI                equ             $FFFA
     FFFC             (      cpudefs.asm):00026         HWVecNMI                equ             $FFFC
     FFFE             (      cpudefs.asm):00027         HWVecReset              equ             $FFFE
                      (      cpudefs.asm):00028         
     0007             (      cpudefs.asm):00029         HWVecCount              equ             $7
                      (      cpudefs.asm):00030         
                      (      cpudefs.asm):00031         
                      (      cpudefs.asm):00032         
                      (      cpudefs.asm):00033         
                      (     DiagCart.asm):00006                         use     dgndefs.asm
                      (      dgndefs.asm):00001         *
                      (      dgndefs.asm):00002         * Deinitions for ports on Dragon 32/64/Alpha.
                      (      dgndefs.asm):00003         *
                      (      dgndefs.asm):00004         * 2004-11-16. P.Harvey-Smith.
                      (      dgndefs.asm):00005         *       Fixed the stupid error I made in the defines below
                      (      dgndefs.asm):00006         *       that made all the non DPxxxxx defines equal to FF00 !!!
                      (      dgndefs.asm):00007         *
                      (      dgndefs.asm):00008         * 2004-10-10. P.Harvey-Smith.
                      (      dgndefs.asm):00009         *       Tidyed up a little, moved romdefs into their own file.
                      (      dgndefs.asm):00010         *
                      (      dgndefs.asm):00011         
     FF00             (      dgndefs.asm):00012         IO              equ             $ff00           ; IO page on Dragon
                      (      dgndefs.asm):00013         
                      (      dgndefs.asm):00014         *
                      (      dgndefs.asm):00015         * Most of these symbols will be defined twice, as some 
                      (      dgndefs.asm):00016         * of the Dragon code, sets DP=$FF, and uses direct page
                      (      dgndefs.asm):00017         * addressing to access the io ports, whilst some of it
                      (      dgndefs.asm):00018         * uses absolute addressing.
                      (      dgndefs.asm):00019         * The versions starting DP must be used with DP=$FF.
                      (      dgndefs.asm):00020         *
                      (      dgndefs.asm):00021         
                      (      dgndefs.asm):00022         *Pia 0 and 1 standard on all Dragons.
                      (      dgndefs.asm):00023         
     0000             (      dgndefs.asm):00024         DPPIA0DA        EQU             $00             ; Side A Data/DDR
     0001             (      dgndefs.asm):00025         DPPIA0CRA       EQU             $01             ; Side A Control.
     0002             (      dgndefs.asm):00026         DPPIA0DB        EQU             $02             ; Side B Data/DDR
     0003             (      dgndefs.asm):00027         DPPIA0CRB       EQU             $03             ; Side B Control.
                      (      dgndefs.asm):00028         
     FF00             (      dgndefs.asm):00029         PIA0DA          EQU             DPPIA0DA+IO     ; Side A Data/DDR
     FF01             (      dgndefs.asm):00030         PIA0CRA         EQU             DPPIA0CRA+IO    ; Side A Control.
     FF02             (      dgndefs.asm):00031         PIA0DB          EQU             DPPIA0DB+IO     ; Side A Data/DDR
     FF03             (      dgndefs.asm):00032         PIA0CRB         EQU             DPPIA0CRB+IO    ; Side A Control.
                      (      dgndefs.asm):00033         
     0020             (      dgndefs.asm):00034         DPPIA1DA        EQU             $20             ; Side A Data/DDR
     0021             (      dgndefs.asm):00035         DPPIA1CRA       EQU             $21             ; Side A Control.
     0022             (      dgndefs.asm):00036         DPPIA1DB        EQU             $22             ; Side B Data/DDR
     0023             (      dgndefs.asm):00037         DPPIA1CRB       EQU             $23             ; Side B Control.
                      (      dgndefs.asm):00038         
     FF20             (      dgndefs.asm):00039         PIA1DA          EQU             DPPIA1DA+IO     ; Side A Data/DDR
     FF21             (      dgndefs.asm):00040         PIA1CRA         EQU             DPPIA1CRA+IO    ; Side A Control.
     FF22             (      dgndefs.asm):00041         PIA1DB          EQU             DPPIA1DB+IO     ; Side A Data/DDR
     FF23             (      dgndefs.asm):00042         PIA1CRB         EQU             DPPIA1CRB+IO    ; Side A Control.
                      (      dgndefs.asm):00043         
                      (      dgndefs.asm):00044         * Dragon Alpha has a third PIA at FF24.
                      (      dgndefs.asm):00045         
     0024             (      dgndefs.asm):00046         DPPIA2DA        EQU             $24             ; Side A Data/DDR
     0025             (      dgndefs.asm):00047         DPPIA2CRA       EQU             $25             ; Side A Control.
     0026             (      dgndefs.asm):00048         DPPIA2DB        EQU             $26             ; Side B Data/DDR
     0027             (      dgndefs.asm):00049         DPPIA2CRB       EQU             $27             ; Side B Control.
                      (      dgndefs.asm):00050         
     FF24             (      dgndefs.asm):00051         PIA2DA          EQU             DPPIA2DA+IO     ; Side A Data/DDR
     FF25             (      dgndefs.asm):00052         PIA2CRA         EQU             DPPIA2CRA+IO    ; Side A Control.
     FF26             (      dgndefs.asm):00053         PIA2DB          EQU             DPPIA2DB+IO     ; Side A Data/DDR
     FF27             (      dgndefs.asm):00054         PIA2CRB         EQU             DPPIA2CRB+IO    ; Side A Control.
                      (      dgndefs.asm):00055         
                      (      dgndefs.asm):00056         ;WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
     002F             (      dgndefs.asm):00057         DPCmdRegA       EQU             $2F             ; command/status                        
     002E             (      dgndefs.asm):00058         DPTrkRegA       EQU             $2E             ; Track register
     002D             (      dgndefs.asm):00059         DPSecRegA       EQU             $2D             ; Sector register
     002C             (      dgndefs.asm):00060         DPDataRegA      EQU             $2C             ; Data register
                      (      dgndefs.asm):00061         
     FF2F             (      dgndefs.asm):00062         CmdRegA         EQU             DPCmdRegA+IO    ; command/status                        
     FF2E             (      dgndefs.asm):00063         TrkRegA         EQU             DPTrkRegA+IO    ; Track register
     FF2D             (      dgndefs.asm):00064         SecRegA         EQU             DPSecRegA+IO    ; Sector register
     FF2C             (      dgndefs.asm):00065         DataRegA        EQU             DPDataRegA+IO   ; Data register
                      (      dgndefs.asm):00066         
                      (      dgndefs.asm):00067         ; Constants for Alpha AY-8912 sound chip, which is used to control
                      (      dgndefs.asm):00068         ; Drive select and motor on the Alpha
                      (      dgndefs.asm):00069         
     000E             (      dgndefs.asm):00070         AYIOREG         EQU             $0E             ; AY-8912, IO Register number.
     0000             (      dgndefs.asm):00071         AYIdle          EQU             $00             ; Make AY Idle.
     0001             (      dgndefs.asm):00072         AYWriteReg      EQU             $01             ; Write AY Register
     0002             (      dgndefs.asm):00073         AYReadReg       EQU             $02             ; Read AY Register
     0003             (      dgndefs.asm):00074         AYREGLatch      EQU             $03             ; Latch register into AY
                      (      dgndefs.asm):00075         
     0003             (      dgndefs.asm):00076         DSMask          EQU             $03             ; Drive select mask.
     0004             (      dgndefs.asm):00077         MotorMask       EQU             $04             ; Motor enable mask
     0008             (      dgndefs.asm):00078         DDENMask        EQU             $08             ; DDEN Mask
     0010             (      dgndefs.asm):00079         ENPMask         EQU             $10             ; Enable Precomp mask
     0020             (      dgndefs.asm):00080         NMIMask         EQU             $20             ; NMI enable Mask
                      (      dgndefs.asm):00081         
                      (      dgndefs.asm):00082         ; Dragon 64/Alpha Serial port.
     0004             (      dgndefs.asm):00083         DPAciaData      EQU             $04             ; Acia Rx/Tx Register
     0005             (      dgndefs.asm):00084         DPAciaStat      EQU             $05             ; Acia status register
     0006             (      dgndefs.asm):00085         DPAciaCmd       EQU             $06             ; Acia command register
     0007             (      dgndefs.asm):00086         DPAciaCtrl      EQU             $07             ; Acia control register
                      (      dgndefs.asm):00087         
     FF04             (      dgndefs.asm):00088         AciaData        EQU             DPAciaData+IO   ; Acia Rx/Tx Register
     FF05             (      dgndefs.asm):00089         AciaStat        EQU             DPAciaStat+IO   ; Acia status register
     FF06             (      dgndefs.asm):00090         AciaCmd         EQU             DPAciaCmd+IO    ; Acia command register
     FF07             (      dgndefs.asm):00091         AciaCtrl        EQU             DPAciaCtrl+IO   ; Acia control register
                      (      dgndefs.asm):00092         
                      (      dgndefs.asm):00093         ; constants for the ACIA status register
                      (      dgndefs.asm):00094         
     0001             (      dgndefs.asm):00095         AciaSParityErr  EQU             $01             ; parity error
     0002             (      dgndefs.asm):00096         AciaSFrameErr   EQU             $02             ; framing error
     0004             (      dgndefs.asm):00097         AciaSOverrun    EQU             $04             ; data overrun
     0008             (      dgndefs.asm):00098         AciaSRxFull     EQU             $08             ; receiver register full
     0010             (      dgndefs.asm):00099         AciaSTxEmpty    EQU             $10             ; transmit register empty
     0020             (      dgndefs.asm):00100         AciaSDCD        EQU             $20             ; data carrier detect =0detect, 1=not detect
     0040             (      dgndefs.asm):00101         AciaSDSR        EQU             $40             ; data set ready 0=ready, 1=not ready
     0080             (      dgndefs.asm):00102         AciaSIRQ        EQU             $80             ; interrupt, 0=no int, 1=int
                      (      dgndefs.asm):00103         
                      (      dgndefs.asm):00104         ; constants for ACIA command register
     00C0             (      dgndefs.asm):00105         AciaPMCMask     EQU             $C0             ; mask for PMC bits
     000C             (      dgndefs.asm):00106         AciaTICMask     EQU             $0C             ; transmitter interrupt control mask
                      (      dgndefs.asm):00107         
     0000             (      dgndefs.asm):00108         AciaPMCPOdd     EQU             $00             ; odd parity tx/rx
     0040             (      dgndefs.asm):00109         AciaPMCPEven    EQU             $40             ; even parity tx/rx
     0080             (      dgndefs.asm):00110         AciaPMCPMark    EQU             $80             ; mark parity tx, rx parity disabled
     00C0             (      dgndefs.asm):00111         AciaPMCPSpace   EQU             $C0             ; space parity tx, rx parity disabled
     0020             (      dgndefs.asm):00112         AciaPME         EQU             $20             ; parity mode enable = 1, disable = 0
     0010             (      dgndefs.asm):00113         AciaREM         EQU             $10             ; receiver echo mode, 0=no echo, 1=echo
     0000             (      dgndefs.asm):00114         AcidTICRHDis    EQU             $00             ; RTS high, interrupt disabled
     0004             (      dgndefs.asm):00115         AcidTICRLEna    EQU             $04             ; RTS low, interrupt enabled
     0008             (      dgndefs.asm):00116         AcidTICRLDis    EQU             $08             ; RTS low, interrupt disabled
     000C             (      dgndefs.asm):00117         AcidTICRLBrk    EQU             $0C             ; RTS low, interrupt disabled, break on txd
     0002             (      dgndefs.asm):00118         AciaIRD         EQU             $02             ; receiver interrupt disable, 0=int enabled, 1=int disabled
     0001             (      dgndefs.asm):00119         AciaDTR         EQU             $01             ; data terminal ready 0=DTR high, 1=DTR low
                      (      dgndefs.asm):00120         
                      (      dgndefs.asm):00121         ; constants for the ACIA control register 
                      (      dgndefs.asm):00122         ; bits 0..3 specify the baud rate
                      (      dgndefs.asm):00123         
     000F             (      dgndefs.asm):00124         AciaBrdMask     EQU             $0F             ; baud rate mask
     0000             (      dgndefs.asm):00125         AciaCBrdExt     EQU             $00             ; 1/16th external clock
     0001             (      dgndefs.asm):00126         AciaCBrd50      EQU             $01             ; 50 baud
     0002             (      dgndefs.asm):00127         AciaCBrd75      EQU             $02             ; 75 baud
     0003             (      dgndefs.asm):00128         AciaCBrd110     EQU             $03             ; 110 baud
     0004             (      dgndefs.asm):00129         AciaCBrd135     EQU             $04             ; 135 baud
     0005             (      dgndefs.asm):00130         AciaCBrd150     EQU             $05             ; 150 baud
     0006             (      dgndefs.asm):00131         AciaCBrd300     EQU             $06             ; 300 baud
     0007             (      dgndefs.asm):00132         AciaCBrd600     EQU             $07             ; 600 baud
     0008             (      dgndefs.asm):00133         AciaCBrd1200    EQU             $08             ; 1200 baud
     0009             (      dgndefs.asm):00134         AciaCBrd1800    EQU             $09             ; 1800 baud
     000A             (      dgndefs.asm):00135         AciaCBrd2400    EQU             $0A             ; 2400 baud
     000B             (      dgndefs.asm):00136         AciaCBrd3600    EQU             $0B             ; 3600 baud
     000C             (      dgndefs.asm):00137         AciaCBrd4800    EQU             $0C             ; 4800 baud
     000D             (      dgndefs.asm):00138         AciaCBrd7200    EQU             $0D             ; 7200 baud
     000E             (      dgndefs.asm):00139         AciaCBrd9600    EQU             $0E             ; 9600 baud
     000E             (      dgndefs.asm):00140         AciaCBrd19200   EQU             $0E             ; 19200 baud
                      (      dgndefs.asm):00141         
     0010             (      dgndefs.asm):00142         AciaCRxClk      EQU             $10             ; receiver clock source, 0= external, 1=baud rate
     0060             (      dgndefs.asm):00143         AciaWrdMask     EQU             $60             ; word length bits mask
     0000             (      dgndefs.asm):00144         AciaCWrd8       EQU             $00             ; 8 bit word
     0020             (      dgndefs.asm):00145         AciaCWrd7       EQU             $20             ; 7 bit word
     0040             (      dgndefs.asm):00146         AciaCWrd6       EQU             $40             ; 6 bit word
     0060             (      dgndefs.asm):00147         AciaCWrd5       EQU             $60             ; 5 bit word3
     0080             (      dgndefs.asm):00148         AciaCSBN        EQU             $80             ; stop bit number, 0=1 bit, 1=2 bits
                      (      dgndefs.asm):00149         
                      (      dgndefs.asm):00150         ; Dragon Alpha Modem port (6850)
                      (      dgndefs.asm):00151         
     0028             (      dgndefs.asm):00152         DPModemCtrl     EQU             $28             ; Modem Control/Status
     0029             (      dgndefs.asm):00153         DPModemData     EQU             $29             ; Modem Rx/Tx Data
                      (      dgndefs.asm):00154         
     FF28             (      dgndefs.asm):00155         ModemCtrl       EQU             DPModemCtrl+IO  ; Modem Control/Status
     FF29             (      dgndefs.asm):00156         ModemData       EQU             DPModemData+IO  ; Modem Rx/Tx Data
                      (      dgndefs.asm):00157         
                      (      dgndefs.asm):00158         ;DragonDos Cartrage IO for WD2797
                      (      dgndefs.asm):00159         
                      (      dgndefs.asm):00160         ;WD2797 Floppy disk controler, used in DragonDos.
     0040             (      dgndefs.asm):00161         DPCmdRegD       EQU             $40             ; command/status                        
     0041             (      dgndefs.asm):00162         DPTrkRegD       EQU             $41             ; Track register
     0042             (      dgndefs.asm):00163         DPSecRegD       EQU             $42             ; Sector register
     0043             (      dgndefs.asm):00164         DPDataRegD      EQU             $43             ; Data register
                      (      dgndefs.asm):00165         
     FF40             (      dgndefs.asm):00166         CmdRegD         EQU             DPCmdRegD+IO    ; command/status        4               
     FF41             (      dgndefs.asm):00167         TrkRegD         EQU             DPTrkRegD+IO    ; Track register
     FF42             (      dgndefs.asm):00168         SecRegD         EQU             DPSecRegD+IO    ; Sector register
     FF43             (      dgndefs.asm):00169         DataRegD        EQU             DPDataRegD+IO   ; Data register
                      (      dgndefs.asm):00170         
     0048             (      dgndefs.asm):00171         DPDSKCTLD       EQU             $48             ; Disk DS/motor control reg
     FF48             (      dgndefs.asm):00172         DSKCTLD         EQU             DPDSKCTLD+IO            
                      (      dgndefs.asm):00173         
                      (      dgndefs.asm):00174         ; Disk IO bitmasks (DragonDos).
                      (      dgndefs.asm):00175         
     0020             (      dgndefs.asm):00176         NMIEnD          EQU             %00100000 
     0010             (      dgndefs.asm):00177         WPCEnD          EQU             %00010000 
     0008             (      dgndefs.asm):00178         SDensEnD        EQU             %00001000 
     0004             (      dgndefs.asm):00179         MotorOnD        EQU             %00000100 
     0000             (      dgndefs.asm):00180         Drive0D         EQU             %00000000
     0001             (      dgndefs.asm):00181         Drive1D         EQU             %00000001
     0002             (      dgndefs.asm):00182         Drive2D         EQU             %00000010
     0003             (      dgndefs.asm):00183         Drive3D         EQU             %00000011
     0003             (      dgndefs.asm):00184         DriveMaskD      EQU             %00000011       ; Mask to extract drives
                      (      dgndefs.asm):00185         
                      (      dgndefs.asm):00186         ; Disk IO bitmasks (Dragon Alpha).
                      (      dgndefs.asm):00187         
                      (      dgndefs.asm):00188         ;NMIEnA         EQU             %10000000       ; This is just a guess, but in current code just used as a flag 
     0080             (      dgndefs.asm):00189         Drive5or8       EQU             %10000000       ; is drive in 5" or 8" mode Acording to circuit trace on R.Harding's machine
     0040             (      dgndefs.asm):00190         WPCEnA          EQU             %01000000       ; Acording to circuit trace by R.Harding.
     0020             (      dgndefs.asm):00191         SDensEnA        EQU             %00100000       ; DDen Acording to circuit trace on R.Harding's machine
     0010             (      dgndefs.asm):00192         MotorOnA        EQU             %00010000       
     0001             (      dgndefs.asm):00193         Drive0A         EQU             %00000001       ; Drive selects acording to OS9 headers
     0002             (      dgndefs.asm):00194         Drive1A         EQU             %00000010
     0004             (      dgndefs.asm):00195         Drive2A         EQU             %00000100
     0008             (      dgndefs.asm):00196         Drive3A         EQU             %00001000
     000F             (      dgndefs.asm):00197         DriveMaskA      EQU             %00001111       ; Mask to extract drives
                      (      dgndefs.asm):00198         
                      (      dgndefs.asm):00199         ; On the Alpha, NMI is enabled/disabled by setting CA2 of the third PIA, High=enabled.
                      (      dgndefs.asm):00200         
                      (      dgndefs.asm):00201         ;WD1793/1772 Floppy disk controler, used in RS-DOS.
     0048             (      dgndefs.asm):00202         DPCmdRegT       EQU             $48             ; command/status                        
     0049             (      dgndefs.asm):00203         DPTrkRegT       EQU             $49             ; Track register
     004A             (      dgndefs.asm):00204         DPSecRegT       EQU             $4A             ; Sector register
     004B             (      dgndefs.asm):00205         DPDataRegT      EQU             $4B             ; Data registerT
                      (      dgndefs.asm):00206         
     FF48             (      dgndefs.asm):00207         CmdRegT         EQU             DPCmdRegT+IO    ; command/status        4               
     FF49             (      dgndefs.asm):00208         TrkRegT         EQU             DPTrkRegT+IO    ; Track register
     FF4A             (      dgndefs.asm):00209         SecRegT         EQU             DPSecRegT+IO    ; Sector register
     FF4B             (      dgndefs.asm):00210         DataRegT        EQU             DPDataRegT+IO   ; Data register
                      (      dgndefs.asm):00211         
     0040             (      dgndefs.asm):00212         DPDSKCTLT       EQU             $40             ; Disk DS/motor control reg
     FF40             (      dgndefs.asm):00213         DSKCTLT         EQU             DPDSKCTLT+IO            
                      (      dgndefs.asm):00214         
                      (      dgndefs.asm):00215         ; Disk IO bitmasks (RSDos FD-500).
                      (      dgndefs.asm):00216         
     0080             (      dgndefs.asm):00217         HaltEn          EQU             %10000000       ; Halt enable
     0040             (      dgndefs.asm):00218         SS0             EQU             %01000000       ; Side select
     0020             (      dgndefs.asm):00219         SDensEnT        EQU             %00100000       ; Double density enable 
     0020             (      dgndefs.asm):00220         NMIEnT          EQU             %00100000       ; Enable NMI, always enabled when in DD mode
     0010             (      dgndefs.asm):00221         WPCEnT          EQU             %00010000       
     0008             (      dgndefs.asm):00222         MotorOnT        EQU             %00001000       ; Drive selects only 3
     0001             (      dgndefs.asm):00223         Drive0T         EQU             %00000001
     0002             (      dgndefs.asm):00224         Drive1T         EQU             %00000010
     0004             (      dgndefs.asm):00225         Drive2T         EQU             %00000100
     0004             (      dgndefs.asm):00226         Drive3T         EQU             %00000100       ; Drive 3 same as drive 2 !
     0007             (      dgndefs.asm):00227         DriveMaskT      EQU             %00000111       ; Mask to extract drives
     000F             (      dgndefs.asm):00228         DriveOffMaskT   EQU             MotorOnT+DriveMaskT     
                      (      dgndefs.asm):00229         
                      (      dgndefs.asm):00230         ; PIA control register bitmasks
     0080             (      dgndefs.asm):00231         CRIRQ1          EQU             %10000000       ; goes to 1 when an inerrupt is triggered on CA1/CB1
     0040             (      dgndefs.asm):00232         CRIRQ2          EQU             %01000000       ; goes to 1 when an inerrupt is triggered on CA2/CB2
     0020             (      dgndefs.asm):00233         CRC2IO          EQU             %00100000       ; CA2/CB2 output when 1, input when 0
     0004             (      dgndefs.asm):00234         CRDDRDATA       EQU             %00000100       ; DDR register accessed if 0, data if 1
     0002             (      dgndefs.asm):00235         CRIRQDir        EQU             %00000010       ; CA1/CB1 IRQ edge : 0 = falling, 1=rising
     0001             (      dgndefs.asm):00236         CRIRQ           EQU             %00000001       ; CA1/CB1 IRQ enable
                      (      dgndefs.asm):00237         
                      (      dgndefs.asm):00238         ; PIA1 bismasks
                      (      dgndefs.asm):00239         
                      (      dgndefs.asm):00240         ; Port B
                      (      dgndefs.asm):00241         
     0080             (      dgndefs.asm):00242         MaskAG          equ             %10000000       ; VDG A/G
     0040             (      dgndefs.asm):00243         MaskGM2         equ             %01000000       ; VDG GM2
     0020             (      dgndefs.asm):00244         MaskGM1         equ             %00100000       ; VDG GM1
     0010             (      dgndefs.asm):00245         MaskGM0         equ             %00010000       ; VDG GM0
     0008             (      dgndefs.asm):00246         MaskCSS         equ             %00001000       ; VDG CSS
     0004             (      dgndefs.asm):00247         MaskROMSEL      equ             %00000100       ; ROM select output on Dragon 64
     0004             (      dgndefs.asm):00248         MaskRAMType     equ             %00000100       ; RAM type input on Dragon 32
     0002             (      dgndefs.asm):00249         MaskSBS         equ             %00000010       ; Single bit sound sense
     0001             (      dgndefs.asm):00250         MaskBUSY        equ             %00000001       ; Printer busy 
                      (      dgndefs.asm):00251         
                      (      dgndefs.asm):00252         ; following 2 for convenience
     00F8             (      dgndefs.asm):00253         MaskVideo       equ             (MaskAG+MaskGM2+MaskGM1+MaskGM0+MaskCSS)
     0007             (      dgndefs.asm):00254         MaskNONVideo    equ             (MaskRAMType+MaskSBS+MaskBUSY)
                      (     DiagCart.asm):00007                         use     romdefs.asm
     0000             (      romdefs.asm):00001         DStubResWordsOfs                EQU     $0000           Offset of number of reserved words
     0001             (      romdefs.asm):00002         DStubResLookupOfs               EQU     $0001           Offset of reserved word lookup table
     0003             (      romdefs.asm):00003         DStubResJumpOfs                 EQU     $0003           Offset of reserved word jump table
     0005             (      romdefs.asm):00004         DStubFuncsOfs                   EQU     $0005           Offset of nummber of functions
     0006             (      romdefs.asm):00005         DStubFuncsLookupOfs             EQU     $0006           Offset of function lookup table
     0008             (      romdefs.asm):00006         DStubFuncsJumpOfs               EQU     $0008           Offset of functions jump table
                      (      romdefs.asm):00007         
     0021             (      romdefs.asm):00008         DSkip1                          EQU     $0021           Skip 1 byte (BRN)
     008C             (      romdefs.asm):00009         DSkip2                          EQU     $008C           Skip 2 bytes (CMPX)
     0086             (      romdefs.asm):00010         DSkip1LD                        EQU     $0086           Skip 1 byte (LDA)
     007D             (      romdefs.asm):00011         DSkip2TST                       EQU     $007D           Skip 2 bytes (TST)
                      (      romdefs.asm):00012         
     0000             (      romdefs.asm):00013         DCoCoVec167                     EQU     $0000           Vector dest for 167 
     0000             (      romdefs.asm):00014         DCoCoVect16A                    EQU     $0000           Vector dest for 16A
     0000             (      romdefs.asm):00015         DCoCoVect176                    EQU     $0000           Vector dest for 176
     0000             (      romdefs.asm):00016         DCoCoVect179                    EQU     $0000           Vector dest for 179
     0000             (      romdefs.asm):00017         DCoCoVect18B                    EQU     $0000           Vector dest for 18B
     0000             (      romdefs.asm):00018         DCoCoVect191                    EQU     $0000           Vector dest for 191
     0000             (      romdefs.asm):00019         DCoCoVect194                    EQU     $0000           Vector Dest for 194
     0000             (      romdefs.asm):00020         DCoCoVect197                    EQU     $0000           Vector Dest for 197
     0000             (      romdefs.asm):00021         DCoCoVect19A                    EQU     $0000           Vector Dest for 19A
     0000             (      romdefs.asm):00022         DCoCoVect1A3                    EQU     $0000           Vector Dest for 1A3
     0027             (      romdefs.asm):00023         DAddrFWareRamTop                EQU     $0027           Top of firmware RAM CLEAR xxx,yyyy set this to yyyy
     0074             (      romdefs.asm):00024         DAddrRamTop                     EQU     $0074           Physical end of RAM (4K, 16K, 32K or 64K).
     0021             (      romdefs.asm):00025         DAddrStack                      EQU     $0021           Address of top of machine stack
     0123             (      romdefs.asm):00026         DBasAddrCmdDisp                 EQU     $0123           Address of basic command dispatch
     0121             (      romdefs.asm):00027         DBasAddrCmdList                 EQU     $0121           Address of basic command list
     012D             (      romdefs.asm):00028         DBasAddrDskCmdDisp              EQU     $012D           Address of disk basic command dispatch
     012B             (      romdefs.asm):00029         DBasAddrDskCmdList              EQU     $012B           Address of disk basic command list
     0132             (      romdefs.asm):00030         DBasAddrDskFuncDisp             EQU     $0132           Address of disk basic function dispatcher
     0130             (      romdefs.asm):00031         DBasAddrDskFuncList             EQU     $0130           Address of disk basic function list
     0128             (      romdefs.asm):00032         DBasAddrFuncDisp                EQU     $0128           Address of basic function dispatcher
     0126             (      romdefs.asm):00033         DBasAddrFuncList                EQU     $0126           Address of basic function list
     00A6             (      romdefs.asm):00034         DBasAddrSigByte                 EQU     $00A6           Address of current significant bit in command line
     B84E             (      romdefs.asm):00035         DBasAOError                     EQU     $B84E           Print ?AO Error and return to basic
     0005             (      romdefs.asm):00036         DBasArrayEval                   EQU     $0005           Array evaluation flag, 0=eval, 1=dimensioning
     B400             (      romdefs.asm):00037         DBasBootBasic                   EQU     $B400           Restart basic, as if power on, also deletes current program
     0017             (      romdefs.asm):00038         DBasBotStack                    EQU     $0017           Bottom of stack at last check
     84DA             (      romdefs.asm):00039         DBasBRARun                      EQU     $84DA           BRA to main loop, used by DOS
     0000             (      romdefs.asm):00040         DBasBreakFlag                   EQU     $0000           Break flag, +ve=stop,-ve=end
     03D7             (      romdefs.asm):00041         DBasBuffer                      EQU     $03D7           Basic buffer space
     831C             (      romdefs.asm):00042         DBasChkArrSpaceMv               EQU     $831C           Check memory space at top of arrays + move arrays
     8331             (      romdefs.asm):00043         DBasChkB2Free                   EQU     $8331           Check B*2 bytes free above Arrays, OM error if not
     9C76             (      romdefs.asm):00044         DBasChkDirect                   EQU     $9C76           Check for direct mode, ID Error if so
     009F             (      romdefs.asm):00045         DBasChrGet                      EQU     $009F           Get next basic character routine
     00A5             (      romdefs.asm):00046         DBasChrGetCurr                  EQU     $00A5           Get current basic ccharacter
     00D3             (      romdefs.asm):00047         DBasCloadMOffs                  EQU     $00D3           2s complement of CLOADM offset
     8371             (      romdefs.asm):00048         DBasCmdMode                     EQU     $8371           Return to command mode
     0029             (      romdefs.asm):00049         DBasContLine                    EQU     $0029           Line no used by CONT
     0068             (      romdefs.asm):00050         DBasCurrentLine                 EQU     $0068           Current line no $FFFF in direct mode
     0001             (      romdefs.asm):00051         DBasDelim1                      EQU     $0001           First string delimiter
     0002             (      romdefs.asm):00052         DBasDelim2                      EQU     $0002           Second string delimiter
     002F             (      romdefs.asm):00053         DBasDirectTextPtr               EQU     $002F           Direct mode text pointer
     0008             (      romdefs.asm):00054         DBasDisArraySearch              EQU     $0008           Disable array search flag, 0=allow 0<>disable
     B851             (      romdefs.asm):00055         DBasDNError                     EQU     $B851           Print ?DN Error and return to basic
     84ED             (      romdefs.asm):00056         DBasDoDispatch                  EQU     $84ED           Do command dispatech, X must point to dispatch table
     00D7             (      romdefs.asm):00057         DBasEditorLineLen               EQU     $00D7           Editor line length
     82A9             (      romdefs.asm):00058         DBasErrorCodeTable              EQU     $82A9           List of 2 byte error codes eg 'SN' 'OM' 'UL' etc
     009D             (      romdefs.asm):00059         DBasExecAddr                    EQU     $009D           Exec address, on D64, at startup points to routine to boot all ram mode
     8B8D             (      romdefs.asm):00060         DBasFCError                     EQU     $8B8D           Print ?FC Error and return to basic
     83FF             (      romdefs.asm):00061         DBasFindLineNo                  EQU     $83FF           Find a line number in basic program
     B848             (      romdefs.asm):00062         DBasFMError                     EQU     $B848           Print ?FM Error and return to basic
     0007             (      romdefs.asm):00063         DBasGarbageFlag                 EQU     $0007           Garbage collection flag
     0003             (      romdefs.asm):00064         DBasGenCount                    EQU     $0003           General count/scratch var
     B7D4             (      romdefs.asm):00065         DBasGetDevNo                    EQU     $B7D4           Get dev no from line & validate
     869A             (      romdefs.asm):00066         DBasGetLineNo                   EQU     $869A           Get line no and store in BasTempLine
     8DEA             (      romdefs.asm):00067         DBasGetStrFirst                 EQU     $8DEA           Get first character of string into B
     8D9A             (      romdefs.asm):00068         DBasGetStrLenAddr               EQU     $8D9A           Get string len in B and address in X of string desc in FPA2
     8027             (      romdefs.asm):00069         DBasicCassBitIn                 EQU     $8027           Cassette bit input
     8024             (      romdefs.asm):00070         DBasicCassByIn                  EQU     $8024           Cassette byte input
     801E             (      romdefs.asm):00071         DBasicCassByOut                 EQU     $801E           Cassette byte output
     8018             (      romdefs.asm):00072         DBasicCassOff                   EQU     $8018           Cassette player motor off
     8015             (      romdefs.asm):00073         DBasicCassOn                    EQU     $8015           Cassette player motor on
     8021             (      romdefs.asm):00074         DBasicCassOnRd                  EQU     $8021           Cassette on for reading
     8009             (      romdefs.asm):00075         DBasicCursorB                   EQU     $8009           Cursor blink
     8000             (      romdefs.asm):00076         DBasicHWInit                    EQU     $8000           Hardware initialisation
     8012             (      romdefs.asm):00077         DBasicJoyIn                     EQU     $8012           Joystick input
     8006             (      romdefs.asm):00078         DBasicKbdIn                     EQU     $8006           Keyboard input
     800F             (      romdefs.asm):00079         DBasicPrintOut                  EQU     $800F           Printer output
     800C             (      romdefs.asm):00080         DBasicScreenOut                 EQU     $800C           Screen output
     802A             (      romdefs.asm):00081         DBasicSerIn                     EQU     $802A           Read a byte from serial
     802D             (      romdefs.asm):00082         DBasicSerOut                    EQU     $802D           Write a byte to serial port
     8030             (      romdefs.asm):00083         DBasicSetBaud                   EQU     $8030           Set baud rate
     8003             (      romdefs.asm):00084         DBasicSWInit                    EQU     $8003           Software initialisation
     801B             (      romdefs.asm):00085         DBasicWriteLead                 EQU     $801B           Cassette write leader
     9C7C             (      romdefs.asm):00086         DBasIDError                     EQU     $9C7C           Print ?ID Error and return to basic
     0004             (      romdefs.asm):00087         DBasIfCount                     EQU     $0004           If count - how many in a line
     B5D3             (      romdefs.asm):00088         DBasInBuffFromX                 EQU     $B5D3           Read input buffer at X as basic input
     0009             (      romdefs.asm):00089         DBasInputFlag                   EQU     $0009           Iinput/read flag, 0=input 0<>read
     B84B             (      romdefs.asm):00090         DBasIOError                     EQU     $B84B           Print ?IO Error and return to basic
     9D3D             (      romdefs.asm):00091         DBasIRQVec                      EQU     $9D3D           Basic IRQ routine, increments timer
     015A             (      romdefs.asm):00092         DBasJoyVal0                     EQU     $015A           Joystick(0) value
     015B             (      romdefs.asm):00093         DBasJoyVal1                     EQU     $015B           Joystick(1) value
     015C             (      romdefs.asm):00094         DBasJoyVal2                     EQU     $015C           Joystick(2) value
     015D             (      romdefs.asm):00095         DBasJoyVal3                     EQU     $015D           Joystick(3) value
     9DD9             (      romdefs.asm):00096         DBasLineInputEntry              EQU     $9DD9           Entry into LINE INPUT routine, used by DOS
     02DC             (      romdefs.asm):00097         DBasLinInpBuff                  EQU     $02DC           Basic line input buffer
     02DA             (      romdefs.asm):00098         DBasLinInpHead                  EQU     $02DA           Basic line input buffer header
     8EAA             (      romdefs.asm):00099         DBasList                        EQU     $8EAA           List basic program to SysDevN A must be 0 on entry
     0066             (      romdefs.asm):00100         DBasListLine                    EQU     $0066           Current line during list
     AA87             (      romdefs.asm):00101         DBasLocateScreen                EQU     $AA87           Initialise beginning of basic after graphics screen, no of pages in A
     8D6B             (      romdefs.asm):00102         DBasLSError                     EQU     $8D6B           Print ?LS Error and return to basic
     A101             (      romdefs.asm):00103         DBasNEError                     EQU     $A101           Print ?NE Error and return to basic
     8417             (      romdefs.asm):00104         DBasNew                         EQU     $8417           Remove current basic program from meory, like NEW command
     B631             (      romdefs.asm):00105         DBasNOError                     EQU     $B631           Print ?NO Error and return to basic
     0120             (      romdefs.asm):00106         DBasNumCmds                     EQU     $0120           Number of basic commands
     012A             (      romdefs.asm):00107         DBasNumDskCmds                  EQU     $012A           Number of disk basic commands
     012F             (      romdefs.asm):00108         DBasNumDskFuncs                 EQU     $012F           Number of disk basic functions
     0125             (      romdefs.asm):00109         DBasNumFuncs                    EQU     $0125           Number of basic functions
     002D             (      romdefs.asm):00110         DBasOldInputPtr                 EQU     $002D           Pointer to saved input during a STOP
     8342             (      romdefs.asm):00111         DBasOMError                     EQU     $8342           Print ?OM Error and return to basic
     91DB             (      romdefs.asm):00112         DBasOVError                     EQU     $91DB           Print ?OV Error and return to basic
     851B             (      romdefs.asm):00113         DBasPollKeyboard                EQU     $851B           Basic, poll keyboard and check for break
     978E             (      romdefs.asm):00114         DBasRandom8                     EQU     $978E           Generate an 8 bit random number and place in BasRandomSeed+1
     0115             (      romdefs.asm):00115         DBasRandomSeed                  EQU     $0115           Random number seed for RND function
     000A             (      romdefs.asm):00116         DBasRelateFlag                  EQU     $000A           Relational operator flag
     00D1             (      romdefs.asm):00117         DBasRenumStart                  EQU     $00D1           Renum start line no
     00D5             (      romdefs.asm):00118         DBasRenumStartLine              EQU     $00D5           Renum start line number
     00CF             (      romdefs.asm):00119         DBasRenumVal                    EQU     $00CF           Renum increment value
     8434             (      romdefs.asm):00120         DBasResetStack                  EQU     $8434           Reset basic stack to initial position
     8C52             (      romdefs.asm):00121         DBasResStr                      EQU     $8C52           Reserve B bytes of string space return start in X, setup low mem vars
     8CB3             (      romdefs.asm):00122         DBasResStr2                     EQU     $8CB3           Reserve B bytes of string space return start in X
     00AB             (      romdefs.asm):00123         DBasRndData                     EQU     $00AB           Used by RND
     849F             (      romdefs.asm):00124         DBasRun                         EQU     $849F           Run basic program in memory, like RUN
     85EE             (      romdefs.asm):00125         DBasSetProgPtrX                 EQU     $85EE           Sets basic program pointer to X-1
     B4B2             (      romdefs.asm):00126         DBasSignonMess                  EQU     $B4B2           Signon message address, for CoCo this is for Extended basic.
     85E7             (      romdefs.asm):00127         DBasSkipLineNo                  EQU     $85E7           Skip past line no in basic line, UL error if no line no.
     89B4             (      romdefs.asm):00128         DBasSNError                     EQU     $89B4           Print ?SN Error and return to basic
     0019             (      romdefs.asm):00129         DBasStartProg                   EQU     $0019           Start addr of basic program
     8C99             (      romdefs.asm):00130         DBasSTError                     EQU     $8C99           Print ?OM Error and return to basic
     01A9             (      romdefs.asm):00131         DBasStrDescStack                EQU     $01A9           String descriptor stack
     000B             (      romdefs.asm):00132         DBasStrFirstFreeTemp            EQU     $000B           First free temory string space pointer
     000D             (      romdefs.asm):00133         DBasStrLastUsedTemp             EQU     $000D           Last used tempory string space pointer
     0025             (      romdefs.asm):00134         DBasStrUtil                     EQU     $0025           Utility string pointer
     0120             (      romdefs.asm):00135         DBasStub0                       EQU     $0120           Basic Stub 0 (All basic on Dragon, Colour basic on Tandy)
     012A             (      romdefs.asm):00136         DBasStub1                       EQU     $012A           Basic stub 1 (Disk basic on Dragon, Extended basic on Tandy)
     0134             (      romdefs.asm):00137         DBasStub2                       EQU     $0134           Basic Stub 2 (Null on dragon, Disk basic on Tandy)
     013E             (      romdefs.asm):00138         DBasStub3                       EQU     $013E           Basic Stub 3 (do not use on dragon, user stub on Tandy)
     0013             (      romdefs.asm):00139         DBasTempFPA2                    EQU     $0013           Tempory FPA Mantissa for FPA2
     002B             (      romdefs.asm):00140         DBasTempLine                    EQU     $002B           Tempory line no
     000F             (      romdefs.asm):00141         DBasTempPtr                     EQU     $000F           Tempory pointer
     0011             (      romdefs.asm):00142         DBasTempPtr1                    EQU     $0011           Tempory discriptor pointer (stack search)
     003F             (      romdefs.asm):00143         DBasTempRelateFlag              EQU     $003F           Tempory relational operator flag
     003B             (      romdefs.asm):00144         DBasTempVarDesc                 EQU     $003B           Pointer to a tempory var descriptor
     8882             (      romdefs.asm):00145         DBasTMError                     EQU     $8882           Print ?TM Error and return to basic
     00AF             (      romdefs.asm):00146         DBasTronFlag                    EQU     $00AF           Tron flag nonzero=trace on
     8605             (      romdefs.asm):00147         DBasULError                     EQU     $8605           Print ?UL Error and return to basic
     0076             (      romdefs.asm):00148         DBasUnused1                     EQU     $0076           2 unused bytes
     00B0             (      romdefs.asm):00149         DBasUSRTableAddr                EQU     $00B0           Address of USR address table
     0134             (      romdefs.asm):00150         DBasUsrVecNoDisk                EQU     $0134           USR vector tabl when basic not installed
     001D             (      romdefs.asm):00151         DBasVarArrayAddr                EQU     $001D           Start address of Array table
     0052             (      romdefs.asm):00152         DBasVarAssign16                 EQU     $0052           Part of FPA1, used for 16bit assigns
     0033             (      romdefs.asm):00153         DBasVarDataAddr                 EQU     $0033           Address of next item in data
     0031             (      romdefs.asm):00154         DBasVarDataLine                 EQU     $0031           Line number of current data statement
     001F             (      romdefs.asm):00155         DBasVarEnd                      EQU     $001F           End of storage in use by basic
     004F             (      romdefs.asm):00156         DBasVarFPAcc1                   EQU     $004F           Floating point acumulator 1
     005C             (      romdefs.asm):00157         DBasVarFPAcc2                   EQU     $005C           Floating point acumulator 2
     0040             (      romdefs.asm):00158         DBasVarFPAcc3                   EQU     $0040           Floating point accumulator 3 (packed)
     0045             (      romdefs.asm):00159         DBasVarFPAcc4                   EQU     $0045           Floating point accumulator 4 (packed)
     004A             (      romdefs.asm):00160         DBasVarFPAcc5                   EQU     $004A           Floating point accumulator 5 (packed)
     0037             (      romdefs.asm):00161         DBasVarLastInUse                EQU     $0037           Pointer to variable last in use
     0039             (      romdefs.asm):00162         DBasVarPtrLast                  EQU     $0039           Poiinter to VARPTR last in use
     001B             (      romdefs.asm):00163         DBasVarSimpleAddr               EQU     $001B           Start address of simple variables
     0021             (      romdefs.asm):00164         DBasVarStringBase               EQU     $0021           Base address of string space (and stack)
     0023             (      romdefs.asm):00165         DBasVarStrTop                   EQU     $0023           Top of string space in use
     0006             (      romdefs.asm):00166         DBasVarType                     EQU     $0006           Variable type flag 0=numeric, $ff=string
     841F             (      romdefs.asm):00167         DBasVect1                       EQU     $841F           Sets up various basic vectors (after load), should be followed by call to BasVect2
     8424             (      romdefs.asm):00168         DBasVect1a                      EQU     $8424           Same as Vect1, but doesn't reset input pointer
     83ED             (      romdefs.asm):00169         DBasVect2                       EQU     $83ED           Finalises setup of basic vectors (after load), should be preceeded by call to BasVect1
     93B1             (      romdefs.asm):00170         DBasZDError                     EQU     $93B1           Print ?ZD Error and return to basic
     01E3             (      romdefs.asm):00171         DCasASCIIFlag                   EQU     $01E3           ASCII flag byte
     BAC3             (      romdefs.asm):00172         DCasAudioOff                    EQU     $BAC3           Turn off audio from cassette
     BAEC             (      romdefs.asm):00173         DCasAudioOn                     EQU     $BAEC           Turn on Audio from cassete to speaker
     0083             (      romdefs.asm):00174         DCasBitCount                    EQU     $0083           Cassette bit counter
     BDA5             (      romdefs.asm):00175         DCasBitIn                       EQU     $BDA5           Reads a bity into the 'Z' flag
     B93E             (      romdefs.asm):00176         DCasBlockIn                     EQU     $B93E           Reads a block into the cassete buffer pointed to by CasIOBuffAddr
     007D             (      romdefs.asm):00177         DCasBlockLen                    EQU     $007D           Cassete block length, number of bytes read, or to be written
     B999             (      romdefs.asm):00178         DCasBlockOut                    EQU     $B999           Write a block to cassete pointed to by CasIOBuffAddr
     007C             (      romdefs.asm):00179         DCasBlockType                   EQU     $007C           Cassete block type, 0=filename, 1=data, 255=EOF
     BDAD             (      romdefs.asm):00180         DCasByteIn                      EQU     $BDAD           Reads a single byte into the A register
     BE12             (      romdefs.asm):00181         DCasByteOut                     EQU     $BE12           Write byte in A register to cassete
     0080             (      romdefs.asm):00182         DCasCkSum                       EQU     $0080           Used by cassette routines for calculating checksum
     B65F             (      romdefs.asm):00183         DCasClosFiles                   EQU     $B65F           Close any open cassete file
     01E5             (      romdefs.asm):00184         DCasEntryAddr                   EQU     $01E5           Entry address for MC programs
     0070             (      romdefs.asm):00185         DCasEOFFlag                     EQU     $0070           Cassette IO Flag, nonzero if EOF reached
     B8B3             (      romdefs.asm):00186         DCasFindFile                    EQU     $B8B3           Searches a tape for specified filename
     01D2             (      romdefs.asm):00187         DCasFName                       EQU     $01D2           Cassete filename to search for or write out
     01DA             (      romdefs.asm):00188         DCasFNameFound                  EQU     $01DA           Filename found, when reading
     01D1             (      romdefs.asm):00189         DCasFNameLen                    EQU     $01D1           Length of cassette filename can be 0 to 8
     01E2             (      romdefs.asm):00190         DCasFType                       EQU     $01E2           File type 0=tokenized basic, 1=ASCII data, 2=Binary
     01E4             (      romdefs.asm):00191         DCasGapFlag                     EQU     $01E4           Gap flag byte
     007A             (      romdefs.asm):00192         DCasHeadBuffAddr                EQU     $007A           Address of cassette file header
     01DA             (      romdefs.asm):00193         DCasIOBuff                      EQU     $01DA           COS default IO buffer, if this contains filename block then folloing are valid
     007E             (      romdefs.asm):00194         DCasIOBuffAddr                  EQU     $007E           Cassette IO buffer address, where data will be read/written
     0079             (      romdefs.asm):00195         DCasIOBuffSize                  EQU     $0079           Size of cassette IO buffer
     0081             (      romdefs.asm):00196         DCasIOErrorCode                 EQU     $0081           Cassette IO error code 0=no error, 1=CRC, 2=attempt to load in non-ram area
     006E             (      romdefs.asm):00197         DCasIOFlag                      EQU     $006E           Cassette IO Flag, set to $FF when IO in progress
     0085             (      romdefs.asm):00198         DCasLastSine                    EQU     $0085           Casette last sine tabe entry
     0090             (      romdefs.asm):00199         DCasLeadCount                   EQU     $0090           Cassete leader count, number of $55 bytes in the leader
     01E7             (      romdefs.asm):00200         DCasLoadAddr                    EQU     $01E7           Load address
     0093             (      romdefs.asm):00201         DCasMax12                       EQU     $0093           Cassette Upper limit of 1200Hz
     0094             (      romdefs.asm):00202         DCasMax24                       EQU     $0094           Cassette Upper limit of 2400Hz
     0095             (      romdefs.asm):00203         DCasMotorDelay                  EQU     $0095           Cassette motor on delay (also inter-block gap)
     BDDC             (      romdefs.asm):00204         DCasMotorOff                    EQU     $BDDC           Turn off cassette motor
     BDCF             (      romdefs.asm):00205         DCasMotorOn                     EQU     $BDCF           Turn on motor, and wait for delay in CasMotorDelay
     0092             (      romdefs.asm):00206         DCasPartrt                      EQU     $0092           Cassette 1200/2400 partition
     0084             (      romdefs.asm):00207         DCasPhaseFlag                   EQU     $0084           Cassette Phase flag
     B748             (      romdefs.asm):00208         DCasReadBin                     EQU     $B748           Read in a binary file, similar to CLOADM
     B933             (      romdefs.asm):00209         DCasReadBlock1                  EQU     $B933           Turns on motor, reads header and then first block into CasIOBufAddr
     BDE7             (      romdefs.asm):00210         DCasReadLeader                  EQU     $BDE7           Turn on motor and read past leader
     0078             (      romdefs.asm):00211         DCasStatus                      EQU     $0078           Cassette status byte, 0=cassette closed, 1=open for input, 2=open for output
     0082             (      romdefs.asm):00212         DCasTemp                        EQU     $0082           Cassette tempory storage
     B6A5             (      romdefs.asm):00213         DCasWriteBasic                  EQU     $B6A5           Write tokenized basic program out, similar to CSAVE
     991B             (      romdefs.asm):00214         DCasWriteBin                    EQU     $991B           Write a binary file out push return address, then start,end and entry addresses and then JMP to this
     B991             (      romdefs.asm):00215         DCasWriteBlock1                 EQU     $B991           Turn on motor, write leader and then first block
     801B             (      romdefs.asm):00216         DCasWriteLeader                 EQU     $801B           Turn on motor and write out leader
     943E             (      romdefs.asm):00217         DCmdABS                         EQU     $943E           Basic Command
     8A12             (      romdefs.asm):00218         DCmdAND                         EQU     $8A12           Basic Command
     8DE6             (      romdefs.asm):00219         DCmdASC                         EQU     $8DE6           Basic Command
     9877             (      romdefs.asm):00220         DCmdATN                         EQU     $9877           Basic Command
     BADF             (      romdefs.asm):00221         DCmdAudio                       EQU     $BADF           Basic Command
     8DD2             (      romdefs.asm):00222         DCmdCHRS                        EQU     $8DD2           Basic Command
     B238             (      romdefs.asm):00223         DCmdCircle                      EQU     $B238           Basic Command
     8571             (      romdefs.asm):00224         DCmdClear                       EQU     $8571           Basic Command
     B6D5             (      romdefs.asm):00225         DCmdCload                       EQU     $B6D5           Basic Command
     B64D             (      romdefs.asm):00226         DCmdClose                       EQU     $B64D           Basic Command
     BA60             (      romdefs.asm):00227         DCmdCLS                         EQU     $BA60           Basic Command
     A8D4             (      romdefs.asm):00228         DCmdColor                       EQU     $A8D4           Basic Command
     8560             (      romdefs.asm):00229         DCmdCont                        EQU     $8560           Basic Command
     97CB             (      romdefs.asm):00230         DCmdCOS                         EQU     $97CB           Basic Command
     B683             (      romdefs.asm):00231         DCmdCsave                       EQU     $B683           Basic Command
     8613             (      romdefs.asm):00232         DCmdData                        EQU     $8613           Basic Command
     9C81             (      romdefs.asm):00233         DCmdDef                         EQU     $9C81           Basic Command
     9D61             (      romdefs.asm):00234         DCmdDelete                      EQU     $9D61           Basic Command
     8A8B             (      romdefs.asm):00235         DCmdDim                         EQU     $8A8B           Basic Command
     933C             (      romdefs.asm):00236         DCmdDivide                      EQU     $933C           Basic Command
     A049             (      romdefs.asm):00237         DCmdDload                       EQU     $A049           Basic Command
     B051             (      romdefs.asm):00238         DCmdDraw                        EQU     $B051           Basic Command
     9965             (      romdefs.asm):00239         DCmdEdit                        EQU     $9965           Basic Command
     8532             (      romdefs.asm):00240         DCmdEnd                         EQU     $8532           Basic Command
     B801             (      romdefs.asm):00241         DCmdEOF                         EQU     $B801           Basic Command
     B771             (      romdefs.asm):00242         DCmdExec                        EQU     $B771           Basic Command
     9713             (      romdefs.asm):00243         DCmdEXP                         EQU     $9713           Basic Command
     96A0             (      romdefs.asm):00244         DCmdExponet                     EQU     $96A0           Basic Command
     9956             (      romdefs.asm):00245         DCmdFIX                         EQU     $9956           Basic Command
     8448             (      romdefs.asm):00246         DCmdFor                         EQU     $8448           Basic Command
     AAF0             (      romdefs.asm):00247         DCmdGet                         EQU     $AAF0           Basic Command
     85B9             (      romdefs.asm):00248         DCmdGo                          EQU     $85B9           Basic Command
     A00E             (      romdefs.asm):00249         DCmdHexS                        EQU     $A00E           Basic Command
     8647             (      romdefs.asm):00250         DCmdIF                          EQU     $8647           Basic Command
     B797             (      romdefs.asm):00251         DCmdInkeyS                      EQU     $B797           Basic Command
     872B             (      romdefs.asm):00252         DCmdInput                       EQU     $872B           Basic Command
     9BB4             (      romdefs.asm):00253         DCmdInstr                       EQU     $9BB4           Basic Command
     9499             (      romdefs.asm):00254         DCmdINT                         EQU     $9499           Basic Command
     BB0D             (      romdefs.asm):00255         DCmdJoystk                      EQU     $BB0D           Basic Command
     8DF1             (      romdefs.asm):00256         DCmdLeftS                       EQU     $8DF1           Basic Command
     8DC7             (      romdefs.asm):00257         DCmdLEN                         EQU     $8DC7           Basic Command
     86BC             (      romdefs.asm):00258         DCmdLet                         EQU     $86BC           Basic Command
     A749             (      romdefs.asm):00259         DCmdLine                        EQU     $A749           Basic Command
     9DB1             (      romdefs.asm):00260         DCmdLineInput                   EQU     $9DB1           Line input command
     8EAA             (      romdefs.asm):00261         DCmdList                        EQU     $8EAA           Basic Command
     8EA4             (      romdefs.asm):00262         DCmdLList                       EQU     $8EA4           Basic Command
     923C             (      romdefs.asm):00263         DCmdLOG                         EQU     $923C           Basic Command
     8C31             (      romdefs.asm):00264         DCmdMEM                         EQU     $8C31           Basic Command
     8E15             (      romdefs.asm):00265         DCmdMidS                        EQU     $8E15           Basic Command
     9105             (      romdefs.asm):00266         DCmdMinus                       EQU     $9105           Basic Command
     B982             (      romdefs.asm):00267         DCmdMotor                       EQU     $B982           Basic Command
     9275             (      romdefs.asm):00268         DCmdMultiply                    EQU     $9275           Basic Command
     8415             (      romdefs.asm):00269         DCmdNew                         EQU     $8415           Basic Command
     8829             (      romdefs.asm):00270         DCmdNext                        EQU     $8829           Basic Command
     8675             (      romdefs.asm):00271         DCmdON                          EQU     $8675           Basic Command
     B829             (      romdefs.asm):00272         DCmdOpen                        EQU     $B829           Basic Command
     B835             (      romdefs.asm):00273         DCmdOpenEntry                   EQU     $B835           Entry into Basic open command used by Dragon/SuperDos
     8A11             (      romdefs.asm):00274         DCmdOR                          EQU     $8A11           Basic Command
     AC87             (      romdefs.asm):00275         DCmdPaint                       EQU     $AC87           Basic Command
     AA19             (      romdefs.asm):00276         DCmdPClear                      EQU     $AA19           Basic Command
     A8C0             (      romdefs.asm):00277         DCmdPCls                        EQU     $A8C0           Basic Command
     AABE             (      romdefs.asm):00278         DCmdPcopy                       EQU     $AABE           Basic Command
     8E96             (      romdefs.asm):00279         DCmdPeek                        EQU     $8E96           Basic Command
     ADBD             (      romdefs.asm):00280         DCmdPlay                        EQU     $ADBD           Basic Command
     910E             (      romdefs.asm):00281         DCmdPlus                        EQU     $910E           Basic Command
     A9AF             (      romdefs.asm):00282         DCmdPmode                       EQU     $A9AF           Basic Command
     BA45             (      romdefs.asm):00283         DCmdPoint                       EQU     $BA45           Basic Command
     8E9D             (      romdefs.asm):00284         DCmdPoke                        EQU     $8E9D           Basic Command
     9ADE             (      romdefs.asm):00285         DCmdPOS                         EQU     $9ADE           Basic Command
     A6C7             (      romdefs.asm):00286         DCmdPPoint                      EQU     $A6C7           Basic Command
     A6F3             (      romdefs.asm):00287         DCmdPReset                      EQU     $A6F3           Basic Command
     903D             (      romdefs.asm):00288         DCmdPrint                       EQU     $903D           Basic Command
     A6EF             (      romdefs.asm):00289         DCmdPset                        EQU     $A6EF           Basic Command
     AAF3             (      romdefs.asm):00290         DCmdPut                         EQU     $AAF3           Basic Command
     8777             (      romdefs.asm):00291         DCmdRead                        EQU     $8777           Basic Command
     877A             (      romdefs.asm):00292         DCmdReadFromX                   EQU     $877A           As basic READ command but ptr in X supplied by caller
     8616             (      romdefs.asm):00293         DCmdREM                         EQU     $8616           Basic Command
     9DFA             (      romdefs.asm):00294         DCmdRenum                       EQU     $9DFA           Basic Command
     BA04             (      romdefs.asm):00295         DCmdReset                       EQU     $BA04           Basic Command
     8514             (      romdefs.asm):00296         DCmdRestore                     EQU     $8514           Basic Command
     85F3             (      romdefs.asm):00297         DCmdReturn                      EQU     $85F3           Basic Command
     8E0E             (      romdefs.asm):00298         DCmdRightS                      EQU     $8E0E           Basic Command
     9772             (      romdefs.asm):00299         DCmdRND                         EQU     $9772           Basic Command
     85A5             (      romdefs.asm):00300         DCmdRun                         EQU     $85A5           Basic Command
     A9FE             (      romdefs.asm):00301         DCmdScreen                      EQU     $A9FE           Basic Command
     B9D3             (      romdefs.asm):00302         DCmdSet                         EQU     $B9D3           Basic Command
     9425             (      romdefs.asm):00303         DCmdSGN                         EQU     $9425           Basic Command
     97D1             (      romdefs.asm):00304         DCmdSIN                         EQU     $97D1           Basic Command
     B81F             (      romdefs.asm):00305         DCmdSkipf                       EQU     $B81F           Basic Command
     BA9B             (      romdefs.asm):00306         DCmdSound                       EQU     $BA9B           Basic Command
     9697             (      romdefs.asm):00307         DCmdSQR                         EQU     $9697           Basic Command
     8539             (      romdefs.asm):00308         DCmdStop                        EQU     $8539           Basic Command
     9B84             (      romdefs.asm):00309         DCmdStringS                     EQU     $9B84           Basic Command
     8C40             (      romdefs.asm):00310         DCmdSTRS                        EQU     $8C40           Basic Command
     9816             (      romdefs.asm):00311         DCmdTAN                         EQU     $9816           Basic Command
     9D59             (      romdefs.asm):00312         DCmdTimer                       EQU     $9D59           Basic Command
     9ADA             (      romdefs.asm):00313         DCmdTroff                       EQU     $9ADA           Basic Command
     9AD9             (      romdefs.asm):00314         DCmdTron                        EQU     $9AD9           Basic Command
     9D1D             (      romdefs.asm):00315         DCmdUSR                         EQU     $9D1D           Basic Command
     8E5C             (      romdefs.asm):00316         DCmdVAL                         EQU     $8E5C           Basic Command
     9AF4             (      romdefs.asm):00317         DCmdVarptr                      EQU     $9AF4           Basic Command
     00B3             (      romdefs.asm):00318         DGrBackground                   EQU     $00B3           Current background colour
     00B9             (      romdefs.asm):00319         DGrBytesPerLine                 EQU     $00B9           Number of byts/lin in current mode
     BA28             (      romdefs.asm):00320         DGrCalcPixelPos                 EQU     $BA28           Calculates Lo-res pixel pos from data on stack
     00D0             (      romdefs.asm):00321         DGrCircleRadius                 EQU     $00D0           Circle radius
     00CB             (      romdefs.asm):00322         DGrCircleXCo                    EQU     $00CB           Circle command X
     00CD             (      romdefs.asm):00323         DGrCircleYCo                    EQU     $00CD           Circle command Y
     A8C7             (      romdefs.asm):00324         DGrClearGrScreen                EQU     $A8C7           Clears grapics screen to value in B
     00C1             (      romdefs.asm):00325         DGrColourSet                    EQU     $00C1           Colour set currently in use
     00B4             (      romdefs.asm):00326         DGrColourTemp                   EQU     $00B4           Tempory colour in use
     00B5             (      romdefs.asm):00327         DGrCurrColour                   EQU     $00B5           Byte value for current colour, to set all pixels in byte to that colour
     00B6             (      romdefs.asm):00328         DGrCurrPmode                    EQU     $00B6           Current PMODE number
     00BD             (      romdefs.asm):00329         DGrCurrX                        EQU     $00BD           Current X cursor pos
     00C7             (      romdefs.asm):00330         DGrCurrXCo                      EQU     $00C7           Current Cursor X
     00BF             (      romdefs.asm):00331         DGrCurrY                        EQU     $00BF           Current Y cursor pos
     00C9             (      romdefs.asm):00332         DGrCurrYCo                      EQU     $00C9           Current Cursor Y
     00DB             (      romdefs.asm):00333         DGrDirtyFlag                    EQU     $00DB           Flag to tell if graphics screen has changed
     00BA             (      romdefs.asm):00334         DGrDisplayStartAddr             EQU     $00BA           Address of first byte in current display
     B051             (      romdefs.asm):00335         DGrDraw                         EQU     $B051           Draw on pmode screen as in DRAW command
     00E8             (      romdefs.asm):00336         DGrDrawAngle                    EQU     $00E8           Current angle for DRAW command
     00E9             (      romdefs.asm):00337         DGrDrawScale                    EQU     $00E9           Current scale for DRAW command
     00B2             (      romdefs.asm):00338         DGrForeground                   EQU     $00B2           Current foreground colour
     00B7             (      romdefs.asm):00339         DGrLastDisplayAddr              EQU     $00B7           Address of last byte in current display
     00C3             (      romdefs.asm):00340         DGrPixelNoX                     EQU     $00C3           Current horizontal pixel no
     00C5             (      romdefs.asm):00341         DGrPixelNoY                     EQU     $00C5           Current vertical pixel number
     00C2             (      romdefs.asm):00342         DGrPlotFlag                     EQU     $00C2           Plot/Unplot flag, 0=reset, nonzero=set
     AA23             (      romdefs.asm):00343         DGrReserveGrRam                 EQU     $AA23           Reserves memory for graphics, no graphics pages in B
     BA07             (      romdefs.asm):00344         DGrResetLRGPixel                EQU     $BA07           ReSets lo res pixel
     AA10             (      romdefs.asm):00345         DGrSelectColourSet              EQU     $AA10           Selects colour set dependent on B
     A938             (      romdefs.asm):00346         DGrSelectDisplay                EQU     $A938           Sets Text or Graphics screen, if Z=1 then text
     A9E1             (      romdefs.asm):00347         DGrSelectPage                   EQU     $A9E1           On entry B contains Pmode page to be used
     A9A4             (      romdefs.asm):00348         DGrSelectVDGColSet              EQU     $A9A4           Select colour set from data in GrColourSet
     A928             (      romdefs.asm):00349         DGrSetColours                   EQU     $A928           Sets up colours in low memory
     B9DF             (      romdefs.asm):00350         DGrSetLRGPixel                  EQU     $B9DF           Sets lo res pixel
     0086             (      romdefs.asm):00351         DGrSetResetData                 EQU     $0086           Data for Lo-res set/reset
     A989             (      romdefs.asm):00352         DGrSetVDGMode                   EQU     $A989           Set VDG to mode in A register
     A99D             (      romdefs.asm):00353         DGrSetVDGOffset                 EQU     $A99D           Set VDG offset to page in A
     00BC             (      romdefs.asm):00354         DGrStartPages                   EQU     $00BC           Page number of Start of graphics pages
     A006             (      romdefs.asm):00355         DIndCasBlockIn                  EQU     $A006           Indirect Read cassette block
     A008             (      romdefs.asm):00356         DIndCasBlockOut                 EQU     $A008           Indirect Write cassete block
     A004             (      romdefs.asm):00357         DIndCasOnRead                   EQU     $A004           Indirect prepare cassette for read
     A00C             (      romdefs.asm):00358         DIndCasWriteLead                EQU     $A00C           Indirect Write cassette leader
     A002             (      romdefs.asm):00359         DIndCharOutput                  EQU     $A002           Indirect Character output
     A00A             (      romdefs.asm):00360         DIndJoystickIn                  EQU     $A00A           Indirect joystick in
     A000             (      romdefs.asm):00361         DIndKeyInput                    EQU     $A000           Indirect keyboard input jsr()
     0072             (      romdefs.asm):00362         DIndVecReset                    EQU     $0072           Secondary Reset vector address, must point to NOP
     008A             (      romdefs.asm):00363         DMisc16BitScratch               EQU     $008A           Misc 16 bit scratch register (always zero ??)
     A66B             (      romdefs.asm):00364         DPixMaskTable2Col               EQU     $A66B           Pixel mask table 2 colour mode
     A673             (      romdefs.asm):00365         DPixMaskTable4Col               EQU     $A673           Pixel mask table 4 colour mode
     BD0A             (      romdefs.asm):00366         DPrinterCRLF                    EQU     $BD0A           Moves printer head to next line.
     BCF5             (      romdefs.asm):00367         DPrinterDirOut                  EQU     $BCF5           Sends character in A register to printer (uncooked)
     BD1A             (      romdefs.asm):00368         DPrinterOut                     EQU     $BD1A           Sends character in A register to printer
     010F             (      romdefs.asm):00369         DSecVecFIRQ                     EQU     $010F           Secondary FIRQ vector JMP+ address
     010C             (      romdefs.asm):00370         DSecVecIRQ                      EQU     $010C           Secondary IRQ vector JMP+ address
     0109             (      romdefs.asm):00371         DSecVecNMI                      EQU     $0109           Secondary NMI vector JMP+ address
     0106             (      romdefs.asm):00372         DSecVecSWI                      EQU     $0106           Secondary NMI vector JMP+ address
     0103             (      romdefs.asm):00373         DSecVecSWI2                     EQU     $0103           Secondary SWI2 vector JMP+ address
     0100             (      romdefs.asm):00374         DSecVecSWI3                     EQU     $0100           Secondary SWI3 vector JMP+ address
     0000             (      romdefs.asm):00375         DSerDLBaud                      EQU     $0000           Baud rate for DLOAD, unknown for Dragon
     0000             (      romdefs.asm):00376         DSerDLTimeout                   EQU     $0000           Timeourt for DLOAD, unknown for Dragon
     BAA0             (      romdefs.asm):00377         DSndBeep                        EQU     $BAA0           Play a beep duration in B, frequency in SndPitch
     BAC3             (      romdefs.asm):00378         DSndDisable                     EQU     $BAC3           Disables D/A sound output
     00E5             (      romdefs.asm):00379         DSndDotNoteScale                EQU     $00E5           Dotted note scale factor for Play
     BAED             (      romdefs.asm):00380         DSndDTOAOn                      EQU     $BAED           Turn on audio to D/A converter
     BAC5             (      romdefs.asm):00381         DSndEnable                      EQU     $BAC5           Enables D/A sound output
     008D             (      romdefs.asm):00382         DSndLength                      EQU     $008D           Sound duration
     00E1             (      romdefs.asm):00383         DSndNoteLen                     EQU     $00E1           Note length for PLAY
     00DE             (      romdefs.asm):00384         DSndOctave                      EQU     $00DE           Sound octave value for PLAY
     008C             (      romdefs.asm):00385         DSndPitch                       EQU     $008C           Sound pitch value
     AE9A             (      romdefs.asm):00386         DSndPlayNote                    EQU     $AE9A           Plays a note from the A register (ASCII)
     00E2             (      romdefs.asm):00387         DSndTempo                       EQU     $00E2           Tempo for PLAY
     00E3             (      romdefs.asm):00388         DSndTimerPlay                   EQU     $00E3           Timer for the Play command
     00DF             (      romdefs.asm):00389         DSndVolume                      EQU     $00DF           Sound volume for PLAY
     BB80             (      romdefs.asm):00390         DSysBoot64                      EQU     $BB80           Dragon 64 only, boots basic into all ram mode, with 48K available to basic.
     8344             (      romdefs.asm):00391         DSysErr                         EQU     $8344           Report error code in B register, cleanup and return to basic
     835E             (      romdefs.asm):00392         DSysErr2                        EQU     $835E           Report error in B, do NOT hook to RAM, or turn of cas etc
     BD52             (      romdefs.asm):00393         DSysReadJoystick                EQU     $BD52           Read hardware joystick values & update BasJoyVal0..3
     B3B4             (      romdefs.asm):00394         DSysReset                       EQU     $B3B4           Perform soft reset, as if reset button pressed
     BAD4             (      romdefs.asm):00395         DSysResetDA                     EQU     $BAD4           Reset D/A converter to $7E
     BD41             (      romdefs.asm):00396         DSysSelJoystick                 EQU     $BD41           Select joystick alue to read from A
     0112             (      romdefs.asm):00397         DSysTimeVal                     EQU     $0112           Current value of system timer
     BAD6             (      romdefs.asm):00398         DSysWriteDA                     EQU     $BAD6           Write value in A to D/A, bits 0 &1 should be 0
     0149             (      romdefs.asm):00399         DTextCapsLock                   EQU     $0149           Capslock flag, nonzero=uppercase
     BCA0             (      romdefs.asm):00400         DTextClearLine                  EQU     $BCA0           Clears a VDU line from current cursor pos to EOL
     BA77             (      romdefs.asm):00401         DTextCls                        EQU     $BA77           Clear text mode screen, resets cursor to top left
     BA79             (      romdefs.asm):00402         DTextClsChar                    EQU     $BA79           Clears srcrren to character in B register & resets cursor
     008F             (      romdefs.asm):00403         DTextCursFalshCnt               EQU     $008F           Cusrsor flash counter
     006F             (      romdefs.asm):00404         DTextDevN                       EQU     $006F           Current device number
     0035             (      romdefs.asm):00405         DTextKbdBuffAddr                EQU     $0035           Address of keyboard input buffer
     0097             (      romdefs.asm):00406         DTextKbdDelay                   EQU     $0097           Keyboard scan delay constant, used to debounce
     0150             (      romdefs.asm):00407         DTextKbdRollover                EQU     $0150           Rollover table, to check for key releases
     0087             (      romdefs.asm):00408         DTextLastKey                    EQU     $0087           ASCII code of last keypress, not cleard by key release
     B54A             (      romdefs.asm):00409         DTextOutChar                    EQU     $B54A           Outputs character in A to screen
     90A1             (      romdefs.asm):00410         DTextOutCRLF                    EQU     $90A1           Outputs an EOL sequence to the screen
     957A             (      romdefs.asm):00411         DTextOutNum16                   EQU     $957A           Outputs unsigned integer in D to the TextDevN device
     9582             (      romdefs.asm):00412         DTextOutNumFPA0                 EQU     $9582           Outputs number in FPA0 to screen
     90F8             (      romdefs.asm):00413         DTextOutQuestion                EQU     $90F8           Outputs a question mark to screen
     90F5             (      romdefs.asm):00414         DTextOutSpace                   EQU     $90F5           Outputs a space to screen
     90E5             (      romdefs.asm):00415         DTextOutString                  EQU     $90E5           Outputs string pointed to by X to screen, X should point to byte before first byte of string
     0148             (      romdefs.asm):00416         DTextPrnAutoCRLF                EQU     $0148           Printer auto EOL flag, nonzero will send EOL sequence at end of line
     0099             (      romdefs.asm):00417         DTextPrnCommaW                  EQU     $0099           Printer comma width
     009C             (      romdefs.asm):00418         DTextPrnCurrCol                 EQU     $009C           Printer current column
     014A             (      romdefs.asm):00419         DTextPrnEOLCnt                  EQU     $014A           Number of characters in EOL sequence 1..4
     014B             (      romdefs.asm):00420         DTextPrnEOLSeq                  EQU     $014B           End of line characters
     009A             (      romdefs.asm):00421         DTextPrnLastComma               EQU     $009A           Printer last comma width, should be printer line width - prinnter comma width
     009B             (      romdefs.asm):00422         DTextPrnLineW                   EQU     $009B           Printer line width
     03FF             (      romdefs.asm):00423         DTextPrnSelFlag                 EQU     $03FF           Dragon 64 printer selection flag, 0=paralell port, nonzero=RS232
     A93A             (      romdefs.asm):00424         DTextResetVDU                   EQU     $A93A           Resets to text mode and screen base address of $400
     BBE5             (      romdefs.asm):00425         DTextScanKbd                    EQU     $BBE5           Scan keyboard, return Char in A, Zero flag set if no key
     FF07             (      romdefs.asm):00426         DTextSerBaudRate                EQU     $FF07           Serial baud rate, note on Dragon 64, this is the actual hardware baud rate reg.
     03FD             (      romdefs.asm):00427         DTextSerEOLDelay                EQU     $03FD           End of line delay for serial port on Dragon 64 & CoCo
     BBB5             (      romdefs.asm):00428         DTextUpdateCurs                 EQU     $BBB5           Decrements TextCursFlashCnt, if zero resets and flashes cursor
     006A             (      romdefs.asm):00429         DTextVDUCommaW                  EQU     $006A           VDU comma width field
     006C             (      romdefs.asm):00430         DTextVDUCurrCol                 EQU     $006C           Current column for VDU output
     0088             (      romdefs.asm):00431         DTextVDUCursAddr                EQU     $0088           Current VDU cursor address
     006B             (      romdefs.asm):00432         DTextVDULastComma               EQU     $006B           VDU last comma field, should be VDU line width - VDU comma width
     006D             (      romdefs.asm):00433         DTextVDULineW                   EQU     $006D           VDU line width, normally 32
     BCAB             (      romdefs.asm):00434         DTextVDUOut                     EQU     $BCAB           Outputs Char in A to VDU, does not reset screen.
     852B             (      romdefs.asm):00435         DTextWaitKey                    EQU     $852B           Wait for a keypress, calls TextScanKbd, also handles break
     A0EA             (      romdefs.asm):00436         DTextWaitKeyCurs                EQU     $A0EA           Same as TextWaitKey, but with cursor
     B505             (      romdefs.asm):00437         DTextWaitKeyCurs2               EQU     $B505           Same as TextWaitKey, but with cursor
     B7CC             (      romdefs.asm):00438         DUtilCopyBXtoU                  EQU     $B7CC           Copy B bytes from X to U
     8C35             (      romdefs.asm):00439         DVarAssign16Bit                 EQU     $8C35           Assigns value in D register to a variable, and returns to basic
     8C37             (      romdefs.asm):00440         DVarAssign16Bit2                EQU     $8C37           Assigns value in D register to a variable, and returns to basic (1 less instruction!).
     9C3E             (      romdefs.asm):00441         DVarAssign16BitB                EQU     $9C3E           Assigns value in BasVarAssign16 to a variable, and returns to basic
     8C36             (      romdefs.asm):00442         DVarAssign8Bit                  EQU     $8C36           Assigns value in B register to a variable, and returns to basic
     89AC             (      romdefs.asm):00443         DVarCKChar                      EQU     $89AC           Check for char in B register in command line, SNError if not
     89A4             (      romdefs.asm):00444         DVarCKClBrac                    EQU     $89A4           Check for Close bracket ')' in command line, SNError if not
     89AA             (      romdefs.asm):00445         DVarCKComma                     EQU     $89AA           Check for Comma in command line, SNError if not
     89A7             (      romdefs.asm):00446         DVarCKOpBrac                    EQU     $89A7           Check for Open bracket '(' in command line, SNError if not
     8D9F             (      romdefs.asm):00447         DVarDelVar                      EQU     $8D9F           Frees up storage used by a variable
     8CD7             (      romdefs.asm):00448         DVarGarbageCollect              EQU     $8CD7           Forces garbage collection in string space
     8E83             (      romdefs.asm):00449         DVarGet16Bit                    EQU     $8E83           Returns value of variable in D,FCError if more than 16 bits
     8E51             (      romdefs.asm):00450         DVarGet8Bit                     EQU     $8E51           Returns value of variable in B,FCError if more than 8 bits
     8E7E             (      romdefs.asm):00451         DVarGetComma8                   EQU     $8E7E           Checks for comman then gets 8 bit.
     8877             (      romdefs.asm):00452         DVarGetExpr                     EQU     $8877           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry set)
     8874             (      romdefs.asm):00453         DVarGetExprCC                   EQU     $8874           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry clear)
     8887             (      romdefs.asm):00454         DVarGetStr                      EQU     $8887           Compiles string and moves to free string space, should be followed by VarGetExpr
     8B29             (      romdefs.asm):00455         DVarGetUsr                      EQU     $8B29           Returns argument to USRnn as a 16bit no in D
     8A94             (      romdefs.asm):00456         DVarGetVar                      EQU     $8A94           Gets VARPTR address of following name and places in BasVarPtrLast
     9165             (      romdefs.asm):00457         DVarNormFPA0                    EQU     $9165           Normalize FPA0
     01A0             (      romdefs.asm):00458         DVectAccessScreen               EQU     $01A0           Called before CLS, GET & PUT are executed
     019D             (      romdefs.asm):00459         DVectAssignStr                  EQU     $019D           Called before assigning string to string variable
     015E             (      romdefs.asm):00460         DVectBase                       EQU     $015E           Base address of ram hooks/vectors
     0188             (      romdefs.asm):00461         DVectCheckEOF                   EQU     $0188           called before checking for end of file
     017F             (      romdefs.asm):00462         DVectCheckKeys                  EQU     $017F           Called before keyboard is scanned for BREAK,SHIFT-@
     0173             (      romdefs.asm):00463         DVectCloseAllFiles              EQU     $0173           Called before closing all files
     0176             (      romdefs.asm):00464         DVectCloseFile                  EQU     $0176           Called before closing a file
     0185             (      romdefs.asm):00465         DVectCloseFileCmd               EQU     $0185           Called before closing an ASCII file read in as basic
     0179             (      romdefs.asm):00466         DVectCmdInterp                  EQU     $0179           Called before interpreting a token in A
     01A6             (      romdefs.asm):00467         DVectDeTokenize                 EQU     $01A6           Called before a line is de-tokenized
     0164             (      romdefs.asm):00468         DVectDevInit                    EQU     $0164           Called before initialising a device
     0161             (      romdefs.asm):00469         DVectDevNo                      EQU     $0161           Called when a device number is verified
     015E             (      romdefs.asm):00470         DVectDevOpen                    EQU     $015E           Called before a device is opened
     018B             (      romdefs.asm):00471         DVectEvaluateExpr               EQU     $018B           Called before evaluating expression
     019A             (      romdefs.asm):00472         DVectGetNextCmd                 EQU     $019A           Called before fetching next command to be executed by BASIC
     016A             (      romdefs.asm):00473         DVectInChar                     EQU     $016A           Called before inputting a char to A
     016D             (      romdefs.asm):00474         DVectInputFile                  EQU     $016D           Called before inputting from a file
     0182             (      romdefs.asm):00475         DVectLineInputFile              EQU     $0182           Called before LINE INPUT is executed
     0167             (      romdefs.asm):00476         DVectOutChar                    EQU     $0167           Called before outputting char in A to a device
     0170             (      romdefs.asm):00477         DVectOutputFile                 EQU     $0170           Called before outputting to a file
     017C             (      romdefs.asm):00478         DVectReReqestIn                 EQU     $017C           Called before re-requesing input from keyboard
     0197             (      romdefs.asm):00479         DVectResetBasMem                EQU     $0197           Called before changing BASIC memory vectors after LOAD etc
     0194             (      romdefs.asm):00480         DVectRunLink                    EQU     $0194           Called when RUN about to be executed
     0191             (      romdefs.asm):00481         DVectSysError                   EQU     $0191           Can be patched by system to trap error messages
     01A3             (      romdefs.asm):00482         DVectTokenize                   EQU     $01A3           Called before an ASCII line is tokenized
     018E             (      romdefs.asm):00483         DVectUserError                  EQU     $018E           Can be patched by user to trap error messages
     B44F             (      romdefs.asm):00484         DWarmStart                      EQU     $B44F           Warm start routine
     0071             (      romdefs.asm):00485         DWarmStartFlag                  EQU     $0071           Warm start flag $55=warm start, else cold start
                      (      romdefs.asm):00486         
     0000             (      romdefs.asm):00487         CStubResWordsOfs                EQU     $0000           Offset of number of reserved words
     0001             (      romdefs.asm):00488         CStubResLookupOfs               EQU     $0001           Offset of reserved word lookup table
     0003             (      romdefs.asm):00489         CStubResJumpOfs                 EQU     $0003           Offset of reserved word jump table
     0005             (      romdefs.asm):00490         CStubFuncsOfs                   EQU     $0005           Offset of nummber of functions
     0006             (      romdefs.asm):00491         CStubFuncsLookupOfs             EQU     $0006           Offset of function lookup table
     0008             (      romdefs.asm):00492         CStubFuncsJumpOfs               EQU     $0008           Offset of functions jump table
                      (      romdefs.asm):00493         
     0021             (      romdefs.asm):00494         CSkip1                          EQU     $0021           Skip 1 byte (BRN)
     008C             (      romdefs.asm):00495         CSkip2                          EQU     $008C           Skip 2 bytes (CMPX)
     0086             (      romdefs.asm):00496         CSkip1LD                        EQU     $0086           Skip 1 byte (LDA)
     007D             (      romdefs.asm):00497         CSkip2TST                       EQU     $007D           Skip 2 bytes (TST)
                      (      romdefs.asm):00498         
     8272             (      romdefs.asm):00499         CCoCoVec167                     EQU     $8272           Vector dest for 167 
     8CF1             (      romdefs.asm):00500         CCoCoVect16A                    EQU     $8CF1           Vector dest for 16A
     8286             (      romdefs.asm):00501         CCoCoVect176                    EQU     $8286           Vector dest for 176
     8E90             (      romdefs.asm):00502         CCoCoVect179                    EQU     $8E90           Vector dest for 179
     8846             (      romdefs.asm):00503         CCoCoVect18B                    EQU     $8846           Vector dest for 18B
     88F0             (      romdefs.asm):00504         CCoCoVect191                    EQU     $88F0           Vector dest for 191
     829C             (      romdefs.asm):00505         CCoCoVect194                    EQU     $829C           Vector Dest for 194
     87E5             (      romdefs.asm):00506         CCoCoVect197                    EQU     $87E5           Vector Dest for 197
     82B9             (      romdefs.asm):00507         CCoCoVect19A                    EQU     $82B9           Vector Dest for 19A
     8304             (      romdefs.asm):00508         CCoCoVect1A3                    EQU     $8304           Vector Dest for 1A3
     0027             (      romdefs.asm):00509         CAddrFWareRamTop                EQU     $0027           Top of firmware RAM CLEAR xxx,yyyy set this to yyyy
     0074             (      romdefs.asm):00510         CAddrRamTop                     EQU     $0074           Physical end of RAM (4K, 16K, 32K or 64K).
     0021             (      romdefs.asm):00511         CAddrStack                      EQU     $0021           Address of top of machine stack
     0123             (      romdefs.asm):00512         CBasAddrCmdDisp                 EQU     $0123           Address of basic command dispatch
     0121             (      romdefs.asm):00513         CBasAddrCmdList                 EQU     $0121           Address of basic command list
     012D             (      romdefs.asm):00514         CBasAddrDskCmdDisp              EQU     $012D           Address of disk basic command dispatch
     012B             (      romdefs.asm):00515         CBasAddrDskCmdList              EQU     $012B           Address of disk basic command list
     0132             (      romdefs.asm):00516         CBasAddrDskFuncDisp             EQU     $0132           Address of disk basic function dispatcher
     0130             (      romdefs.asm):00517         CBasAddrDskFuncList             EQU     $0130           Address of disk basic function list
     0128             (      romdefs.asm):00518         CBasAddrFuncDisp                EQU     $0128           Address of basic function dispatcher
     0126             (      romdefs.asm):00519         CBasAddrFuncList                EQU     $0126           Address of basic function list
     00A6             (      romdefs.asm):00520         CBasAddrSigByte                 EQU     $00A6           Address of current significant bit in command line
     A61C             (      romdefs.asm):00521         CBasAOError                     EQU     $A61C           Print ?AO Error and return to basic
     0005             (      romdefs.asm):00522         CBasArrayEval                   EQU     $0005           Array evaluation flag, 0=eval, 1=dimensioning
     A0B6             (      romdefs.asm):00523         CBasBootBasic                   EQU     $A0B6           Restart basic, as if power on, also deletes current program
     0017             (      romdefs.asm):00524         CBasBotStack                    EQU     $0017           Bottom of stack at last check
     ADC4             (      romdefs.asm):00525         CBasBRARun                      EQU     $ADC4           BRA to main loop, used by DOS
     0000             (      romdefs.asm):00526         CBasBreakFlag                   EQU     $0000           Break flag, +ve=stop,-ve=end
     03D7             (      romdefs.asm):00527         CBasBuffer                      EQU     $03D7           Basic buffer space
     AC1E             (      romdefs.asm):00528         CBasChkArrSpaceMv               EQU     $AC1E           Check memory space at top of arrays + move arrays
     AC33             (      romdefs.asm):00529         CBasChkB2Free                   EQU     $AC33           Check B*2 bytes free above Arrays, OM error if not
     8866             (      romdefs.asm):00530         CBasChkDirect                   EQU     $8866           Check for direct mode, ID Error if so
     009F             (      romdefs.asm):00531         CBasChrGet                      EQU     $009F           Get next basic character routine
     00A5             (      romdefs.asm):00532         CBasChrGetCurr                  EQU     $00A5           Get current basic ccharacter
     00D3             (      romdefs.asm):00533         CBasCloadMOffs                  EQU     $00D3           2s complement of CLOADM offset
     AC73             (      romdefs.asm):00534         CBasCmdMode                     EQU     $AC73           Return to command mode
     0029             (      romdefs.asm):00535         CBasContLine                    EQU     $0029           Line no used by CONT
     0068             (      romdefs.asm):00536         CBasCurrentLine                 EQU     $0068           Current line no $FFFF in direct mode
     0001             (      romdefs.asm):00537         CBasDelim1                      EQU     $0001           First string delimiter
     0002             (      romdefs.asm):00538         CBasDelim2                      EQU     $0002           Second string delimiter
     002F             (      romdefs.asm):00539         CBasDirectTextPtr               EQU     $002F           Direct mode text pointer
     0008             (      romdefs.asm):00540         CBasDisArraySearch              EQU     $0008           Disable array search flag, 0=allow 0<>disable
     A61F             (      romdefs.asm):00541         CBasDNError                     EQU     $A61F           Print ?DN Error and return to basic
     ADD4             (      romdefs.asm):00542         CBasDoDispatch                  EQU     $ADD4           Do command dispatech, X must point to dispatch table
     00D7             (      romdefs.asm):00543         CBasEditorLineLen               EQU     $00D7           Editor line length
     ABAF             (      romdefs.asm):00544         CBasErrorCodeTable              EQU     $ABAF           List of 2 byte error codes eg 'SN' 'OM' 'UL' etc
     009D             (      romdefs.asm):00545         CBasExecAddr                    EQU     $009D           Exec address, on D64, at startup points to routine to boot all ram mode
     B44A             (      romdefs.asm):00546         CBasFCError                     EQU     $B44A           Print ?FC Error and return to basic
     AD01             (      romdefs.asm):00547         CBasFindLineNo                  EQU     $AD01           Find a line number in basic program
     A616             (      romdefs.asm):00548         CBasFMError                     EQU     $A616           Print ?FM Error and return to basic
     0007             (      romdefs.asm):00549         CBasGarbageFlag                 EQU     $0007           Garbage collection flag
     0003             (      romdefs.asm):00550         CBasGenCount                    EQU     $0003           General count/scratch var
     A5A2             (      romdefs.asm):00551         CBasGetDevNo                    EQU     $A5A2           Get dev no from line & validate
     AF67             (      romdefs.asm):00552         CBasGetLineNo                   EQU     $AF67           Get line no and store in BasTempLine
     B6A4             (      romdefs.asm):00553         CBasGetStrFirst                 EQU     $B6A4           Get first character of string into B
     B654             (      romdefs.asm):00554         CBasGetStrLenAddr               EQU     $B654           Get string len in B and address in X of string desc in FPA2
     A755             (      romdefs.asm):00555         CBasicCassBitIn                 EQU     $A755           Cassette bit input
     A749             (      romdefs.asm):00556         CBasicCassByIn                  EQU     $A749           Cassette byte input
     A82A             (      romdefs.asm):00557         CBasicCassByOut                 EQU     $A82A           Cassette byte output
     A7EB             (      romdefs.asm):00558         CBasicCassOff                   EQU     $A7EB           Cassette player motor off
     A7CA             (      romdefs.asm):00559         CBasicCassOn                    EQU     $A7CA           Cassette player motor on
     A77C             (      romdefs.asm):00560         CBasicCassOnRd                  EQU     $A77C           Cassette on for reading
     A199             (      romdefs.asm):00561         CBasicCursorB                   EQU     $A199           Cursor blink
     0000             (      romdefs.asm):00562         CBasicHWInit                    EQU     $0000           Hardware initialisation
     A9DE             (      romdefs.asm):00563         CBasicJoyIn                     EQU     $A9DE           Joystick input
     A1C1             (      romdefs.asm):00564         CBasicKbdIn                     EQU     $A1C1           Keyboard input
     A2BF             (      romdefs.asm):00565         CBasicPrintOut                  EQU     $A2BF           Printer output
     A30A             (      romdefs.asm):00566         CBasicScreenOut                 EQU     $A30A           Screen output
     0000             (      romdefs.asm):00567         CBasicSerIn                     EQU     $0000           Read a byte from serial
     0000             (      romdefs.asm):00568         CBasicSerOut                    EQU     $0000           Write a byte to serial port
     0000             (      romdefs.asm):00569         CBasicSetBaud                   EQU     $0000           Set baud rate
     0000             (      romdefs.asm):00570         CBasicSWInit                    EQU     $0000           Software initialisation
     A7D8             (      romdefs.asm):00571         CBasicWriteLead                 EQU     $A7D8           Cassette write leader
     886C             (      romdefs.asm):00572         CBasIDError                     EQU     $886C           Print ?ID Error and return to basic
     0004             (      romdefs.asm):00573         CBasIfCount                     EQU     $0004           If count - how many in a line
     A39D             (      romdefs.asm):00574         CBasInBuffFromX                 EQU     $A39D           Read input buffer at X as basic input
     0009             (      romdefs.asm):00575         CBasInputFlag                   EQU     $0009           Iinput/read flag, 0=input 0<>read
     A619             (      romdefs.asm):00576         CBasIOError                     EQU     $A619           Print ?IO Error and return to basic
     A9B3             (      romdefs.asm):00577         CBasIRQVec                      EQU     $A9B3           Basic IRQ routine, increments timer
     015A             (      romdefs.asm):00578         CBasJoyVal0                     EQU     $015A           Joystick(0) value
     015B             (      romdefs.asm):00579         CBasJoyVal1                     EQU     $015B           Joystick(1) value
     015C             (      romdefs.asm):00580         CBasJoyVal2                     EQU     $015C           Joystick(2) value
     015D             (      romdefs.asm):00581         CBasJoyVal3                     EQU     $015D           Joystick(3) value
     89E8             (      romdefs.asm):00582         CBasLineInputEntry              EQU     $89E8           Entry into LINE INPUT routine, used by DOS
     02DC             (      romdefs.asm):00583         CBasLinInpBuff                  EQU     $02DC           Basic line input buffer
     02DA             (      romdefs.asm):00584         CBasLinInpHead                  EQU     $02DA           Basic line input buffer header
     B764             (      romdefs.asm):00585         CBasList                        EQU     $B764           List basic program to SysDevN A must be 0 on entry
     0066             (      romdefs.asm):00586         CBasListLine                    EQU     $0066           Current line during list
     96EC             (      romdefs.asm):00587         CBasLocateScreen                EQU     $96EC           Initialise beginning of basic after graphics screen, no of pages in A
     B625             (      romdefs.asm):00588         CBasLSError                     EQU     $B625           Print ?LS Error and return to basic
     8CDD             (      romdefs.asm):00589         CBasNEError                     EQU     $8CDD           Print ?NE Error and return to basic
     AD19             (      romdefs.asm):00590         CBasNew                         EQU     $AD19           Remove current basic program from meory, like NEW command
     A3FB             (      romdefs.asm):00591         CBasNOError                     EQU     $A3FB           Print ?NO Error and return to basic
     0120             (      romdefs.asm):00592         CBasNumCmds                     EQU     $0120           Number of basic commands
     012A             (      romdefs.asm):00593         CBasNumDskCmds                  EQU     $012A           Number of disk basic commands
     012F             (      romdefs.asm):00594         CBasNumDskFuncs                 EQU     $012F           Number of disk basic functions
     0125             (      romdefs.asm):00595         CBasNumFuncs                    EQU     $0125           Number of basic functions
     002D             (      romdefs.asm):00596         CBasOldInputPtr                 EQU     $002D           Pointer to saved input during a STOP
     AC44             (      romdefs.asm):00597         CBasOMError                     EQU     $AC44           Print ?OM Error and return to basic
     BA92             (      romdefs.asm):00598         CBasOVError                     EQU     $BA92           Print ?OV Error and return to basic
     ADEB             (      romdefs.asm):00599         CBasPollKeyboard                EQU     $ADEB           Basic, poll keyboard and check for break
     BF3B             (      romdefs.asm):00600         CBasRandom8                     EQU     $BF3B           Generate an 8 bit random number and place in BasRandomSeed+1
     0115             (      romdefs.asm):00601         CBasRandomSeed                  EQU     $0115           Random number seed for RND function
     000A             (      romdefs.asm):00602         CBasRelateFlag                  EQU     $000A           Relational operator flag
     00D1             (      romdefs.asm):00603         CBasRenumStart                  EQU     $00D1           Renum start line no
     00D5             (      romdefs.asm):00604         CBasRenumStartLine              EQU     $00D5           Renum start line number
     00CF             (      romdefs.asm):00605         CBasRenumVal                    EQU     $00CF           Renum increment value
     AD33             (      romdefs.asm):00606         CBasResetStack                  EQU     $AD33           Reset basic stack to initial position
     B50F             (      romdefs.asm):00607         CBasResStr                      EQU     $B50F           Reserve B bytes of string space return start in X, setup low mem vars
     B56D             (      romdefs.asm):00608         CBasResStr2                     EQU     $B56D           Reserve B bytes of string space return start in X
     00AB             (      romdefs.asm):00609         CBasRndData                     EQU     $00AB           Used by RND
     AD9E             (      romdefs.asm):00610         CBasRun                         EQU     $AD9E           Run basic program in memory, like RUN
     AEBB             (      romdefs.asm):00611         CBasSetProgPtrX                 EQU     $AEBB           Sets basic program pointer to X-1
     80E7             (      romdefs.asm):00612         CBasSignonMess                  EQU     $80E7           Signon message address, for CoCo this is for Extended basic.
     AEB4             (      romdefs.asm):00613         CBasSkipLineNo                  EQU     $AEB4           Skip past line no in basic line, UL error if no line no.
     B277             (      romdefs.asm):00614         CBasSNError                     EQU     $B277           Print ?SN Error and return to basic
     0019             (      romdefs.asm):00615         CBasStartProg                   EQU     $0019           Start addr of basic program
     B553             (      romdefs.asm):00616         CBasSTError                     EQU     $B553           Print ?OM Error and return to basic
     01A9             (      romdefs.asm):00617         CBasStrDescStack                EQU     $01A9           String descriptor stack
     000B             (      romdefs.asm):00618         CBasStrFirstFreeTemp            EQU     $000B           First free temory string space pointer
     000D             (      romdefs.asm):00619         CBasStrLastUsedTemp             EQU     $000D           Last used tempory string space pointer
     0025             (      romdefs.asm):00620         CBasStrUtil                     EQU     $0025           Utility string pointer
     0120             (      romdefs.asm):00621         CBasStub0                       EQU     $0120           Basic Stub 0 (All basic on Dragon, Colour basic on Tandy)
     012A             (      romdefs.asm):00622         CBasStub1                       EQU     $012A           Basic stub 1 (Disk basic on Dragon, Extended basic on Tandy)
     0134             (      romdefs.asm):00623         CBasStub2                       EQU     $0134           Basic Stub 2 (Null on dragon, Disk basic on Tandy)
     013E             (      romdefs.asm):00624         CBasStub3                       EQU     $013E           Basic Stub 3 (do not use on dragon, user stub on Tandy)
     0013             (      romdefs.asm):00625         CBasTempFPA2                    EQU     $0013           Tempory FPA Mantissa for FPA2
     002B             (      romdefs.asm):00626         CBasTempLine                    EQU     $002B           Tempory line no
     000F             (      romdefs.asm):00627         CBasTempPtr                     EQU     $000F           Tempory pointer
     0011             (      romdefs.asm):00628         CBasTempPtr1                    EQU     $0011           Tempory discriptor pointer (stack search)
     003F             (      romdefs.asm):00629         CBasTempRelateFlag              EQU     $003F           Tempory relational operator flag
     003B             (      romdefs.asm):00630         CBasTempVarDesc                 EQU     $003B           Pointer to a tempory var descriptor
     B151             (      romdefs.asm):00631         CBasTMError                     EQU     $B151           Print ?TM Error and return to basic
     00AF             (      romdefs.asm):00632         CBasTronFlag                    EQU     $00AF           Tron flag nonzero=trace on
     AED2             (      romdefs.asm):00633         CBasULError                     EQU     $AED2           Print ?UL Error and return to basic
     0076             (      romdefs.asm):00634         CBasUnused1                     EQU     $0076           2 unused bytes
     00B0             (      romdefs.asm):00635         CBasUSRTableAddr                EQU     $00B0           Address of USR address table
     013E             (      romdefs.asm):00636         CBasUsrVecNoDisk                EQU     $013E           USR vector tabl when basic not installed
     001D             (      romdefs.asm):00637         CBasVarArrayAddr                EQU     $001D           Start address of Array table
     0052             (      romdefs.asm):00638         CBasVarAssign16                 EQU     $0052           Part of FPA1, used for 16bit assigns
     0033             (      romdefs.asm):00639         CBasVarDataAddr                 EQU     $0033           Address of next item in data
     0031             (      romdefs.asm):00640         CBasVarDataLine                 EQU     $0031           Line number of current data statement
     001F             (      romdefs.asm):00641         CBasVarEnd                      EQU     $001F           End of storage in use by basic
     004F             (      romdefs.asm):00642         CBasVarFPAcc1                   EQU     $004F           Floating point acumulator 1
     005C             (      romdefs.asm):00643         CBasVarFPAcc2                   EQU     $005C           Floating point acumulator 2
     0040             (      romdefs.asm):00644         CBasVarFPAcc3                   EQU     $0040           Floating point accumulator 3 (packed)
     0045             (      romdefs.asm):00645         CBasVarFPAcc4                   EQU     $0045           Floating point accumulator 4 (packed)
     004A             (      romdefs.asm):00646         CBasVarFPAcc5                   EQU     $004A           Floating point accumulator 5 (packed)
     0037             (      romdefs.asm):00647         CBasVarLastInUse                EQU     $0037           Pointer to variable last in use
     0039             (      romdefs.asm):00648         CBasVarPtrLast                  EQU     $0039           Poiinter to VARPTR last in use
     001B             (      romdefs.asm):00649         CBasVarSimpleAddr               EQU     $001B           Start address of simple variables
     0021             (      romdefs.asm):00650         CBasVarStringBase               EQU     $0021           Base address of string space (and stack)
     0023             (      romdefs.asm):00651         CBasVarStrTop                   EQU     $0023           Top of string space in use
     0006             (      romdefs.asm):00652         CBasVarType                     EQU     $0006           Variable type flag 0=numeric, $ff=string
     AD21             (      romdefs.asm):00653         CBasVect1                       EQU     $AD21           Sets up various basic vectors (after load), should be followed by call to BasVect2
     AD26             (      romdefs.asm):00654         CBasVect1a                      EQU     $AD26           Same as Vect1, but doesn't reset input pointer
     ACEF             (      romdefs.asm):00655         CBasVect2                       EQU     $ACEF           Finalises setup of basic vectors (after load), should be preceeded by call to BasVect1
     BC06             (      romdefs.asm):00656         CBasZDError                     EQU     $BC06           Print ?ZD Error and return to basic
     01E3             (      romdefs.asm):00657         CCasASCIIFlag                   EQU     $01E3           ASCII flag byte
     A974             (      romdefs.asm):00658         CCasAudioOff                    EQU     $A974           Turn off audio from cassette
     A99D             (      romdefs.asm):00659         CCasAudioOn                     EQU     $A99D           Turn on Audio from cassete to speaker
     0083             (      romdefs.asm):00660         CCasBitCount                    EQU     $0083           Cassette bit counter
     A755             (      romdefs.asm):00661         CCasBitIn                       EQU     $A755           Reads a bity into the 'Z' flag
     A70B             (      romdefs.asm):00662         CCasBlockIn                     EQU     $A70B           Reads a block into the cassete buffer pointed to by CasIOBuffAddr
     007D             (      romdefs.asm):00663         CCasBlockLen                    EQU     $007D           Cassete block length, number of bytes read, or to be written
     A7F4             (      romdefs.asm):00664         CCasBlockOut                    EQU     $A7F4           Write a block to cassete pointed to by CasIOBuffAddr
     007C             (      romdefs.asm):00665         CCasBlockType                   EQU     $007C           Cassete block type, 0=filename, 1=data, 255=EOF
     A749             (      romdefs.asm):00666         CCasByteIn                      EQU     $A749           Reads a single byte into the A register
     A82A             (      romdefs.asm):00667         CCasByteOut                     EQU     $A82A           Write byte in A register to cassete
     0080             (      romdefs.asm):00668         CCasCkSum                       EQU     $0080           Used by cassette routines for calculating checksum
     A429             (      romdefs.asm):00669         CCasClosFiles                   EQU     $A429           Close any open cassete file
     01E5             (      romdefs.asm):00670         CCasEntryAddr                   EQU     $01E5           Entry address for MC programs
     0070             (      romdefs.asm):00671         CCasEOFFlag                     EQU     $0070           Cassette IO Flag, nonzero if EOF reached
     A681             (      romdefs.asm):00672         CCasFindFile                    EQU     $A681           Searches a tape for specified filename
     01D2             (      romdefs.asm):00673         CCasFName                       EQU     $01D2           Cassete filename to search for or write out
     01DA             (      romdefs.asm):00674         CCasFNameFound                  EQU     $01DA           Filename found, when reading
     01D1             (      romdefs.asm):00675         CCasFNameLen                    EQU     $01D1           Length of cassette filename can be 0 to 8
     01E2             (      romdefs.asm):00676         CCasFType                       EQU     $01E2           File type 0=tokenized basic, 1=ASCII data, 2=Binary
     01E4             (      romdefs.asm):00677         CCasGapFlag                     EQU     $01E4           Gap flag byte
     007A             (      romdefs.asm):00678         CCasHeadBuffAddr                EQU     $007A           Address of cassette file header
     01DA             (      romdefs.asm):00679         CCasIOBuff                      EQU     $01DA           COS default IO buffer, if this contains filename block then folloing are valid
     007E             (      romdefs.asm):00680         CCasIOBuffAddr                  EQU     $007E           Cassette IO buffer address, where data will be read/written
     0079             (      romdefs.asm):00681         CCasIOBuffSize                  EQU     $0079           Size of cassette IO buffer
     0081             (      romdefs.asm):00682         CCasIOErrorCode                 EQU     $0081           Cassette IO error code 0=no error, 1=CRC, 2=attempt to load in non-ram area
     006E             (      romdefs.asm):00683         CCasIOFlag                      EQU     $006E           Cassette IO Flag, set to $FF when IO in progress
     0085             (      romdefs.asm):00684         CCasLastSine                    EQU     $0085           Casette last sine tabe entry
     0092             (      romdefs.asm):00685         CCasLeadCount                   EQU     $0092           Cassete leader count, number of $55 bytes in the leader
     01E7             (      romdefs.asm):00686         CCasLoadAddr                    EQU     $01E7           Load address
     0091             (      romdefs.asm):00687         CCasMax12                       EQU     $0091           Cassette Upper limit of 1200Hz
     0092             (      romdefs.asm):00688         CCasMax24                       EQU     $0092           Cassette Upper limit of 2400Hz
     008A             (      romdefs.asm):00689         CCasMotorDelay                  EQU     $008A           Cassette motor on delay (also inter-block gap)
     A7EB             (      romdefs.asm):00690         CCasMotorOff                    EQU     $A7EB           Turn off cassette motor
     A7CA             (      romdefs.asm):00691         CCasMotorOn                     EQU     $A7CA           Turn on motor, and wait for delay in CasMotorDelay
     008F             (      romdefs.asm):00692         CCasPartrt                      EQU     $008F           Cassette 1200/2400 partition
     0084             (      romdefs.asm):00693         CCasPhaseFlag                   EQU     $0084           Cassette Phase flag
     A511             (      romdefs.asm):00694         CCasReadBin                     EQU     $A511           Read in a binary file, similar to CLOADM
     A701             (      romdefs.asm):00695         CCasReadBlock1                  EQU     $A701           Turns on motor, reads header and then first block into CasIOBufAddr
     A77C             (      romdefs.asm):00696         CCasReadLeader                  EQU     $A77C           Turn on motor and read past leader
     0078             (      romdefs.asm):00697         CCasStatus                      EQU     $0078           Cassette status byte, 0=cassette closed, 1=open for input, 2=open for output
     0082             (      romdefs.asm):00698         CCasTemp                        EQU     $0082           Cassette tempory storage
     A469             (      romdefs.asm):00699         CCasWriteBasic                  EQU     $A469           Write tokenized basic program out, similar to CSAVE
     833D             (      romdefs.asm):00700         CCasWriteBin                    EQU     $833D           Write a binary file out push return address, then start,end and entry addresses and then JMP to this
     A7E5             (      romdefs.asm):00701         CCasWriteBlock1                 EQU     $A7E5           Turn on motor, write leader and then first block
     A7D8             (      romdefs.asm):00702         CCasWriteLeader                 EQU     $A7D8           Turn on motor and write out leader
     BC93             (      romdefs.asm):00703         CCmdABS                         EQU     $BC93           Basic Command
     B2D5             (      romdefs.asm):00704         CCmdAND                         EQU     $B2D5           Basic Command
     B6A0             (      romdefs.asm):00705         CCmdASC                         EQU     $B6A0           Basic Command
     83B0             (      romdefs.asm):00706         CCmdATN                         EQU     $83B0           Basic Command
     A990             (      romdefs.asm):00707         CCmdAudio                       EQU     $A990           Basic Command
     B68C             (      romdefs.asm):00708         CCmdCHRS                        EQU     $B68C           Basic Command
     9E9D             (      romdefs.asm):00709         CCmdCircle                      EQU     $9E9D           Basic Command
     AE41             (      romdefs.asm):00710         CCmdClear                       EQU     $AE41           Basic Command
     A498             (      romdefs.asm):00711         CCmdCload                       EQU     $A498           Basic Command
     A416             (      romdefs.asm):00712         CCmdClose                       EQU     $A416           Basic Command
     A910             (      romdefs.asm):00713         CCmdCLS                         EQU     $A910           Basic Command
     9546             (      romdefs.asm):00714         CCmdColor                       EQU     $9546           Basic Command
     AE30             (      romdefs.asm):00715         CCmdCont                        EQU     $AE30           Basic Command
     8378             (      romdefs.asm):00716         CCmdCOS                         EQU     $8378           Basic Command
     A44C             (      romdefs.asm):00717         CCmdCsave                       EQU     $A44C           Basic Command
     AEE0             (      romdefs.asm):00718         CCmdData                        EQU     $AEE0           Basic Command
     8871             (      romdefs.asm):00719         CCmdDef                         EQU     $8871           Basic Command
     8970             (      romdefs.asm):00720         CCmdDelete                      EQU     $8970           Basic Command
     B34E             (      romdefs.asm):00721         CCmdDim                         EQU     $B34E           Basic Command
     BB91             (      romdefs.asm):00722         CCmdDivide                      EQU     $BB91           Basic Command
     8C18             (      romdefs.asm):00723         CCmdDload                       EQU     $8C18           Basic Command
     9CB6             (      romdefs.asm):00724         CCmdDraw                        EQU     $9CB6           Basic Command
     8533             (      romdefs.asm):00725         CCmdEdit                        EQU     $8533           Basic Command
     AE02             (      romdefs.asm):00726         CCmdEnd                         EQU     $AE02           Basic Command
     A5CE             (      romdefs.asm):00727         CCmdEOF                         EQU     $A5CE           Basic Command
     A53E             (      romdefs.asm):00728         CCmdExec                        EQU     $A53E           Basic Command
     84F2             (      romdefs.asm):00729         CCmdEXP                         EQU     $84F2           Basic Command
     011D             (      romdefs.asm):00730         CCmdExponet                     EQU     $011D           Basic Command
     8524             (      romdefs.asm):00731         CCmdFIX                         EQU     $8524           Basic Command
     AD47             (      romdefs.asm):00732         CCmdFor                         EQU     $AD47           Basic Command
     9755             (      romdefs.asm):00733         CCmdGet                         EQU     $9755           Basic Command
     AE86             (      romdefs.asm):00734         CCmdGo                          EQU     $AE86           Basic Command
     8BDD             (      romdefs.asm):00735         CCmdHexS                        EQU     $8BDD           Basic Command
     AF14             (      romdefs.asm):00736         CCmdIF                          EQU     $AF14           Basic Command
     A564             (      romdefs.asm):00737         CCmdInkeyS                      EQU     $A564           Basic Command
     AFF5             (      romdefs.asm):00738         CCmdInput                       EQU     $AFF5           Basic Command
     877E             (      romdefs.asm):00739         CCmdInstr                       EQU     $877E           Basic Command
     BCEE             (      romdefs.asm):00740         CCmdINT                         EQU     $BCEE           Basic Command
     A9C6             (      romdefs.asm):00741         CCmdJoystk                      EQU     $A9C6           Basic Command
     B6AB             (      romdefs.asm):00742         CCmdLeftS                       EQU     $B6AB           Basic Command
     B681             (      romdefs.asm):00743         CCmdLEN                         EQU     $B681           Basic Command
     AF89             (      romdefs.asm):00744         CCmdLet                         EQU     $AF89           Basic Command
     93BB             (      romdefs.asm):00745         CCmdLine                        EQU     $93BB           Basic Command
     89C0             (      romdefs.asm):00746         CCmdLineInput                   EQU     $89C0           Line input command
     B764             (      romdefs.asm):00747         CCmdList                        EQU     $B764           Basic Command
     B75E             (      romdefs.asm):00748         CCmdLList                       EQU     $B75E           Basic Command
     8446             (      romdefs.asm):00749         CCmdLOG                         EQU     $8446           Basic Command
     B4EE             (      romdefs.asm):00750         CCmdMEM                         EQU     $B4EE           Basic Command
     B6CF             (      romdefs.asm):00751         CCmdMidS                        EQU     $B6CF           Basic Command
     B9BC             (      romdefs.asm):00752         CCmdMinus                       EQU     $B9BC           Basic Command
     A7BD             (      romdefs.asm):00753         CCmdMotor                       EQU     $A7BD           Basic Command
     BACC             (      romdefs.asm):00754         CCmdMultiply                    EQU     $BACC           Basic Command
     AD17             (      romdefs.asm):00755         CCmdNew                         EQU     $AD17           Basic Command
     B0F8             (      romdefs.asm):00756         CCmdNext                        EQU     $B0F8           Basic Command
     AF42             (      romdefs.asm):00757         CCmdON                          EQU     $AF42           Basic Command
     A5F6             (      romdefs.asm):00758         CCmdOpen                        EQU     $A5F6           Basic Command
     A603             (      romdefs.asm):00759         CCmdOpenEntry                   EQU     $A603           Entry into Basic open command used by Dragon/SuperDos
     B2D4             (      romdefs.asm):00760         CCmdOR                          EQU     $B2D4           Basic Command
     98EC             (      romdefs.asm):00761         CCmdPaint                       EQU     $98EC           Basic Command
     968B             (      romdefs.asm):00762         CCmdPClear                      EQU     $968B           Basic Command
     9532             (      romdefs.asm):00763         CCmdPCls                        EQU     $9532           Basic Command
     9723             (      romdefs.asm):00764         CCmdPcopy                       EQU     $9723           Basic Command
     B750             (      romdefs.asm):00765         CCmdPeek                        EQU     $B750           Basic Command
     9A22             (      romdefs.asm):00766         CCmdPlay                        EQU     $9A22           Basic Command
     B9C5             (      romdefs.asm):00767         CCmdPlus                        EQU     $B9C5           Basic Command
     9621             (      romdefs.asm):00768         CCmdPmode                       EQU     $9621           Basic Command
     A8F5             (      romdefs.asm):00769         CCmdPoint                       EQU     $A8F5           Basic Command
     B757             (      romdefs.asm):00770         CCmdPoke                        EQU     $B757           Basic Command
     86AC             (      romdefs.asm):00771         CCmdPOS                         EQU     $86AC           Basic Command
     9339             (      romdefs.asm):00772         CCmdPPoint                      EQU     $9339           Basic Command
     9365             (      romdefs.asm):00773         CCmdPReset                      EQU     $9365           Basic Command
     B8F7             (      romdefs.asm):00774         CCmdPrint                       EQU     $B8F7           Basic Command
     9361             (      romdefs.asm):00775         CCmdPset                        EQU     $9361           Basic Command
     9758             (      romdefs.asm):00776         CCmdPut                         EQU     $9758           Basic Command
     B046             (      romdefs.asm):00777         CCmdRead                        EQU     $B046           Basic Command
     B049             (      romdefs.asm):00778         CCmdReadFromX                   EQU     $B049           As basic READ command but ptr in X supplied by caller
     AEE3             (      romdefs.asm):00779         CCmdREM                         EQU     $AEE3           Basic Command
     8A09             (      romdefs.asm):00780         CCmdRenum                       EQU     $8A09           Basic Command
     A8B1             (      romdefs.asm):00781         CCmdReset                       EQU     $A8B1           Basic Command
     ADE4             (      romdefs.asm):00782         CCmdRestore                     EQU     $ADE4           Basic Command
     AEC0             (      romdefs.asm):00783         CCmdReturn                      EQU     $AEC0           Basic Command
     B6C8             (      romdefs.asm):00784         CCmdRightS                      EQU     $B6C8           Basic Command
     BF1F             (      romdefs.asm):00785         CCmdRND                         EQU     $BF1F           Basic Command
     AE75             (      romdefs.asm):00786         CCmdRun                         EQU     $AE75           Basic Command
     9670             (      romdefs.asm):00787         CCmdScreen                      EQU     $9670           Basic Command
     A880             (      romdefs.asm):00788         CCmdSet                         EQU     $A880           Basic Command
     BC7A             (      romdefs.asm):00789         CCmdSGN                         EQU     $BC7A           Basic Command
     BF78             (      romdefs.asm):00790         CCmdSIN                         EQU     $BF78           Basic Command
     A5EC             (      romdefs.asm):00791         CCmdSkipf                       EQU     $A5EC           Basic Command
     A94B             (      romdefs.asm):00792         CCmdSound                       EQU     $A94B           Basic Command
     8480             (      romdefs.asm):00793         CCmdSQR                         EQU     $8480           Basic Command
     AE09             (      romdefs.asm):00794         CCmdStop                        EQU     $AE09           Basic Command
     874E             (      romdefs.asm):00795         CCmdStringS                     EQU     $874E           Basic Command
     B4FD             (      romdefs.asm):00796         CCmdSTRS                        EQU     $B4FD           Basic Command
     8381             (      romdefs.asm):00797         CCmdTAN                         EQU     $8381           Basic Command
     8968             (      romdefs.asm):00798         CCmdTimer                       EQU     $8968           Basic Command
     86A8             (      romdefs.asm):00799         CCmdTroff                       EQU     $86A8           Basic Command
     86A7             (      romdefs.asm):00800         CCmdTron                        EQU     $86A7           Basic Command
     0112             (      romdefs.asm):00801         CCmdUSR                         EQU     $0112           Basic Command
     B716             (      romdefs.asm):00802         CCmdVAL                         EQU     $B716           Basic Command
     86BE             (      romdefs.asm):00803         CCmdVarptr                      EQU     $86BE           Basic Command
     00B3             (      romdefs.asm):00804         CGrBackground                   EQU     $00B3           Current background colour
     00B9             (      romdefs.asm):00805         CGrBytesPerLine                 EQU     $00B9           Number of byts/lin in current mode
     A8D9             (      romdefs.asm):00806         CGrCalcPixelPos                 EQU     $A8D9           Calculates Lo-res pixel pos from data on stack
     00D0             (      romdefs.asm):00807         CGrCircleRadius                 EQU     $00D0           Circle radius
     00CB             (      romdefs.asm):00808         CGrCircleXCo                    EQU     $00CB           Circle command X
     00CD             (      romdefs.asm):00809         CGrCircleYCo                    EQU     $00CD           Circle command Y
     9539             (      romdefs.asm):00810         CGrClearGrScreen                EQU     $9539           Clears grapics screen to value in B
     00C1             (      romdefs.asm):00811         CGrColourSet                    EQU     $00C1           Colour set currently in use
     00B4             (      romdefs.asm):00812         CGrColourTemp                   EQU     $00B4           Tempory colour in use
     00B5             (      romdefs.asm):00813         CGrCurrColour                   EQU     $00B5           Byte value for current colour, to set all pixels in byte to that colour
     00B6             (      romdefs.asm):00814         CGrCurrPmode                    EQU     $00B6           Current PMODE number
     00BD             (      romdefs.asm):00815         CGrCurrX                        EQU     $00BD           Current X cursor pos
     00C7             (      romdefs.asm):00816         CGrCurrXCo                      EQU     $00C7           Current Cursor X
     00BF             (      romdefs.asm):00817         CGrCurrY                        EQU     $00BF           Current Y cursor pos
     00C9             (      romdefs.asm):00818         CGrCurrYCo                      EQU     $00C9           Current Cursor Y
     00DB             (      romdefs.asm):00819         CGrDirtyFlag                    EQU     $00DB           Flag to tell if graphics screen has changed
     00BA             (      romdefs.asm):00820         CGrDisplayStartAddr             EQU     $00BA           Address of first byte in current display
     9CB6             (      romdefs.asm):00821         CGrDraw                         EQU     $9CB6           Draw on pmode screen as in DRAW command
     00E8             (      romdefs.asm):00822         CGrDrawAngle                    EQU     $00E8           Current angle for DRAW command
     00E9             (      romdefs.asm):00823         CGrDrawScale                    EQU     $00E9           Current scale for DRAW command
     00B2             (      romdefs.asm):00824         CGrForeground                   EQU     $00B2           Current foreground colour
     00B7             (      romdefs.asm):00825         CGrLastDisplayAddr              EQU     $00B7           Address of last byte in current display
     00C3             (      romdefs.asm):00826         CGrPixelNoX                     EQU     $00C3           Current horizontal pixel no
     00C5             (      romdefs.asm):00827         CGrPixelNoY                     EQU     $00C5           Current vertical pixel number
     00C2             (      romdefs.asm):00828         CGrPlotFlag                     EQU     $00C2           Plot/Unplot flag, 0=reset, nonzero=set
     9695             (      romdefs.asm):00829         CGrReserveGrRam                 EQU     $9695           Reserves memory for graphics, no graphics pages in B
     A8B5             (      romdefs.asm):00830         CGrResetLRGPixel                EQU     $A8B5           ReSets lo res pixel
     9682             (      romdefs.asm):00831         CGrSelectColourSet              EQU     $9682           Selects colour set dependent on B
     95AA             (      romdefs.asm):00832         CGrSelectDisplay                EQU     $95AA           Sets Text or Graphics screen, if Z=1 then text
     9653             (      romdefs.asm):00833         CGrSelectPage                   EQU     $9653           On entry B contains Pmode page to be used
     9616             (      romdefs.asm):00834         CGrSelectVDGColSet              EQU     $9616           Select colour set from data in GrColourSet
     959A             (      romdefs.asm):00835         CGrSetColours                   EQU     $959A           Sets up colours in low memory
     A88D             (      romdefs.asm):00836         CGrSetLRGPixel                  EQU     $A88D           Sets lo res pixel
     0086             (      romdefs.asm):00837         CGrSetResetData                 EQU     $0086           Data for Lo-res set/reset
     95FB             (      romdefs.asm):00838         CGrSetVDGMode                   EQU     $95FB           Set VDG to mode in A register
     960F             (      romdefs.asm):00839         CGrSetVDGOffset                 EQU     $960F           Set VDG offset to page in A
     00BC             (      romdefs.asm):00840         CGrStartPages                   EQU     $00BC           Page number of Start of graphics pages
     A006             (      romdefs.asm):00841         CIndCasBlockIn                  EQU     $A006           Indirect Read cassette block
     A008             (      romdefs.asm):00842         CIndCasBlockOut                 EQU     $A008           Indirect Write cassete block
     A004             (      romdefs.asm):00843         CIndCasOnRead                   EQU     $A004           Indirect prepare cassette for read
     A00C             (      romdefs.asm):00844         CIndCasWriteLead                EQU     $A00C           Indirect Write cassette leader
     A002             (      romdefs.asm):00845         CIndCharOutput                  EQU     $A002           Indirect Character output
     A00A             (      romdefs.asm):00846         CIndJoystickIn                  EQU     $A00A           Indirect joystick in
     A000             (      romdefs.asm):00847         CIndKeyInput                    EQU     $A000           Indirect keyboard input jsr()
     0072             (      romdefs.asm):00848         CIndVecReset                    EQU     $0072           Secondary Reset vector address, must point to NOP
     008A             (      romdefs.asm):00849         CMisc16BitScratch               EQU     $008A           Misc 16 bit scratch register (always zero ??)
     92DD             (      romdefs.asm):00850         CPixMaskTable2Col               EQU     $92DD           Pixel mask table 2 colour mode
     92E5             (      romdefs.asm):00851         CPixMaskTable4Col               EQU     $92E5           Pixel mask table 4 colour mode
     0000             (      romdefs.asm):00852         CPrinterCRLF                    EQU     $0000           Moves printer head to next line.
     0000             (      romdefs.asm):00853         CPrinterDirOut                  EQU     $0000           Sends character in A register to printer (uncooked)
     A2BF             (      romdefs.asm):00854         CPrinterOut                     EQU     $A2BF           Sends character in A register to printer
     010F             (      romdefs.asm):00855         CSecVecFIRQ                     EQU     $010F           Secondary FIRQ vector JMP+ address
     010C             (      romdefs.asm):00856         CSecVecIRQ                      EQU     $010C           Secondary IRQ vector JMP+ address
     0109             (      romdefs.asm):00857         CSecVecNMI                      EQU     $0109           Secondary NMI vector JMP+ address
     0106             (      romdefs.asm):00858         CSecVecSWI                      EQU     $0106           Secondary NMI vector JMP+ address
     0103             (      romdefs.asm):00859         CSecVecSWI2                     EQU     $0103           Secondary SWI2 vector JMP+ address
     0100             (      romdefs.asm):00860         CSecVecSWI3                     EQU     $0100           Secondary SWI3 vector JMP+ address
     00E6             (      romdefs.asm):00861         CSerDLBaud                      EQU     $00E6           Baud rate for DLOAD, unknown for Dragon
     00E7             (      romdefs.asm):00862         CSerDLTimeout                   EQU     $00E7           Timeourt for DLOAD, unknown for Dragon
     A951             (      romdefs.asm):00863         CSndBeep                        EQU     $A951           Play a beep duration in B, frequency in SndPitch
     A974             (      romdefs.asm):00864         CSndDisable                     EQU     $A974           Disables D/A sound output
     00E5             (      romdefs.asm):00865         CSndDotNoteScale                EQU     $00E5           Dotted note scale factor for Play
     A99E             (      romdefs.asm):00866         CSndDTOAOn                      EQU     $A99E           Turn on audio to D/A converter
     A976             (      romdefs.asm):00867         CSndEnable                      EQU     $A976           Enables D/A sound output
     008D             (      romdefs.asm):00868         CSndLength                      EQU     $008D           Sound duration
     00E1             (      romdefs.asm):00869         CSndNoteLen                     EQU     $00E1           Note length for PLAY
     00DE             (      romdefs.asm):00870         CSndOctave                      EQU     $00DE           Sound octave value for PLAY
     008C             (      romdefs.asm):00871         CSndPitch                       EQU     $008C           Sound pitch value
     9AFF             (      romdefs.asm):00872         CSndPlayNote                    EQU     $9AFF           Plays a note from the A register (ASCII)
     00E2             (      romdefs.asm):00873         CSndTempo                       EQU     $00E2           Tempo for PLAY
     00E3             (      romdefs.asm):00874         CSndTimerPlay                   EQU     $00E3           Timer for the Play command
     00DF             (      romdefs.asm):00875         CSndVolume                      EQU     $00DF           Sound volume for PLAY
     0000             (      romdefs.asm):00876         CSysBoot64                      EQU     $0000           Dragon 64 only, boots basic into all ram mode, with 48K available to basic.
     AC46             (      romdefs.asm):00877         CSysErr                         EQU     $AC46           Report error code in B register, cleanup and return to basic
     AC60             (      romdefs.asm):00878         CSysErr2                        EQU     $AC60           Report error in B, do NOT hook to RAM, or turn of cas etc
     A9DE             (      romdefs.asm):00879         CSysReadJoystick                EQU     $A9DE           Read hardware joystick values & update BasJoyVal0..3
     A027             (      romdefs.asm):00880         CSysReset                       EQU     $A027           Perform soft reset, as if reset button pressed
     A985             (      romdefs.asm):00881         CSysResetDA                     EQU     $A985           Reset D/A converter to $7E
     A9A2             (      romdefs.asm):00882         CSysSelJoystick                 EQU     $A9A2           Select joystick alue to read from A
     0112             (      romdefs.asm):00883         CSysTimeVal                     EQU     $0112           Current value of system timer
     A987             (      romdefs.asm):00884         CSysWriteDA                     EQU     $A987           Write value in A to D/A, bits 0 &1 should be 0
     011A             (      romdefs.asm):00885         CTextCapsLock                   EQU     $011A           Capslock flag, nonzero=uppercase
     A323             (      romdefs.asm):00886         CTextClearLine                  EQU     $A323           Clears a VDU line from current cursor pos to EOL
     A928             (      romdefs.asm):00887         CTextCls                        EQU     $A928           Clear text mode screen, resets cursor to top left
     A92A             (      romdefs.asm):00888         CTextClsChar                    EQU     $A92A           Clears srcrren to character in B register & resets cursor
     008F             (      romdefs.asm):00889         CTextCursFalshCnt               EQU     $008F           Cusrsor flash counter
     006F             (      romdefs.asm):00890         CTextDevN                       EQU     $006F           Current device number
     0035             (      romdefs.asm):00891         CTextKbdBuffAddr                EQU     $0035           Address of keyboard input buffer
     011B             (      romdefs.asm):00892         CTextKbdDelay                   EQU     $011B           Keyboard scan delay constant, used to debounce
     0152             (      romdefs.asm):00893         CTextKbdRollover                EQU     $0152           Rollover table, to check for key releases
     0087             (      romdefs.asm):00894         CTextLastKey                    EQU     $0087           ASCII code of last keypress, not cleard by key release
     A282             (      romdefs.asm):00895         CTextOutChar                    EQU     $A282           Outputs character in A to screen
     B958             (      romdefs.asm):00896         CTextOutCRLF                    EQU     $B958           Outputs an EOL sequence to the screen
     BDCC             (      romdefs.asm):00897         CTextOutNum16                   EQU     $BDCC           Outputs unsigned integer in D to the TextDevN device
     BDD4             (      romdefs.asm):00898         CTextOutNumFPA0                 EQU     $BDD4           Outputs number in FPA0 to screen
     B9AF             (      romdefs.asm):00899         CTextOutQuestion                EQU     $B9AF           Outputs a question mark to screen
     B9AC             (      romdefs.asm):00900         CTextOutSpace                   EQU     $B9AC           Outputs a space to screen
     B99C             (      romdefs.asm):00901         CTextOutString                  EQU     $B99C           Outputs string pointed to by X to screen, X should point to byte before first byte of string
     0148             (      romdefs.asm):00902         CTextPrnAutoCRLF                EQU     $0148           Printer auto EOL flag, nonzero will send EOL sequence at end of line
     0099             (      romdefs.asm):00903         CTextPrnCommaW                  EQU     $0099           Printer comma width
     009C             (      romdefs.asm):00904         CTextPrnCurrCol                 EQU     $009C           Printer current column
     014A             (      romdefs.asm):00905         CTextPrnEOLCnt                  EQU     $014A           Number of characters in EOL sequence 1..4
     014B             (      romdefs.asm):00906         CTextPrnEOLSeq                  EQU     $014B           End of line characters
     009A             (      romdefs.asm):00907         CTextPrnLastComma               EQU     $009A           Printer last comma width, should be printer line width - prinnter comma width
     009B             (      romdefs.asm):00908         CTextPrnLineW                   EQU     $009B           Printer line width
     03FF             (      romdefs.asm):00909         CTextPrnSelFlag                 EQU     $03FF           Dragon 64 printer selection flag, 0=paralell port, nonzero=RS232
     95AC             (      romdefs.asm):00910         CTextResetVDU                   EQU     $95AC           Resets to text mode and screen base address of $400
     A1C1             (      romdefs.asm):00911         CTextScanKbd                    EQU     $A1C1           Scan keyboard, return Char in A, Zero flag set if no key
     0095             (      romdefs.asm):00912         CTextSerBaudRate                EQU     $0095           Serial baud rate, note on Dragon 64, this is the actual hardware baud rate reg.
     0097             (      romdefs.asm):00913         CTextSerEOLDelay                EQU     $0097           End of line delay for serial port on Dragon 64 & CoCo
     A199             (      romdefs.asm):00914         CTextUpdateCurs                 EQU     $A199           Decrements TextCursFlashCnt, if zero resets and flashes cursor
     006A             (      romdefs.asm):00915         CTextVDUCommaW                  EQU     $006A           VDU comma width field
     006C             (      romdefs.asm):00916         CTextVDUCurrCol                 EQU     $006C           Current column for VDU output
     0088             (      romdefs.asm):00917         CTextVDUCursAddr                EQU     $0088           Current VDU cursor address
     006B             (      romdefs.asm):00918         CTextVDULastComma               EQU     $006B           VDU last comma field, should be VDU line width - VDU comma width
     006D             (      romdefs.asm):00919         CTextVDULineW                   EQU     $006D           VDU line width, normally 32
     A30A             (      romdefs.asm):00920         CTextVDUOut                     EQU     $A30A           Outputs Char in A to VDU, does not reset screen.
     ADFB             (      romdefs.asm):00921         CTextWaitKey                    EQU     $ADFB           Wait for a keypress, calls TextScanKbd, also handles break
     8CC6             (      romdefs.asm):00922         CTextWaitKeyCurs                EQU     $8CC6           Same as TextWaitKey, but with cursor
     A171             (      romdefs.asm):00923         CTextWaitKeyCurs2               EQU     $A171           Same as TextWaitKey, but with cursor
     A59A             (      romdefs.asm):00924         CUtilCopyBXtoU                  EQU     $A59A           Copy B bytes from X to U
     B4F2             (      romdefs.asm):00925         CVarAssign16Bit                 EQU     $B4F2           Assigns value in D register to a variable, and returns to basic
     B4F3             (      romdefs.asm):00926         CVarAssign16Bit2                EQU     $B4F3           Assigns value in D register to a variable, and returns to basic (1 less instruction!).
     880E             (      romdefs.asm):00927         CVarAssign16BitB                EQU     $880E           Assigns value in BasVarAssign16 to a variable, and returns to basic
     B4F3             (      romdefs.asm):00928         CVarAssign8Bit                  EQU     $B4F3           Assigns value in B register to a variable, and returns to basic
     B26F             (      romdefs.asm):00929         CVarCKChar                      EQU     $B26F           Check for char in B register in command line, SNError if not
     B267             (      romdefs.asm):00930         CVarCKClBrac                    EQU     $B267           Check for Close bracket ')' in command line, SNError if not
     B26D             (      romdefs.asm):00931         CVarCKComma                     EQU     $B26D           Check for Comma in command line, SNError if not
     B26A             (      romdefs.asm):00932         CVarCKOpBrac                    EQU     $B26A           Check for Open bracket '(' in command line, SNError if not
     B659             (      romdefs.asm):00933         CVarDelVar                      EQU     $B659           Frees up storage used by a variable
     B591             (      romdefs.asm):00934         CVarGarbageCollect              EQU     $B591           Forces garbage collection in string space
     B73D             (      romdefs.asm):00935         CVarGet16Bit                    EQU     $B73D           Returns value of variable in D,FCError if more than 16 bits
     B70B             (      romdefs.asm):00936         CVarGet8Bit                     EQU     $B70B           Returns value of variable in B,FCError if more than 8 bits
     B738             (      romdefs.asm):00937         CVarGetComma8                   EQU     $B738           Checks for comman then gets 8 bit.
     B146             (      romdefs.asm):00938         CVarGetExpr                     EQU     $B146           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry set)
     B143             (      romdefs.asm):00939         CVarGetExprCC                   EQU     $B143           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry clear)
     B156             (      romdefs.asm):00940         CVarGetStr                      EQU     $B156           Compiles string and moves to free string space, should be followed by VarGetExpr
     B3E9             (      romdefs.asm):00941         CVarGetUsr                      EQU     $B3E9           Returns argument to USRnn as a 16bit no in D
     B357             (      romdefs.asm):00942         CVarGetVar                      EQU     $B357           Gets VARPTR address of following name and places in BasVarPtrLast
     BA1C             (      romdefs.asm):00943         CVarNormFPA0                    EQU     $BA1C           Normalize FPA0
     01A0             (      romdefs.asm):00944         CVectAccessScreen               EQU     $01A0           Called before CLS, GET & PUT are executed
     019D             (      romdefs.asm):00945         CVectAssignStr                  EQU     $019D           Called before assigning string to string variable
     015E             (      romdefs.asm):00946         CVectBase                       EQU     $015E           Base address of ram hooks/vectors
     0188             (      romdefs.asm):00947         CVectCheckEOF                   EQU     $0188           called before checking for end of file
     017F             (      romdefs.asm):00948         CVectCheckKeys                  EQU     $017F           Called before keyboard is scanned for BREAK,SHIFT-@
     0173             (      romdefs.asm):00949         CVectCloseAllFiles              EQU     $0173           Called before closing all files
     0176             (      romdefs.asm):00950         CVectCloseFile                  EQU     $0176           Called before closing a file
     0185             (      romdefs.asm):00951         CVectCloseFileCmd               EQU     $0185           Called before closing an ASCII file read in as basic
     0179             (      romdefs.asm):00952         CVectCmdInterp                  EQU     $0179           Called before interpreting a token in A
     01A6             (      romdefs.asm):00953         CVectDeTokenize                 EQU     $01A6           Called before a line is de-tokenized
     0164             (      romdefs.asm):00954         CVectDevInit                    EQU     $0164           Called before initialising a device
     0161             (      romdefs.asm):00955         CVectDevNo                      EQU     $0161           Called when a device number is verified
     015E             (      romdefs.asm):00956         CVectDevOpen                    EQU     $015E           Called before a device is opened
     018B             (      romdefs.asm):00957         CVectEvaluateExpr               EQU     $018B           Called before evaluating expression
     019A             (      romdefs.asm):00958         CVectGetNextCmd                 EQU     $019A           Called before fetching next command to be executed by BASIC
     016A             (      romdefs.asm):00959         CVectInChar                     EQU     $016A           Called before inputting a char to A
     016D             (      romdefs.asm):00960         CVectInputFile                  EQU     $016D           Called before inputting from a file
     0182             (      romdefs.asm):00961         CVectLineInputFile              EQU     $0182           Called before LINE INPUT is executed
     0167             (      romdefs.asm):00962         CVectOutChar                    EQU     $0167           Called before outputting char in A to a device
     0170             (      romdefs.asm):00963         CVectOutputFile                 EQU     $0170           Called before outputting to a file
     017C             (      romdefs.asm):00964         CVectReReqestIn                 EQU     $017C           Called before re-requesing input from keyboard
     0197             (      romdefs.asm):00965         CVectResetBasMem                EQU     $0197           Called before changing BASIC memory vectors after LOAD etc
     0194             (      romdefs.asm):00966         CVectRunLink                    EQU     $0194           Called when RUN about to be executed
     0191             (      romdefs.asm):00967         CVectSysError                   EQU     $0191           Can be patched by system to trap error messages
     01A3             (      romdefs.asm):00968         CVectTokenize                   EQU     $01A3           Called before an ASCII line is tokenized
     018E             (      romdefs.asm):00969         CVectUserError                  EQU     $018E           Can be patched by user to trap error messages
     80C0             (      romdefs.asm):00970         CWarmStart                      EQU     $80C0           Warm start routine
     0071             (      romdefs.asm):00971         CWarmStartFlag                  EQU     $0071           Warm start flag $55=warm start, else cold start
                      (      romdefs.asm):00972         
                      (      romdefs.asm):00973                                 ifdef Dragon
                      (      romdefs.asm):00974         
     0000             (      romdefs.asm):00975         StubResWordsOfs         EQU     DStubResWordsOfs
     0001             (      romdefs.asm):00976         StubResLookupOfs                EQU     DStubResLookupOfs
     0003             (      romdefs.asm):00977         StubResJumpOfs                  EQU     DStubResJumpOfs
     0005             (      romdefs.asm):00978         StubFuncsOfs                    EQU     DStubFuncsOfs
     0006             (      romdefs.asm):00979         StubFuncsLookupOfs              EQU     DStubFuncsLookupOfs
     0008             (      romdefs.asm):00980         StubFuncsJumpOfs                EQU     DStubFuncsJumpOfs
     0021             (      romdefs.asm):00981         Skip1                           EQU     DSkip1
     008C             (      romdefs.asm):00982         Skip2                           EQU     DSkip2
     0086             (      romdefs.asm):00983         Skip1LD                         EQU     DSkip1LD
     007D             (      romdefs.asm):00984         Skip2TST                        EQU     DSkip2TST
     0000             (      romdefs.asm):00985         CoCoVec167                      EQU     DCoCoVec167
     0000             (      romdefs.asm):00986         CoCoVect16A                     EQU     DCoCoVect16A
     0000             (      romdefs.asm):00987         CoCoVect176                     EQU     DCoCoVect176
     0000             (      romdefs.asm):00988         CoCoVect179                     EQU     DCoCoVect179
     0000             (      romdefs.asm):00989         CoCoVect18B                     EQU     DCoCoVect18B
     0000             (      romdefs.asm):00990         CoCoVect191                     EQU     DCoCoVect191
     0000             (      romdefs.asm):00991         CoCoVect194                     EQU     DCoCoVect194
     0000             (      romdefs.asm):00992         CoCoVect197                     EQU     DCoCoVect197
     0000             (      romdefs.asm):00993         CoCoVect19A                     EQU     DCoCoVect19A
     0000             (      romdefs.asm):00994         CoCoVect1A3                     EQU     DCoCoVect1A3
     0027             (      romdefs.asm):00995         AddrFWareRamTop                 EQU     DAddrFWareRamTop
     0074             (      romdefs.asm):00996         AddrRamTop                      EQU     DAddrRamTop
     0021             (      romdefs.asm):00997         AddrStack                       EQU     DAddrStack
     0123             (      romdefs.asm):00998         BasAddrCmdDisp                  EQU     DBasAddrCmdDisp
     0121             (      romdefs.asm):00999         BasAddrCmdList                  EQU     DBasAddrCmdList
     012D             (      romdefs.asm):01000         BasAddrDskCmdDisp               EQU     DBasAddrDskCmdDisp
     012B             (      romdefs.asm):01001         BasAddrDskCmdList               EQU     DBasAddrDskCmdList
     0132             (      romdefs.asm):01002         BasAddrDskFuncDisp              EQU     DBasAddrDskFuncDisp
     0130             (      romdefs.asm):01003         BasAddrDskFuncList              EQU     DBasAddrDskFuncList
     0128             (      romdefs.asm):01004         BasAddrFuncDisp                 EQU     DBasAddrFuncDisp
     0126             (      romdefs.asm):01005         BasAddrFuncList                 EQU     DBasAddrFuncList
     00A6             (      romdefs.asm):01006         BasAddrSigByte                  EQU     DBasAddrSigByte
     B84E             (      romdefs.asm):01007         BasAOError                      EQU     DBasAOError
     0005             (      romdefs.asm):01008         BasArrayEval                    EQU     DBasArrayEval
     B400             (      romdefs.asm):01009         BasBootBasic                    EQU     DBasBootBasic
     0017             (      romdefs.asm):01010         BasBotStack                     EQU     DBasBotStack
     84DA             (      romdefs.asm):01011         BasBRARun                       EQU     DBasBRARun
     0000             (      romdefs.asm):01012         BasBreakFlag                    EQU     DBasBreakFlag
     03D7             (      romdefs.asm):01013         BasBuffer                       EQU     DBasBuffer
     831C             (      romdefs.asm):01014         BasChkArrSpaceMv                EQU     DBasChkArrSpaceMv
     8331             (      romdefs.asm):01015         BasChkB2Free                    EQU     DBasChkB2Free
     9C76             (      romdefs.asm):01016         BasChkDirect                    EQU     DBasChkDirect
     009F             (      romdefs.asm):01017         BasChrGet                       EQU     DBasChrGet
     00A5             (      romdefs.asm):01018         BasChrGetCurr                   EQU     DBasChrGetCurr
     00D3             (      romdefs.asm):01019         BasCloadMOffs                   EQU     DBasCloadMOffs
     8371             (      romdefs.asm):01020         BasCmdMode                      EQU     DBasCmdMode
     0029             (      romdefs.asm):01021         BasContLine                     EQU     DBasContLine
     0068             (      romdefs.asm):01022         BasCurrentLine                  EQU     DBasCurrentLine
     0001             (      romdefs.asm):01023         BasDelim1                       EQU     DBasDelim1
     0002             (      romdefs.asm):01024         BasDelim2                       EQU     DBasDelim2
     002F             (      romdefs.asm):01025         BasDirectTextPtr                EQU     DBasDirectTextPtr
     0008             (      romdefs.asm):01026         BasDisArraySearch               EQU     DBasDisArraySearch
     B851             (      romdefs.asm):01027         BasDNError                      EQU     DBasDNError
     84ED             (      romdefs.asm):01028         BasDoDispatch                   EQU     DBasDoDispatch
     00D7             (      romdefs.asm):01029         BasEditorLineLen                EQU     DBasEditorLineLen
     82A9             (      romdefs.asm):01030         BasErrorCodeTable               EQU     DBasErrorCodeTable
     009D             (      romdefs.asm):01031         BasExecAddr                     EQU     DBasExecAddr
     8B8D             (      romdefs.asm):01032         BasFCError                      EQU     DBasFCError
     83FF             (      romdefs.asm):01033         BasFindLineNo                   EQU     DBasFindLineNo
     B848             (      romdefs.asm):01034         BasFMError                      EQU     DBasFMError
     0007             (      romdefs.asm):01035         BasGarbageFlag                  EQU     DBasGarbageFlag
     0003             (      romdefs.asm):01036         BasGenCount                     EQU     DBasGenCount
     B7D4             (      romdefs.asm):01037         BasGetDevNo                     EQU     DBasGetDevNo
     869A             (      romdefs.asm):01038         BasGetLineNo                    EQU     DBasGetLineNo
     8DEA             (      romdefs.asm):01039         BasGetStrFirst                  EQU     DBasGetStrFirst
     8D9A             (      romdefs.asm):01040         BasGetStrLenAddr                EQU     DBasGetStrLenAddr
     8027             (      romdefs.asm):01041         BasicCassBitIn                  EQU     DBasicCassBitIn
     8024             (      romdefs.asm):01042         BasicCassByIn                   EQU     DBasicCassByIn
     801E             (      romdefs.asm):01043         BasicCassByOut                  EQU     DBasicCassByOut
     8018             (      romdefs.asm):01044         BasicCassOff                    EQU     DBasicCassOff
     8015             (      romdefs.asm):01045         BasicCassOn                     EQU     DBasicCassOn
     8021             (      romdefs.asm):01046         BasicCassOnRd                   EQU     DBasicCassOnRd
     8009             (      romdefs.asm):01047         BasicCursorB                    EQU     DBasicCursorB
     8000             (      romdefs.asm):01048         BasicHWInit                     EQU     DBasicHWInit
     8012             (      romdefs.asm):01049         BasicJoyIn                      EQU     DBasicJoyIn
     8006             (      romdefs.asm):01050         BasicKbdIn                      EQU     DBasicKbdIn
     800F             (      romdefs.asm):01051         BasicPrintOut                   EQU     DBasicPrintOut
     800C             (      romdefs.asm):01052         BasicScreenOut                  EQU     DBasicScreenOut
     802A             (      romdefs.asm):01053         BasicSerIn                      EQU     DBasicSerIn
     802D             (      romdefs.asm):01054         BasicSerOut                     EQU     DBasicSerOut
     8030             (      romdefs.asm):01055         BasicSetBaud                    EQU     DBasicSetBaud
     8003             (      romdefs.asm):01056         BasicSWInit                     EQU     DBasicSWInit
     801B             (      romdefs.asm):01057         BasicWriteLead                  EQU     DBasicWriteLead
     9C7C             (      romdefs.asm):01058         BasIDError                      EQU     DBasIDError
     0004             (      romdefs.asm):01059         BasIfCount                      EQU     DBasIfCount
     B5D3             (      romdefs.asm):01060         BasInBuffFromX                  EQU     DBasInBuffFromX
     0009             (      romdefs.asm):01061         BasInputFlag                    EQU     DBasInputFlag
     B84B             (      romdefs.asm):01062         BasIOError                      EQU     DBasIOError
     9D3D             (      romdefs.asm):01063         BasIRQVec                       EQU     DBasIRQVec
     015A             (      romdefs.asm):01064         BasJoyVal0                      EQU     DBasJoyVal0
     015B             (      romdefs.asm):01065         BasJoyVal1                      EQU     DBasJoyVal1
     015C             (      romdefs.asm):01066         BasJoyVal2                      EQU     DBasJoyVal2
     015D             (      romdefs.asm):01067         BasJoyVal3                      EQU     DBasJoyVal3
     9DD9             (      romdefs.asm):01068         BasLineInputEntry               EQU     DBasLineInputEntry
     02DC             (      romdefs.asm):01069         BasLinInpBuff                   EQU     DBasLinInpBuff
     02DA             (      romdefs.asm):01070         BasLinInpHead                   EQU     DBasLinInpHead
     8EAA             (      romdefs.asm):01071         BasList                         EQU     DBasList
     0066             (      romdefs.asm):01072         BasListLine                     EQU     DBasListLine
     AA87             (      romdefs.asm):01073         BasLocateScreen                 EQU     DBasLocateScreen
     8D6B             (      romdefs.asm):01074         BasLSError                      EQU     DBasLSError
     A101             (      romdefs.asm):01075         BasNEError                      EQU     DBasNEError
     8417             (      romdefs.asm):01076         BasNew                          EQU     DBasNew
     B631             (      romdefs.asm):01077         BasNOError                      EQU     DBasNOError
     0120             (      romdefs.asm):01078         BasNumCmds                      EQU     DBasNumCmds
     012A             (      romdefs.asm):01079         BasNumDskCmds                   EQU     DBasNumDskCmds
     012F             (      romdefs.asm):01080         BasNumDskFuncs                  EQU     DBasNumDskFuncs
     0125             (      romdefs.asm):01081         BasNumFuncs                     EQU     DBasNumFuncs
     002D             (      romdefs.asm):01082         BasOldInputPtr                  EQU     DBasOldInputPtr
     8342             (      romdefs.asm):01083         BasOMError                      EQU     DBasOMError
     91DB             (      romdefs.asm):01084         BasOVError                      EQU     DBasOVError
     851B             (      romdefs.asm):01085         BasPollKeyboard                 EQU     DBasPollKeyboard
     978E             (      romdefs.asm):01086         BasRandom8                      EQU     DBasRandom8
     0115             (      romdefs.asm):01087         BasRandomSeed                   EQU     DBasRandomSeed
     000A             (      romdefs.asm):01088         BasRelateFlag                   EQU     DBasRelateFlag
     00D1             (      romdefs.asm):01089         BasRenumStart                   EQU     DBasRenumStart
     00D5             (      romdefs.asm):01090         BasRenumStartLine               EQU     DBasRenumStartLine
     00CF             (      romdefs.asm):01091         BasRenumVal                     EQU     DBasRenumVal
     8434             (      romdefs.asm):01092         BasResetStack                   EQU     DBasResetStack
     8C52             (      romdefs.asm):01093         BasResStr                       EQU     DBasResStr
     8CB3             (      romdefs.asm):01094         BasResStr2                      EQU     DBasResStr2
     00AB             (      romdefs.asm):01095         BasRndData                      EQU     DBasRndData
     849F             (      romdefs.asm):01096         BasRun                          EQU     DBasRun
     85EE             (      romdefs.asm):01097         BasSetProgPtrX                  EQU     DBasSetProgPtrX
     B4B2             (      romdefs.asm):01098         BasSignonMess                   EQU     DBasSignonMess
     85E7             (      romdefs.asm):01099         BasSkipLineNo                   EQU     DBasSkipLineNo
     89B4             (      romdefs.asm):01100         BasSNError                      EQU     DBasSNError
     0019             (      romdefs.asm):01101         BasStartProg                    EQU     DBasStartProg
     8C99             (      romdefs.asm):01102         BasSTError                      EQU     DBasSTError
     01A9             (      romdefs.asm):01103         BasStrDescStack                 EQU     DBasStrDescStack
     000B             (      romdefs.asm):01104         BasStrFirstFreeTemp             EQU     DBasStrFirstFreeTemp
     000D             (      romdefs.asm):01105         BasStrLastUsedTemp              EQU     DBasStrLastUsedTemp
     0025             (      romdefs.asm):01106         BasStrUtil                      EQU     DBasStrUtil
     0120             (      romdefs.asm):01107         BasStub0                        EQU     DBasStub0
     012A             (      romdefs.asm):01108         BasStub1                        EQU     DBasStub1
     0134             (      romdefs.asm):01109         BasStub2                        EQU     DBasStub2
     013E             (      romdefs.asm):01110         BasStub3                        EQU     DBasStub3
     0013             (      romdefs.asm):01111         BasTempFPA2                     EQU     DBasTempFPA2
     002B             (      romdefs.asm):01112         BasTempLine                     EQU     DBasTempLine
     000F             (      romdefs.asm):01113         BasTempPtr                      EQU     DBasTempPtr
     0011             (      romdefs.asm):01114         BasTempPtr1                     EQU     DBasTempPtr1
     003F             (      romdefs.asm):01115         BasTempRelateFlag               EQU     DBasTempRelateFlag
     003B             (      romdefs.asm):01116         BasTempVarDesc                  EQU     DBasTempVarDesc
     8882             (      romdefs.asm):01117         BasTMError                      EQU     DBasTMError
     00AF             (      romdefs.asm):01118         BasTronFlag                     EQU     DBasTronFlag
     8605             (      romdefs.asm):01119         BasULError                      EQU     DBasULError
     0076             (      romdefs.asm):01120         BasUnused1                      EQU     DBasUnused1
     00B0             (      romdefs.asm):01121         BasUSRTableAddr                 EQU     DBasUSRTableAddr
     0134             (      romdefs.asm):01122         BasUsrVecNoDisk                 EQU     DBasUsrVecNoDisk
     001D             (      romdefs.asm):01123         BasVarArrayAddr                 EQU     DBasVarArrayAddr
     0052             (      romdefs.asm):01124         BasVarAssign16                  EQU     DBasVarAssign16
     0033             (      romdefs.asm):01125         BasVarDataAddr                  EQU     DBasVarDataAddr
     0031             (      romdefs.asm):01126         BasVarDataLine                  EQU     DBasVarDataLine
     001F             (      romdefs.asm):01127         BasVarEnd                       EQU     DBasVarEnd
     004F             (      romdefs.asm):01128         BasVarFPAcc1                    EQU     DBasVarFPAcc1
     005C             (      romdefs.asm):01129         BasVarFPAcc2                    EQU     DBasVarFPAcc2
     0040             (      romdefs.asm):01130         BasVarFPAcc3                    EQU     DBasVarFPAcc3
     0045             (      romdefs.asm):01131         BasVarFPAcc4                    EQU     DBasVarFPAcc4
     004A             (      romdefs.asm):01132         BasVarFPAcc5                    EQU     DBasVarFPAcc5
     0037             (      romdefs.asm):01133         BasVarLastInUse                 EQU     DBasVarLastInUse
     0039             (      romdefs.asm):01134         BasVarPtrLast                   EQU     DBasVarPtrLast
     001B             (      romdefs.asm):01135         BasVarSimpleAddr                EQU     DBasVarSimpleAddr
     0021             (      romdefs.asm):01136         BasVarStringBase                EQU     DBasVarStringBase
     0023             (      romdefs.asm):01137         BasVarStrTop                    EQU     DBasVarStrTop
     0006             (      romdefs.asm):01138         BasVarType                      EQU     DBasVarType
     841F             (      romdefs.asm):01139         BasVect1                        EQU     DBasVect1
     8424             (      romdefs.asm):01140         BasVect1a                       EQU     DBasVect1a
     83ED             (      romdefs.asm):01141         BasVect2                        EQU     DBasVect2
     93B1             (      romdefs.asm):01142         BasZDError                      EQU     DBasZDError
     01E3             (      romdefs.asm):01143         CasASCIIFlag                    EQU     DCasASCIIFlag
     BAC3             (      romdefs.asm):01144         CasAudioOff                     EQU     DCasAudioOff
     BAEC             (      romdefs.asm):01145         CasAudioOn                      EQU     DCasAudioOn
     0083             (      romdefs.asm):01146         CasBitCount                     EQU     DCasBitCount
     BDA5             (      romdefs.asm):01147         CasBitIn                        EQU     DCasBitIn
     B93E             (      romdefs.asm):01148         CasBlockIn                      EQU     DCasBlockIn
     007D             (      romdefs.asm):01149         CasBlockLen                     EQU     DCasBlockLen
     B999             (      romdefs.asm):01150         CasBlockOut                     EQU     DCasBlockOut
     007C             (      romdefs.asm):01151         CasBlockType                    EQU     DCasBlockType
     BDAD             (      romdefs.asm):01152         CasByteIn                       EQU     DCasByteIn
     BE12             (      romdefs.asm):01153         CasByteOut                      EQU     DCasByteOut
     0080             (      romdefs.asm):01154         CasCkSum                        EQU     DCasCkSum
     B65F             (      romdefs.asm):01155         CasClosFiles                    EQU     DCasClosFiles
     01E5             (      romdefs.asm):01156         CasEntryAddr                    EQU     DCasEntryAddr
     0070             (      romdefs.asm):01157         CasEOFFlag                      EQU     DCasEOFFlag
     B8B3             (      romdefs.asm):01158         CasFindFile                     EQU     DCasFindFile
     01D2             (      romdefs.asm):01159         CasFName                        EQU     DCasFName
     01DA             (      romdefs.asm):01160         CasFNameFound                   EQU     DCasFNameFound
     01D1             (      romdefs.asm):01161         CasFNameLen                     EQU     DCasFNameLen
     01E2             (      romdefs.asm):01162         CasFType                        EQU     DCasFType
     01E4             (      romdefs.asm):01163         CasGapFlag                      EQU     DCasGapFlag
     007A             (      romdefs.asm):01164         CasHeadBuffAddr                 EQU     DCasHeadBuffAddr
     01DA             (      romdefs.asm):01165         CasIOBuff                       EQU     DCasIOBuff
     007E             (      romdefs.asm):01166         CasIOBuffAddr                   EQU     DCasIOBuffAddr
     0079             (      romdefs.asm):01167         CasIOBuffSize                   EQU     DCasIOBuffSize
     0081             (      romdefs.asm):01168         CasIOErrorCode                  EQU     DCasIOErrorCode
     006E             (      romdefs.asm):01169         CasIOFlag                       EQU     DCasIOFlag
     0085             (      romdefs.asm):01170         CasLastSine                     EQU     DCasLastSine
     0090             (      romdefs.asm):01171         CasLeadCount                    EQU     DCasLeadCount
     01E7             (      romdefs.asm):01172         CasLoadAddr                     EQU     DCasLoadAddr
     0093             (      romdefs.asm):01173         CasMax12                        EQU     DCasMax12
     0094             (      romdefs.asm):01174         CasMax24                        EQU     DCasMax24
     0095             (      romdefs.asm):01175         CasMotorDelay                   EQU     DCasMotorDelay
     BDDC             (      romdefs.asm):01176         CasMotorOff                     EQU     DCasMotorOff
     BDCF             (      romdefs.asm):01177         CasMotorOn                      EQU     DCasMotorOn
     0092             (      romdefs.asm):01178         CasPartrt                       EQU     DCasPartrt
     0084             (      romdefs.asm):01179         CasPhaseFlag                    EQU     DCasPhaseFlag
     B748             (      romdefs.asm):01180         CasReadBin                      EQU     DCasReadBin
     B933             (      romdefs.asm):01181         CasReadBlock1                   EQU     DCasReadBlock1
     BDE7             (      romdefs.asm):01182         CasReadLeader                   EQU     DCasReadLeader
     0078             (      romdefs.asm):01183         CasStatus                       EQU     DCasStatus
     0082             (      romdefs.asm):01184         CasTemp                         EQU     DCasTemp
     B6A5             (      romdefs.asm):01185         CasWriteBasic                   EQU     DCasWriteBasic
     991B             (      romdefs.asm):01186         CasWriteBin                     EQU     DCasWriteBin
     B991             (      romdefs.asm):01187         CasWriteBlock1                  EQU     DCasWriteBlock1
     801B             (      romdefs.asm):01188         CasWriteLeader                  EQU     DCasWriteLeader
     943E             (      romdefs.asm):01189         CmdABS                          EQU     DCmdABS
     8A12             (      romdefs.asm):01190         CmdAND                          EQU     DCmdAND
     8DE6             (      romdefs.asm):01191         CmdASC                          EQU     DCmdASC
     9877             (      romdefs.asm):01192         CmdATN                          EQU     DCmdATN
     BADF             (      romdefs.asm):01193         CmdAudio                        EQU     DCmdAudio
     8DD2             (      romdefs.asm):01194         CmdCHRS                         EQU     DCmdCHRS
     B238             (      romdefs.asm):01195         CmdCircle                       EQU     DCmdCircle
     8571             (      romdefs.asm):01196         CmdClear                        EQU     DCmdClear
     B6D5             (      romdefs.asm):01197         CmdCload                        EQU     DCmdCload
     B64D             (      romdefs.asm):01198         CmdClose                        EQU     DCmdClose
     BA60             (      romdefs.asm):01199         CmdCLS                          EQU     DCmdCLS
     A8D4             (      romdefs.asm):01200         CmdColor                        EQU     DCmdColor
     8560             (      romdefs.asm):01201         CmdCont                         EQU     DCmdCont
     97CB             (      romdefs.asm):01202         CmdCOS                          EQU     DCmdCOS
     B683             (      romdefs.asm):01203         CmdCsave                        EQU     DCmdCsave
     8613             (      romdefs.asm):01204         CmdData                         EQU     DCmdData
     9C81             (      romdefs.asm):01205         CmdDef                          EQU     DCmdDef
     9D61             (      romdefs.asm):01206         CmdDelete                       EQU     DCmdDelete
     8A8B             (      romdefs.asm):01207         CmdDim                          EQU     DCmdDim
     933C             (      romdefs.asm):01208         CmdDivide                       EQU     DCmdDivide
     A049             (      romdefs.asm):01209         CmdDload                        EQU     DCmdDload
     B051             (      romdefs.asm):01210         CmdDraw                         EQU     DCmdDraw
     9965             (      romdefs.asm):01211         CmdEdit                         EQU     DCmdEdit
     8532             (      romdefs.asm):01212         CmdEnd                          EQU     DCmdEnd
     B801             (      romdefs.asm):01213         CmdEOF                          EQU     DCmdEOF
     B771             (      romdefs.asm):01214         CmdExec                         EQU     DCmdExec
     9713             (      romdefs.asm):01215         CmdEXP                          EQU     DCmdEXP
     96A0             (      romdefs.asm):01216         CmdExponet                      EQU     DCmdExponet
     9956             (      romdefs.asm):01217         CmdFIX                          EQU     DCmdFIX
     8448             (      romdefs.asm):01218         CmdFor                          EQU     DCmdFor
     AAF0             (      romdefs.asm):01219         CmdGet                          EQU     DCmdGet
     85B9             (      romdefs.asm):01220         CmdGo                           EQU     DCmdGo
     A00E             (      romdefs.asm):01221         CmdHexS                         EQU     DCmdHexS
     8647             (      romdefs.asm):01222         CmdIF                           EQU     DCmdIF
     B797             (      romdefs.asm):01223         CmdInkeyS                       EQU     DCmdInkeyS
     872B             (      romdefs.asm):01224         CmdInput                        EQU     DCmdInput
     9BB4             (      romdefs.asm):01225         CmdInstr                        EQU     DCmdInstr
     9499             (      romdefs.asm):01226         CmdINT                          EQU     DCmdINT
     BB0D             (      romdefs.asm):01227         CmdJoystk                       EQU     DCmdJoystk
     8DF1             (      romdefs.asm):01228         CmdLeftS                        EQU     DCmdLeftS
     8DC7             (      romdefs.asm):01229         CmdLEN                          EQU     DCmdLEN
     86BC             (      romdefs.asm):01230         CmdLet                          EQU     DCmdLet
     A749             (      romdefs.asm):01231         CmdLine                         EQU     DCmdLine
     9DB1             (      romdefs.asm):01232         CmdLineInput                    EQU     DCmdLineInput
     8EAA             (      romdefs.asm):01233         CmdList                         EQU     DCmdList
     8EA4             (      romdefs.asm):01234         CmdLList                        EQU     DCmdLList
     923C             (      romdefs.asm):01235         CmdLOG                          EQU     DCmdLOG
     8C31             (      romdefs.asm):01236         CmdMEM                          EQU     DCmdMEM
     8E15             (      romdefs.asm):01237         CmdMidS                         EQU     DCmdMidS
     9105             (      romdefs.asm):01238         CmdMinus                        EQU     DCmdMinus
     B982             (      romdefs.asm):01239         CmdMotor                        EQU     DCmdMotor
     9275             (      romdefs.asm):01240         CmdMultiply                     EQU     DCmdMultiply
     8415             (      romdefs.asm):01241         CmdNew                          EQU     DCmdNew
     8829             (      romdefs.asm):01242         CmdNext                         EQU     DCmdNext
     8675             (      romdefs.asm):01243         CmdON                           EQU     DCmdON
     B829             (      romdefs.asm):01244         CmdOpen                         EQU     DCmdOpen
     B835             (      romdefs.asm):01245         CmdOpenEntry                    EQU     DCmdOpenEntry
     8A11             (      romdefs.asm):01246         CmdOR                           EQU     DCmdOR
     AC87             (      romdefs.asm):01247         CmdPaint                        EQU     DCmdPaint
     AA19             (      romdefs.asm):01248         CmdPClear                       EQU     DCmdPClear
     A8C0             (      romdefs.asm):01249         CmdPCls                         EQU     DCmdPCls
     AABE             (      romdefs.asm):01250         CmdPcopy                        EQU     DCmdPcopy
     8E96             (      romdefs.asm):01251         CmdPeek                         EQU     DCmdPeek
     ADBD             (      romdefs.asm):01252         CmdPlay                         EQU     DCmdPlay
     910E             (      romdefs.asm):01253         CmdPlus                         EQU     DCmdPlus
     A9AF             (      romdefs.asm):01254         CmdPmode                        EQU     DCmdPmode
     BA45             (      romdefs.asm):01255         CmdPoint                        EQU     DCmdPoint
     8E9D             (      romdefs.asm):01256         CmdPoke                         EQU     DCmdPoke
     9ADE             (      romdefs.asm):01257         CmdPOS                          EQU     DCmdPOS
     A6C7             (      romdefs.asm):01258         CmdPPoint                       EQU     DCmdPPoint
     A6F3             (      romdefs.asm):01259         CmdPReset                       EQU     DCmdPReset
     903D             (      romdefs.asm):01260         CmdPrint                        EQU     DCmdPrint
     A6EF             (      romdefs.asm):01261         CmdPset                         EQU     DCmdPset
     AAF3             (      romdefs.asm):01262         CmdPut                          EQU     DCmdPut
     8777             (      romdefs.asm):01263         CmdRead                         EQU     DCmdRead
     877A             (      romdefs.asm):01264         CmdReadFromX                    EQU     DCmdReadFromX
     8616             (      romdefs.asm):01265         CmdREM                          EQU     DCmdREM
     9DFA             (      romdefs.asm):01266         CmdRenum                        EQU     DCmdRenum
     BA04             (      romdefs.asm):01267         CmdReset                        EQU     DCmdReset
     8514             (      romdefs.asm):01268         CmdRestore                      EQU     DCmdRestore
     85F3             (      romdefs.asm):01269         CmdReturn                       EQU     DCmdReturn
     8E0E             (      romdefs.asm):01270         CmdRightS                       EQU     DCmdRightS
     9772             (      romdefs.asm):01271         CmdRND                          EQU     DCmdRND
     85A5             (      romdefs.asm):01272         CmdRun                          EQU     DCmdRun
     A9FE             (      romdefs.asm):01273         CmdScreen                       EQU     DCmdScreen
     B9D3             (      romdefs.asm):01274         CmdSet                          EQU     DCmdSet
     9425             (      romdefs.asm):01275         CmdSGN                          EQU     DCmdSGN
     97D1             (      romdefs.asm):01276         CmdSIN                          EQU     DCmdSIN
     B81F             (      romdefs.asm):01277         CmdSkipf                        EQU     DCmdSkipf
     BA9B             (      romdefs.asm):01278         CmdSound                        EQU     DCmdSound
     9697             (      romdefs.asm):01279         CmdSQR                          EQU     DCmdSQR
     8539             (      romdefs.asm):01280         CmdStop                         EQU     DCmdStop
     9B84             (      romdefs.asm):01281         CmdStringS                      EQU     DCmdStringS
     8C40             (      romdefs.asm):01282         CmdSTRS                         EQU     DCmdSTRS
     9816             (      romdefs.asm):01283         CmdTAN                          EQU     DCmdTAN
     9D59             (      romdefs.asm):01284         CmdTimer                        EQU     DCmdTimer
     9ADA             (      romdefs.asm):01285         CmdTroff                        EQU     DCmdTroff
     9AD9             (      romdefs.asm):01286         CmdTron                         EQU     DCmdTron
     9D1D             (      romdefs.asm):01287         CmdUSR                          EQU     DCmdUSR
     8E5C             (      romdefs.asm):01288         CmdVAL                          EQU     DCmdVAL
     9AF4             (      romdefs.asm):01289         CmdVarptr                       EQU     DCmdVarptr
     00B3             (      romdefs.asm):01290         GrBackground                    EQU     DGrBackground
     00B9             (      romdefs.asm):01291         GrBytesPerLine                  EQU     DGrBytesPerLine
     BA28             (      romdefs.asm):01292         GrCalcPixelPos                  EQU     DGrCalcPixelPos
     00D0             (      romdefs.asm):01293         GrCircleRadius                  EQU     DGrCircleRadius
     00CB             (      romdefs.asm):01294         GrCircleXCo                     EQU     DGrCircleXCo
     00CD             (      romdefs.asm):01295         GrCircleYCo                     EQU     DGrCircleYCo
     A8C7             (      romdefs.asm):01296         GrClearGrScreen                 EQU     DGrClearGrScreen
     00C1             (      romdefs.asm):01297         GrColourSet                     EQU     DGrColourSet
     00B4             (      romdefs.asm):01298         GrColourTemp                    EQU     DGrColourTemp
     00B5             (      romdefs.asm):01299         GrCurrColour                    EQU     DGrCurrColour
     00B6             (      romdefs.asm):01300         GrCurrPmode                     EQU     DGrCurrPmode
     00BD             (      romdefs.asm):01301         GrCurrX                         EQU     DGrCurrX
     00C7             (      romdefs.asm):01302         GrCurrXCo                       EQU     DGrCurrXCo
     00BF             (      romdefs.asm):01303         GrCurrY                         EQU     DGrCurrY
     00C9             (      romdefs.asm):01304         GrCurrYCo                       EQU     DGrCurrYCo
     00DB             (      romdefs.asm):01305         GrDirtyFlag                     EQU     DGrDirtyFlag
     00BA             (      romdefs.asm):01306         GrDisplayStartAddr              EQU     DGrDisplayStartAddr
     B051             (      romdefs.asm):01307         GrDraw                          EQU     DGrDraw
     00E8             (      romdefs.asm):01308         GrDrawAngle                     EQU     DGrDrawAngle
     00E9             (      romdefs.asm):01309         GrDrawScale                     EQU     DGrDrawScale
     00B2             (      romdefs.asm):01310         GrForeground                    EQU     DGrForeground
     00B7             (      romdefs.asm):01311         GrLastDisplayAddr               EQU     DGrLastDisplayAddr
     00C3             (      romdefs.asm):01312         GrPixelNoX                      EQU     DGrPixelNoX
     00C5             (      romdefs.asm):01313         GrPixelNoY                      EQU     DGrPixelNoY
     00C2             (      romdefs.asm):01314         GrPlotFlag                      EQU     DGrPlotFlag
     AA23             (      romdefs.asm):01315         GrReserveGrRam                  EQU     DGrReserveGrRam
     BA07             (      romdefs.asm):01316         GrResetLRGPixel                 EQU     DGrResetLRGPixel
     AA10             (      romdefs.asm):01317         GrSelectColourSet               EQU     DGrSelectColourSet
     A938             (      romdefs.asm):01318         GrSelectDisplay                 EQU     DGrSelectDisplay
     A9E1             (      romdefs.asm):01319         GrSelectPage                    EQU     DGrSelectPage
     A9A4             (      romdefs.asm):01320         GrSelectVDGColSet               EQU     DGrSelectVDGColSet
     A928             (      romdefs.asm):01321         GrSetColours                    EQU     DGrSetColours
     B9DF             (      romdefs.asm):01322         GrSetLRGPixel                   EQU     DGrSetLRGPixel
     0086             (      romdefs.asm):01323         GrSetResetData                  EQU     DGrSetResetData
     A989             (      romdefs.asm):01324         GrSetVDGMode                    EQU     DGrSetVDGMode
     A99D             (      romdefs.asm):01325         GrSetVDGOffset                  EQU     DGrSetVDGOffset
     00BC             (      romdefs.asm):01326         GrStartPages                    EQU     DGrStartPages
     A006             (      romdefs.asm):01327         IndCasBlockIn                   EQU     DIndCasBlockIn
     A008             (      romdefs.asm):01328         IndCasBlockOut                  EQU     DIndCasBlockOut
     A004             (      romdefs.asm):01329         IndCasOnRead                    EQU     DIndCasOnRead
     A00C             (      romdefs.asm):01330         IndCasWriteLead                 EQU     DIndCasWriteLead
     A002             (      romdefs.asm):01331         IndCharOutput                   EQU     DIndCharOutput
     A00A             (      romdefs.asm):01332         IndJoystickIn                   EQU     DIndJoystickIn
     A000             (      romdefs.asm):01333         IndKeyInput                     EQU     DIndKeyInput
     0072             (      romdefs.asm):01334         IndVecReset                     EQU     DIndVecReset
     008A             (      romdefs.asm):01335         Misc16BitScratch                EQU     DMisc16BitScratch
     A66B             (      romdefs.asm):01336         PixMaskTable2Col                EQU     DPixMaskTable2Col
     A673             (      romdefs.asm):01337         PixMaskTable4Col                EQU     DPixMaskTable4Col
     BD0A             (      romdefs.asm):01338         PrinterCRLF                     EQU     DPrinterCRLF
     BCF5             (      romdefs.asm):01339         PrinterDirOut                   EQU     DPrinterDirOut
     BD1A             (      romdefs.asm):01340         PrinterOut                      EQU     DPrinterOut
     010F             (      romdefs.asm):01341         SecVecFIRQ                      EQU     DSecVecFIRQ
     010C             (      romdefs.asm):01342         SecVecIRQ                       EQU     DSecVecIRQ
     0109             (      romdefs.asm):01343         SecVecNMI                       EQU     DSecVecNMI
     0106             (      romdefs.asm):01344         SecVecSWI                       EQU     DSecVecSWI
     0103             (      romdefs.asm):01345         SecVecSWI2                      EQU     DSecVecSWI2
     0100             (      romdefs.asm):01346         SecVecSWI3                      EQU     DSecVecSWI3
     0000             (      romdefs.asm):01347         SerDLBaud                       EQU     DSerDLBaud
     0000             (      romdefs.asm):01348         SerDLTimeout                    EQU     DSerDLTimeout
     BAA0             (      romdefs.asm):01349         SndBeep                         EQU     DSndBeep
     BAC3             (      romdefs.asm):01350         SndDisable                      EQU     DSndDisable
     00E5             (      romdefs.asm):01351         SndDotNoteScale                 EQU     DSndDotNoteScale
     BAED             (      romdefs.asm):01352         SndDTOAOn                       EQU     DSndDTOAOn
     BAC5             (      romdefs.asm):01353         SndEnable                       EQU     DSndEnable
     008D             (      romdefs.asm):01354         SndLength                       EQU     DSndLength
     00E1             (      romdefs.asm):01355         SndNoteLen                      EQU     DSndNoteLen
     00DE             (      romdefs.asm):01356         SndOctave                       EQU     DSndOctave
     008C             (      romdefs.asm):01357         SndPitch                        EQU     DSndPitch
     AE9A             (      romdefs.asm):01358         SndPlayNote                     EQU     DSndPlayNote
     00E2             (      romdefs.asm):01359         SndTempo                        EQU     DSndTempo
     00E3             (      romdefs.asm):01360         SndTimerPlay                    EQU     DSndTimerPlay
     00DF             (      romdefs.asm):01361         SndVolume                       EQU     DSndVolume
     BB80             (      romdefs.asm):01362         SysBoot64                       EQU     DSysBoot64
     8344             (      romdefs.asm):01363         SysErr                          EQU     DSysErr
     835E             (      romdefs.asm):01364         SysErr2                         EQU     DSysErr2
     BD52             (      romdefs.asm):01365         SysReadJoystick                 EQU     DSysReadJoystick
     B3B4             (      romdefs.asm):01366         SysReset                        EQU     DSysReset
     BAD4             (      romdefs.asm):01367         SysResetDA                      EQU     DSysResetDA
     BD41             (      romdefs.asm):01368         SysSelJoystick                  EQU     DSysSelJoystick
     0112             (      romdefs.asm):01369         SysTimeVal                      EQU     DSysTimeVal
     BAD6             (      romdefs.asm):01370         SysWriteDA                      EQU     DSysWriteDA
     0149             (      romdefs.asm):01371         TextCapsLock                    EQU     DTextCapsLock
     BCA0             (      romdefs.asm):01372         TextClearLine                   EQU     DTextClearLine
     BA77             (      romdefs.asm):01373         TextCls                         EQU     DTextCls
     BA79             (      romdefs.asm):01374         TextClsChar                     EQU     DTextClsChar
     008F             (      romdefs.asm):01375         TextCursFalshCnt                EQU     DTextCursFalshCnt
     006F             (      romdefs.asm):01376         TextDevN                        EQU     DTextDevN
     0035             (      romdefs.asm):01377         TextKbdBuffAddr                 EQU     DTextKbdBuffAddr
     0097             (      romdefs.asm):01378         TextKbdDelay                    EQU     DTextKbdDelay
     0150             (      romdefs.asm):01379         TextKbdRollover                 EQU     DTextKbdRollover
     0087             (      romdefs.asm):01380         TextLastKey                     EQU     DTextLastKey
     B54A             (      romdefs.asm):01381         TextOutChar                     EQU     DTextOutChar
     90A1             (      romdefs.asm):01382         TextOutCRLF                     EQU     DTextOutCRLF
     957A             (      romdefs.asm):01383         TextOutNum16                    EQU     DTextOutNum16
     9582             (      romdefs.asm):01384         TextOutNumFPA0                  EQU     DTextOutNumFPA0
     90F8             (      romdefs.asm):01385         TextOutQuestion                 EQU     DTextOutQuestion
     90F5             (      romdefs.asm):01386         TextOutSpace                    EQU     DTextOutSpace
     90E5             (      romdefs.asm):01387         TextOutString                   EQU     DTextOutString
     0148             (      romdefs.asm):01388         TextPrnAutoCRLF                 EQU     DTextPrnAutoCRLF
     0099             (      romdefs.asm):01389         TextPrnCommaW                   EQU     DTextPrnCommaW
     009C             (      romdefs.asm):01390         TextPrnCurrCol                  EQU     DTextPrnCurrCol
     014A             (      romdefs.asm):01391         TextPrnEOLCnt                   EQU     DTextPrnEOLCnt
     014B             (      romdefs.asm):01392         TextPrnEOLSeq                   EQU     DTextPrnEOLSeq
     009A             (      romdefs.asm):01393         TextPrnLastComma                EQU     DTextPrnLastComma
     009B             (      romdefs.asm):01394         TextPrnLineW                    EQU     DTextPrnLineW
     03FF             (      romdefs.asm):01395         TextPrnSelFlag                  EQU     DTextPrnSelFlag
     A93A             (      romdefs.asm):01396         TextResetVDU                    EQU     DTextResetVDU
     BBE5             (      romdefs.asm):01397         TextScanKbd                     EQU     DTextScanKbd
     FF07             (      romdefs.asm):01398         TextSerBaudRate                 EQU     DTextSerBaudRate
     03FD             (      romdefs.asm):01399         TextSerEOLDelay                 EQU     DTextSerEOLDelay
     BBB5             (      romdefs.asm):01400         TextUpdateCurs                  EQU     DTextUpdateCurs
     006A             (      romdefs.asm):01401         TextVDUCommaW                   EQU     DTextVDUCommaW
     006C             (      romdefs.asm):01402         TextVDUCurrCol                  EQU     DTextVDUCurrCol
     0088             (      romdefs.asm):01403         TextVDUCursAddr                 EQU     DTextVDUCursAddr
     006B             (      romdefs.asm):01404         TextVDULastComma                EQU     DTextVDULastComma
     006D             (      romdefs.asm):01405         TextVDULineW                    EQU     DTextVDULineW
     BCAB             (      romdefs.asm):01406         TextVDUOut                      EQU     DTextVDUOut
     852B             (      romdefs.asm):01407         TextWaitKey                     EQU     DTextWaitKey
     A0EA             (      romdefs.asm):01408         TextWaitKeyCurs                 EQU     DTextWaitKeyCurs
     B505             (      romdefs.asm):01409         TextWaitKeyCurs2                EQU     DTextWaitKeyCurs2
     B7CC             (      romdefs.asm):01410         UtilCopyBXtoU                   EQU     DUtilCopyBXtoU
     8C35             (      romdefs.asm):01411         VarAssign16Bit                  EQU     DVarAssign16Bit
     8C37             (      romdefs.asm):01412         VarAssign16Bit2                 EQU     DVarAssign16Bit2
     9C3E             (      romdefs.asm):01413         VarAssign16BitB                 EQU     DVarAssign16BitB
     8C36             (      romdefs.asm):01414         VarAssign8Bit                   EQU     DVarAssign8Bit
     89AC             (      romdefs.asm):01415         VarCKChar                       EQU     DVarCKChar
     89A4             (      romdefs.asm):01416         VarCKClBrac                     EQU     DVarCKClBrac
     89AA             (      romdefs.asm):01417         VarCKComma                      EQU     DVarCKComma
     89A7             (      romdefs.asm):01418         VarCKOpBrac                     EQU     DVarCKOpBrac
     8D9F             (      romdefs.asm):01419         VarDelVar                       EQU     DVarDelVar
     8CD7             (      romdefs.asm):01420         VarGarbageCollect               EQU     DVarGarbageCollect
     8E83             (      romdefs.asm):01421         VarGet16Bit                     EQU     DVarGet16Bit
     8E51             (      romdefs.asm):01422         VarGet8Bit                      EQU     DVarGet8Bit
     8E7E             (      romdefs.asm):01423         VarGetComma8                    EQU     DVarGetComma8
     8877             (      romdefs.asm):01424         VarGetExpr                      EQU     DVarGetExpr
     8874             (      romdefs.asm):01425         VarGetExprCC                    EQU     DVarGetExprCC
     8887             (      romdefs.asm):01426         VarGetStr                       EQU     DVarGetStr
     8B29             (      romdefs.asm):01427         VarGetUsr                       EQU     DVarGetUsr
     8A94             (      romdefs.asm):01428         VarGetVar                       EQU     DVarGetVar
     9165             (      romdefs.asm):01429         VarNormFPA0                     EQU     DVarNormFPA0
     01A0             (      romdefs.asm):01430         VectAccessScreen                EQU     DVectAccessScreen
     019D             (      romdefs.asm):01431         VectAssignStr                   EQU     DVectAssignStr
     015E             (      romdefs.asm):01432         VectBase                        EQU     DVectBase
     0188             (      romdefs.asm):01433         VectCheckEOF                    EQU     DVectCheckEOF
     017F             (      romdefs.asm):01434         VectCheckKeys                   EQU     DVectCheckKeys
     0173             (      romdefs.asm):01435         VectCloseAllFiles               EQU     DVectCloseAllFiles
     0176             (      romdefs.asm):01436         VectCloseFile                   EQU     DVectCloseFile
     0185             (      romdefs.asm):01437         VectCloseFileCmd                EQU     DVectCloseFileCmd
     0179             (      romdefs.asm):01438         VectCmdInterp                   EQU     DVectCmdInterp
     01A6             (      romdefs.asm):01439         VectDeTokenize                  EQU     DVectDeTokenize
     0164             (      romdefs.asm):01440         VectDevInit                     EQU     DVectDevInit
     0161             (      romdefs.asm):01441         VectDevNo                       EQU     DVectDevNo
     015E             (      romdefs.asm):01442         VectDevOpen                     EQU     DVectDevOpen
     018B             (      romdefs.asm):01443         VectEvaluateExpr                EQU     DVectEvaluateExpr
     019A             (      romdefs.asm):01444         VectGetNextCmd                  EQU     DVectGetNextCmd
     016A             (      romdefs.asm):01445         VectInChar                      EQU     DVectInChar
     016D             (      romdefs.asm):01446         VectInputFile                   EQU     DVectInputFile
     0182             (      romdefs.asm):01447         VectLineInputFile               EQU     DVectLineInputFile
     0167             (      romdefs.asm):01448         VectOutChar                     EQU     DVectOutChar
     0170             (      romdefs.asm):01449         VectOutputFile                  EQU     DVectOutputFile
     017C             (      romdefs.asm):01450         VectReReqestIn                  EQU     DVectReReqestIn
     0197             (      romdefs.asm):01451         VectResetBasMem                 EQU     DVectResetBasMem
     0194             (      romdefs.asm):01452         VectRunLink                     EQU     DVectRunLink
     0191             (      romdefs.asm):01453         VectSysError                    EQU     DVectSysError
     01A3             (      romdefs.asm):01454         VectTokenize                    EQU     DVectTokenize
     018E             (      romdefs.asm):01455         VectUserError                   EQU     DVectUserError
     B44F             (      romdefs.asm):01456         WarmStart                       EQU     DWarmStart
     0071             (      romdefs.asm):01457         WarmStartFlag                   EQU     DWarmStartFlag
                      (      romdefs.asm):01458         
                      (      romdefs.asm):01459                                 ENDC
                      (      romdefs.asm):01460         
                      (      romdefs.asm):01461                                 ifdef Tandy
                      (      romdefs.asm):01462         
0000                  (      romdefs.asm):01463         StubResWordsOfs                 EQU     CStubResWordsOfs
0000                  (      romdefs.asm):01464         StubResLookupOfs                EQU     CStubResLookupOfs
0000                  (      romdefs.asm):01465         StubResJumpOfs                  EQU     CStubResJumpOfs
0000                  (      romdefs.asm):01466         StubFuncsOfs                    EQU     CStubFuncsOfs
0000                  (      romdefs.asm):01467         StubFuncsLookupOfs              EQU     CStubFuncsLookupOfs
0000                  (      romdefs.asm):01468         StubFuncsJumpOfs                EQU     CStubFuncsJumpOfs
0000                  (      romdefs.asm):01469         Skip1                           EQU     CSkip1
0000                  (      romdefs.asm):01470         Skip2                           EQU     CSkip2
0000                  (      romdefs.asm):01471         Skip1LD                         EQU     CSkip1LD
0000                  (      romdefs.asm):01472         Skip2TST                        EQU     CSkip2TST
0000                  (      romdefs.asm):01473         CoCoVec167                      EQU     CCoCoVec167
0000                  (      romdefs.asm):01474         CoCoVect16A                     EQU     CCoCoVect16A
0000                  (      romdefs.asm):01475         CoCoVect176                     EQU     CCoCoVect176
0000                  (      romdefs.asm):01476         CoCoVect179                     EQU     CCoCoVect179
0000                  (      romdefs.asm):01477         CoCoVect18B                     EQU     CCoCoVect18B
0000                  (      romdefs.asm):01478         CoCoVect191                     EQU     CCoCoVect191
0000                  (      romdefs.asm):01479         CoCoVect194                     EQU     CCoCoVect194
0000                  (      romdefs.asm):01480         CoCoVect197                     EQU     CCoCoVect197
0000                  (      romdefs.asm):01481         CoCoVect19A                     EQU     CCoCoVect19A
0000                  (      romdefs.asm):01482         CoCoVect1A3                     EQU     CCoCoVect1A3
0000                  (      romdefs.asm):01483         AddrFWareRamTop                 EQU     CAddrFWareRamTop
0000                  (      romdefs.asm):01484         AddrRamTop                      EQU     CAddrRamTop
0000                  (      romdefs.asm):01485         AddrStack                       EQU     CAddrStack
0000                  (      romdefs.asm):01486         BasAddrCmdDisp                  EQU     CBasAddrCmdDisp
0000                  (      romdefs.asm):01487         BasAddrCmdList                  EQU     CBasAddrCmdList
0000                  (      romdefs.asm):01488         BasAddrDskCmdDisp               EQU     CBasAddrDskCmdDisp
0000                  (      romdefs.asm):01489         BasAddrDskCmdList               EQU     CBasAddrDskCmdList
0000                  (      romdefs.asm):01490         BasAddrDskFuncDisp              EQU     CBasAddrDskFuncDisp
0000                  (      romdefs.asm):01491         BasAddrDskFuncList              EQU     CBasAddrDskFuncList
0000                  (      romdefs.asm):01492         BasAddrFuncDisp                 EQU     CBasAddrFuncDisp
0000                  (      romdefs.asm):01493         BasAddrFuncList                 EQU     CBasAddrFuncList
0000                  (      romdefs.asm):01494         BasAddrSigByte                  EQU     CBasAddrSigByte
0000                  (      romdefs.asm):01495         BasAOError                      EQU     CBasAOError
0000                  (      romdefs.asm):01496         BasArrayEval                    EQU     CBasArrayEval
0000                  (      romdefs.asm):01497         BasBootBasic                    EQU     CBasBootBasic
0000                  (      romdefs.asm):01498         BasBotStack                     EQU     CBasBotStack
0000                  (      romdefs.asm):01499         BasBRARun                       EQU     CBasBRARun
0000                  (      romdefs.asm):01500         BasBreakFlag                    EQU     CBasBreakFlag
0000                  (      romdefs.asm):01501         BasBuffer                       EQU     CBasBuffer
0000                  (      romdefs.asm):01502         BasChkArrSpaceMv                EQU     CBasChkArrSpaceMv
0000                  (      romdefs.asm):01503         BasChkB2Free                    EQU     CBasChkB2Free
0000                  (      romdefs.asm):01504         BasChkDirect                    EQU     CBasChkDirect
0000                  (      romdefs.asm):01505         BasChrGet                       EQU     CBasChrGet
0000                  (      romdefs.asm):01506         BasChrGetCurr                   EQU     CBasChrGetCurr
0000                  (      romdefs.asm):01507         BasCloadMOffs                   EQU     CBasCloadMOffs
0000                  (      romdefs.asm):01508         BasCmdMode                      EQU     CBasCmdMode
0000                  (      romdefs.asm):01509         BasContLine                     EQU     CBasContLine
0000                  (      romdefs.asm):01510         BasCurrentLine                  EQU     CBasCurrentLine
0000                  (      romdefs.asm):01511         BasDelim1                       EQU     CBasDelim1
0000                  (      romdefs.asm):01512         BasDelim2                       EQU     CBasDelim2
0000                  (      romdefs.asm):01513         BasDirectTextPtr                EQU     CBasDirectTextPtr
0000                  (      romdefs.asm):01514         BasDisArraySearch               EQU     CBasDisArraySearch
0000                  (      romdefs.asm):01515         BasDNError                      EQU     CBasDNError
0000                  (      romdefs.asm):01516         BasDoDispatch                   EQU     CBasDoDispatch
0000                  (      romdefs.asm):01517         BasEditorLineLen                EQU     CBasEditorLineLen
0000                  (      romdefs.asm):01518         BasErrorCodeTable               EQU     CBasErrorCodeTable
0000                  (      romdefs.asm):01519         BasExecAddr                     EQU     CBasExecAddr
0000                  (      romdefs.asm):01520         BasFCError                      EQU     CBasFCError
0000                  (      romdefs.asm):01521         BasFindLineNo                   EQU     CBasFindLineNo
0000                  (      romdefs.asm):01522         BasFMError                      EQU     CBasFMError
0000                  (      romdefs.asm):01523         BasGarbageFlag                  EQU     CBasGarbageFlag
0000                  (      romdefs.asm):01524         BasGenCount                     EQU     CBasGenCount
0000                  (      romdefs.asm):01525         BasGetDevNo                     EQU     CBasGetDevNo
0000                  (      romdefs.asm):01526         BasGetLineNo                    EQU     CBasGetLineNo
0000                  (      romdefs.asm):01527         BasGetStrFirst                  EQU     CBasGetStrFirst
0000                  (      romdefs.asm):01528         BasGetStrLenAddr                EQU     CBasGetStrLenAddr
0000                  (      romdefs.asm):01529         BasicCassBitIn                  EQU     CBasicCassBitIn
0000                  (      romdefs.asm):01530         BasicCassByIn                   EQU     CBasicCassByIn
0000                  (      romdefs.asm):01531         BasicCassByOut                  EQU     CBasicCassByOut
0000                  (      romdefs.asm):01532         BasicCassOff                    EQU     CBasicCassOff
0000                  (      romdefs.asm):01533         BasicCassOn                     EQU     CBasicCassOn
0000                  (      romdefs.asm):01534         BasicCassOnRd                   EQU     CBasicCassOnRd
0000                  (      romdefs.asm):01535         BasicCursorB                    EQU     CBasicCursorB
0000                  (      romdefs.asm):01536         BasicHWInit                     EQU     CBasicHWInit
0000                  (      romdefs.asm):01537         BasicJoyIn                      EQU     CBasicJoyIn
0000                  (      romdefs.asm):01538         BasicKbdIn                      EQU     CBasicKbdIn
0000                  (      romdefs.asm):01539         BasicPrintOut                   EQU     CBasicPrintOut
0000                  (      romdefs.asm):01540         BasicScreenOut                  EQU     CBasicScreenOut
0000                  (      romdefs.asm):01541         BasicSerIn                      EQU     CBasicSerIn
0000                  (      romdefs.asm):01542         BasicSerOut                     EQU     CBasicSerOut
0000                  (      romdefs.asm):01543         BasicSetBaud                    EQU     CBasicSetBaud
0000                  (      romdefs.asm):01544         BasicSWInit                     EQU     CBasicSWInit
0000                  (      romdefs.asm):01545         BasicWriteLead                  EQU     CBasicWriteLead
0000                  (      romdefs.asm):01546         BasIDError                      EQU     CBasIDError
0000                  (      romdefs.asm):01547         BasIfCount                      EQU     CBasIfCount
0000                  (      romdefs.asm):01548         BasInBuffFromX                  EQU     CBasInBuffFromX
0000                  (      romdefs.asm):01549         BasInputFlag                    EQU     CBasInputFlag
0000                  (      romdefs.asm):01550         BasIOError                      EQU     CBasIOError
0000                  (      romdefs.asm):01551         BasIRQVec                       EQU     CBasIRQVec
0000                  (      romdefs.asm):01552         BasJoyVal0                      EQU     CBasJoyVal0
0000                  (      romdefs.asm):01553         BasJoyVal1                      EQU     CBasJoyVal1
0000                  (      romdefs.asm):01554         BasJoyVal2                      EQU     CBasJoyVal2
0000                  (      romdefs.asm):01555         BasJoyVal3                      EQU     CBasJoyVal3
0000                  (      romdefs.asm):01556         BasLineInputEntry               EQU     CBasLineInputEntry
0000                  (      romdefs.asm):01557         BasLinInpBuff                   EQU     CBasLinInpBuff
0000                  (      romdefs.asm):01558         BasLinInpHead                   EQU     CBasLinInpHead
0000                  (      romdefs.asm):01559         BasList                         EQU     CBasList
0000                  (      romdefs.asm):01560         BasListLine                     EQU     CBasListLine
0000                  (      romdefs.asm):01561         BasLocateScreen                 EQU     CBasLocateScreen
0000                  (      romdefs.asm):01562         BasLSError                      EQU     CBasLSError
0000                  (      romdefs.asm):01563         BasNEError                      EQU     CBasNEError
0000                  (      romdefs.asm):01564         BasNew                          EQU     CBasNew
0000                  (      romdefs.asm):01565         BasNOError                      EQU     CBasNOError
0000                  (      romdefs.asm):01566         BasNumCmds                      EQU     CBasNumCmds
0000                  (      romdefs.asm):01567         BasNumDskCmds                   EQU     CBasNumDskCmds
0000                  (      romdefs.asm):01568         BasNumDskFuncs                  EQU     CBasNumDskFuncs
0000                  (      romdefs.asm):01569         BasNumFuncs                     EQU     CBasNumFuncs
0000                  (      romdefs.asm):01570         BasOldInputPtr                  EQU     CBasOldInputPtr
0000                  (      romdefs.asm):01571         BasOMError                      EQU     CBasOMError
0000                  (      romdefs.asm):01572         BasOVError                      EQU     CBasOVError
0000                  (      romdefs.asm):01573         BasPollKeyboard                 EQU     CBasPollKeyboard
0000                  (      romdefs.asm):01574         BasRandom8                      EQU     CBasRandom8
0000                  (      romdefs.asm):01575         BasRandomSeed                   EQU     CBasRandomSeed
0000                  (      romdefs.asm):01576         BasRelateFlag                   EQU     CBasRelateFlag
0000                  (      romdefs.asm):01577         BasRenumStart                   EQU     CBasRenumStart
0000                  (      romdefs.asm):01578         BasRenumStartLine               EQU     CBasRenumStartLine
0000                  (      romdefs.asm):01579         BasRenumVal                     EQU     CBasRenumVal
0000                  (      romdefs.asm):01580         BasResetStack                   EQU     CBasResetStack
0000                  (      romdefs.asm):01581         BasResStr                       EQU     CBasResStr
0000                  (      romdefs.asm):01582         BasResStr2                      EQU     CBasResStr2
0000                  (      romdefs.asm):01583         BasRndData                      EQU     CBasRndData
0000                  (      romdefs.asm):01584         BasRun                          EQU     CBasRun
0000                  (      romdefs.asm):01585         BasSetProgPtrX                  EQU     CBasSetProgPtrX
0000                  (      romdefs.asm):01586         BasSignonMess                   EQU     CBasSignonMess
0000                  (      romdefs.asm):01587         BasSkipLineNo                   EQU     CBasSkipLineNo
0000                  (      romdefs.asm):01588         BasSNError                      EQU     CBasSNError
0000                  (      romdefs.asm):01589         BasStartProg                    EQU     CBasStartProg
0000                  (      romdefs.asm):01590         BasSTError                      EQU     CBasSTError
0000                  (      romdefs.asm):01591         BasStrDescStack                 EQU     CBasStrDescStack
0000                  (      romdefs.asm):01592         BasStrFirstFreeTemp             EQU     CBasStrFirstFreeTemp
0000                  (      romdefs.asm):01593         BasStrLastUsedTemp              EQU     CBasStrLastUsedTemp
0000                  (      romdefs.asm):01594         BasStrUtil                      EQU     CBasStrUtil
0000                  (      romdefs.asm):01595         BasStub0                        EQU     CBasStub0
0000                  (      romdefs.asm):01596         BasStub1                        EQU     CBasStub1
0000                  (      romdefs.asm):01597         BasStub2                        EQU     CBasStub2
0000                  (      romdefs.asm):01598         BasStub3                        EQU     CBasStub3
0000                  (      romdefs.asm):01599         BasTempFPA2                     EQU     CBasTempFPA2
0000                  (      romdefs.asm):01600         BasTempLine                     EQU     CBasTempLine
0000                  (      romdefs.asm):01601         BasTempPtr                      EQU     CBasTempPtr
0000                  (      romdefs.asm):01602         BasTempPtr1                     EQU     CBasTempPtr1
0000                  (      romdefs.asm):01603         BasTempRelateFlag               EQU     CBasTempRelateFlag
0000                  (      romdefs.asm):01604         BasTempVarDesc                  EQU     CBasTempVarDesc
0000                  (      romdefs.asm):01605         BasTMError                      EQU     CBasTMError
0000                  (      romdefs.asm):01606         BasTronFlag                     EQU     CBasTronFlag
0000                  (      romdefs.asm):01607         BasULError                      EQU     CBasULError
0000                  (      romdefs.asm):01608         BasUnused1                      EQU     CBasUnused1
0000                  (      romdefs.asm):01609         BasUSRTableAddr                 EQU     CBasUSRTableAddr
0000                  (      romdefs.asm):01610         BasUsrVecNoDisk                 EQU     CBasUsrVecNoDisk
0000                  (      romdefs.asm):01611         BasVarArrayAddr                 EQU     CBasVarArrayAddr
0000                  (      romdefs.asm):01612         BasVarAssign16                  EQU     CBasVarAssign16
0000                  (      romdefs.asm):01613         BasVarDataAddr                  EQU     CBasVarDataAddr
0000                  (      romdefs.asm):01614         BasVarDataLine                  EQU     CBasVarDataLine
0000                  (      romdefs.asm):01615         BasVarEnd                       EQU     CBasVarEnd
0000                  (      romdefs.asm):01616         BasVarFPAcc1                    EQU     CBasVarFPAcc1
0000                  (      romdefs.asm):01617         BasVarFPAcc2                    EQU     CBasVarFPAcc2
0000                  (      romdefs.asm):01618         BasVarFPAcc3                    EQU     CBasVarFPAcc3
0000                  (      romdefs.asm):01619         BasVarFPAcc4                    EQU     CBasVarFPAcc4
0000                  (      romdefs.asm):01620         BasVarFPAcc5                    EQU     CBasVarFPAcc5
0000                  (      romdefs.asm):01621         BasVarLastInUse                 EQU     CBasVarLastInUse
0000                  (      romdefs.asm):01622         BasVarPtrLast                   EQU     CBasVarPtrLast
0000                  (      romdefs.asm):01623         BasVarSimpleAddr                EQU     CBasVarSimpleAddr
0000                  (      romdefs.asm):01624         BasVarStringBase                EQU     CBasVarStringBase
0000                  (      romdefs.asm):01625         BasVarStrTop                    EQU     CBasVarStrTop
0000                  (      romdefs.asm):01626         BasVarType                      EQU     CBasVarType
0000                  (      romdefs.asm):01627         BasVect1                        EQU     CBasVect1
0000                  (      romdefs.asm):01628         BasVect1a                       EQU     CBasVect1a
0000                  (      romdefs.asm):01629         BasVect2                        EQU     CBasVect2
0000                  (      romdefs.asm):01630         BasZDError                      EQU     CBasZDError
0000                  (      romdefs.asm):01631         CasASCIIFlag                    EQU     CCasASCIIFlag
0000                  (      romdefs.asm):01632         CasAudioOff                     EQU     CCasAudioOff
0000                  (      romdefs.asm):01633         CasAudioOn                      EQU     CCasAudioOn
0000                  (      romdefs.asm):01634         CasBitCount                     EQU     CCasBitCount
0000                  (      romdefs.asm):01635         CasBitIn                        EQU     CCasBitIn
0000                  (      romdefs.asm):01636         CasBlockIn                      EQU     CCasBlockIn
0000                  (      romdefs.asm):01637         CasBlockLen                     EQU     CCasBlockLen
0000                  (      romdefs.asm):01638         CasBlockOut                     EQU     CCasBlockOut
0000                  (      romdefs.asm):01639         CasBlockType                    EQU     CCasBlockType
0000                  (      romdefs.asm):01640         CasByteIn                       EQU     CCasByteIn
0000                  (      romdefs.asm):01641         CasByteOut                      EQU     CCasByteOut
0000                  (      romdefs.asm):01642         CasCkSum                        EQU     CCasCkSum
0000                  (      romdefs.asm):01643         CasClosFiles                    EQU     CCasClosFiles
0000                  (      romdefs.asm):01644         CasEntryAddr                    EQU     CCasEntryAddr
0000                  (      romdefs.asm):01645         CasEOFFlag                      EQU     CCasEOFFlag
0000                  (      romdefs.asm):01646         CasFindFile                     EQU     CCasFindFile
0000                  (      romdefs.asm):01647         CasFName                        EQU     CCasFName
0000                  (      romdefs.asm):01648         CasFNameFound                   EQU     CCasFNameFound
0000                  (      romdefs.asm):01649         CasFNameLen                     EQU     CCasFNameLen
0000                  (      romdefs.asm):01650         CasFType                        EQU     CCasFType
0000                  (      romdefs.asm):01651         CasGapFlag                      EQU     CCasGapFlag
0000                  (      romdefs.asm):01652         CasHeadBuffAddr                 EQU     CCasHeadBuffAddr
0000                  (      romdefs.asm):01653         CasIOBuff                       EQU     CCasIOBuff
0000                  (      romdefs.asm):01654         CasIOBuffAddr                   EQU     CCasIOBuffAddr
0000                  (      romdefs.asm):01655         CasIOBuffSize                   EQU     CCasIOBuffSize
0000                  (      romdefs.asm):01656         CasIOErrorCode                  EQU     CCasIOErrorCode
0000                  (      romdefs.asm):01657         CasIOFlag                       EQU     CCasIOFlag
0000                  (      romdefs.asm):01658         CasLastSine                     EQU     CCasLastSine
0000                  (      romdefs.asm):01659         CasLeadCount                    EQU     CCasLeadCount
0000                  (      romdefs.asm):01660         CasLoadAddr                     EQU     CCasLoadAddr
0000                  (      romdefs.asm):01661         CasMax12                        EQU     CCasMax12
0000                  (      romdefs.asm):01662         CasMax24                        EQU     CCasMax24
0000                  (      romdefs.asm):01663         CasMotorDelay                   EQU     CCasMotorDelay
0000                  (      romdefs.asm):01664         CasMotorOff                     EQU     CCasMotorOff
0000                  (      romdefs.asm):01665         CasMotorOn                      EQU     CCasMotorOn
0000                  (      romdefs.asm):01666         CasPartrt                       EQU     CCasPartrt
0000                  (      romdefs.asm):01667         CasPhaseFlag                    EQU     CCasPhaseFlag
0000                  (      romdefs.asm):01668         CasReadBin                      EQU     CCasReadBin
0000                  (      romdefs.asm):01669         CasReadBlock1                   EQU     CCasReadBlock1
0000                  (      romdefs.asm):01670         CasReadLeader                   EQU     CCasReadLeader
0000                  (      romdefs.asm):01671         CasStatus                       EQU     CCasStatus
0000                  (      romdefs.asm):01672         CasTemp                         EQU     CCasTemp
0000                  (      romdefs.asm):01673         CasWriteBasic                   EQU     CCasWriteBasic
0000                  (      romdefs.asm):01674         CasWriteBin                     EQU     CCasWriteBin
0000                  (      romdefs.asm):01675         CasWriteBlock1                  EQU     CCasWriteBlock1
0000                  (      romdefs.asm):01676         CasWriteLeader                  EQU     CCasWriteLeader
0000                  (      romdefs.asm):01677         CmdABS                          EQU     CCmdABS
0000                  (      romdefs.asm):01678         CmdAND                          EQU     CCmdAND
0000                  (      romdefs.asm):01679         CmdASC                          EQU     CCmdASC
0000                  (      romdefs.asm):01680         CmdATN                          EQU     CCmdATN
0000                  (      romdefs.asm):01681         CmdAudio                        EQU     CCmdAudio
0000                  (      romdefs.asm):01682         CmdCHRS                         EQU     CCmdCHRS
0000                  (      romdefs.asm):01683         CmdCircle                       EQU     CCmdCircle
0000                  (      romdefs.asm):01684         CmdClear                        EQU     CCmdClear
0000                  (      romdefs.asm):01685         CmdCload                        EQU     CCmdCload
0000                  (      romdefs.asm):01686         CmdClose                        EQU     CCmdClose
0000                  (      romdefs.asm):01687         CmdCLS                          EQU     CCmdCLS
0000                  (      romdefs.asm):01688         CmdColor                        EQU     CCmdColor
0000                  (      romdefs.asm):01689         CmdCont                         EQU     CCmdCont
0000                  (      romdefs.asm):01690         CmdCOS                          EQU     CCmdCOS
0000                  (      romdefs.asm):01691         CmdCsave                        EQU     CCmdCsave
0000                  (      romdefs.asm):01692         CmdData                         EQU     CCmdData
0000                  (      romdefs.asm):01693         CmdDef                          EQU     CCmdDef
0000                  (      romdefs.asm):01694         CmdDelete                       EQU     CCmdDelete
0000                  (      romdefs.asm):01695         CmdDim                          EQU     CCmdDim
0000                  (      romdefs.asm):01696         CmdDivide                       EQU     CCmdDivide
0000                  (      romdefs.asm):01697         CmdDload                        EQU     CCmdDload
0000                  (      romdefs.asm):01698         CmdDraw                         EQU     CCmdDraw
0000                  (      romdefs.asm):01699         CmdEdit                         EQU     CCmdEdit
0000                  (      romdefs.asm):01700         CmdEnd                          EQU     CCmdEnd
0000                  (      romdefs.asm):01701         CmdEOF                          EQU     CCmdEOF
0000                  (      romdefs.asm):01702         CmdExec                         EQU     CCmdExec
0000                  (      romdefs.asm):01703         CmdEXP                          EQU     CCmdEXP
0000                  (      romdefs.asm):01704         CmdExponet                      EQU     CCmdExponet
0000                  (      romdefs.asm):01705         CmdFIX                          EQU     CCmdFIX
0000                  (      romdefs.asm):01706         CmdFor                          EQU     CCmdFor
0000                  (      romdefs.asm):01707         CmdGet                          EQU     CCmdGet
0000                  (      romdefs.asm):01708         CmdGo                           EQU     CCmdGo
0000                  (      romdefs.asm):01709         CmdHexS                         EQU     CCmdHexS
0000                  (      romdefs.asm):01710         CmdIF                           EQU     CCmdIF
0000                  (      romdefs.asm):01711         CmdInkeyS                       EQU     CCmdInkeyS
0000                  (      romdefs.asm):01712         CmdInput                        EQU     CCmdInput
0000                  (      romdefs.asm):01713         CmdInstr                        EQU     CCmdInstr
0000                  (      romdefs.asm):01714         CmdINT                          EQU     CCmdINT
0000                  (      romdefs.asm):01715         CmdJoystk                       EQU     CCmdJoystk
0000                  (      romdefs.asm):01716         CmdLeftS                        EQU     CCmdLeftS
0000                  (      romdefs.asm):01717         CmdLEN                          EQU     CCmdLEN
0000                  (      romdefs.asm):01718         CmdLet                          EQU     CCmdLet
0000                  (      romdefs.asm):01719         CmdLine                         EQU     CCmdLine
0000                  (      romdefs.asm):01720         CmdLineInput                    EQU     CCmdLineInput
0000                  (      romdefs.asm):01721         CmdList                         EQU     CCmdList
0000                  (      romdefs.asm):01722         CmdLList                        EQU     CCmdLList
0000                  (      romdefs.asm):01723         CmdLOG                          EQU     CCmdLOG
0000                  (      romdefs.asm):01724         CmdMEM                          EQU     CCmdMEM
0000                  (      romdefs.asm):01725         CmdMidS                         EQU     CCmdMidS
0000                  (      romdefs.asm):01726         CmdMinus                        EQU     CCmdMinus
0000                  (      romdefs.asm):01727         CmdMotor                        EQU     CCmdMotor
0000                  (      romdefs.asm):01728         CmdMultiply                     EQU     CCmdMultiply
0000                  (      romdefs.asm):01729         CmdNew                          EQU     CCmdNew
0000                  (      romdefs.asm):01730         CmdNext                         EQU     CCmdNext
0000                  (      romdefs.asm):01731         CmdON                           EQU     CCmdON
0000                  (      romdefs.asm):01732         CmdOpen                         EQU     CCmdOpen
0000                  (      romdefs.asm):01733         CmdOpenEntry                    EQU     CCmdOpenEntry
0000                  (      romdefs.asm):01734         CmdOR                           EQU     CCmdOR
0000                  (      romdefs.asm):01735         CmdPaint                        EQU     CCmdPaint
0000                  (      romdefs.asm):01736         CmdPClear                       EQU     CCmdPClear
0000                  (      romdefs.asm):01737         CmdPCls                         EQU     CCmdPCls
0000                  (      romdefs.asm):01738         CmdPcopy                        EQU     CCmdPcopy
0000                  (      romdefs.asm):01739         CmdPeek                         EQU     CCmdPeek
0000                  (      romdefs.asm):01740         CmdPlay                         EQU     CCmdPlay
0000                  (      romdefs.asm):01741         CmdPlus                         EQU     CCmdPlus
0000                  (      romdefs.asm):01742         CmdPmode                        EQU     CCmdPmode
0000                  (      romdefs.asm):01743         CmdPoint                        EQU     CCmdPoint
0000                  (      romdefs.asm):01744         CmdPoke                         EQU     CCmdPoke
0000                  (      romdefs.asm):01745         CmdPOS                          EQU     CCmdPOS
0000                  (      romdefs.asm):01746         CmdPPoint                       EQU     CCmdPPoint
0000                  (      romdefs.asm):01747         CmdPReset                       EQU     CCmdPReset
0000                  (      romdefs.asm):01748         CmdPrint                        EQU     CCmdPrint
0000                  (      romdefs.asm):01749         CmdPset                         EQU     CCmdPset
0000                  (      romdefs.asm):01750         CmdPut                          EQU     CCmdPut
0000                  (      romdefs.asm):01751         CmdRead                         EQU     CCmdRead
0000                  (      romdefs.asm):01752         CmdReadFromX                    EQU     CCmdReadFromX
0000                  (      romdefs.asm):01753         CmdREM                          EQU     CCmdREM
0000                  (      romdefs.asm):01754         CmdRenum                        EQU     CCmdRenum
0000                  (      romdefs.asm):01755         CmdReset                        EQU     CCmdReset
0000                  (      romdefs.asm):01756         CmdRestore                      EQU     CCmdRestore
0000                  (      romdefs.asm):01757         CmdReturn                       EQU     CCmdReturn
0000                  (      romdefs.asm):01758         CmdRightS                       EQU     CCmdRightS
0000                  (      romdefs.asm):01759         CmdRND                          EQU     CCmdRND
0000                  (      romdefs.asm):01760         CmdRun                          EQU     CCmdRun
0000                  (      romdefs.asm):01761         CmdScreen                       EQU     CCmdScreen
0000                  (      romdefs.asm):01762         CmdSet                          EQU     CCmdSet
0000                  (      romdefs.asm):01763         CmdSGN                          EQU     CCmdSGN
0000                  (      romdefs.asm):01764         CmdSIN                          EQU     CCmdSIN
0000                  (      romdefs.asm):01765         CmdSkipf                        EQU     CCmdSkipf
0000                  (      romdefs.asm):01766         CmdSound                        EQU     CCmdSound
0000                  (      romdefs.asm):01767         CmdSQR                          EQU     CCmdSQR
0000                  (      romdefs.asm):01768         CmdStop                         EQU     CCmdStop
0000                  (      romdefs.asm):01769         CmdStringS                      EQU     CCmdStringS
0000                  (      romdefs.asm):01770         CmdSTRS                         EQU     CCmdSTRS
0000                  (      romdefs.asm):01771         CmdTAN                          EQU     CCmdTAN
0000                  (      romdefs.asm):01772         CmdTimer                        EQU     CCmdTimer
0000                  (      romdefs.asm):01773         CmdTroff                        EQU     CCmdTroff
0000                  (      romdefs.asm):01774         CmdTron                         EQU     CCmdTron
0000                  (      romdefs.asm):01775         CmdUSR                          EQU     CCmdUSR
0000                  (      romdefs.asm):01776         CmdVAL                          EQU     CCmdVAL
0000                  (      romdefs.asm):01777         CmdVarptr                       EQU     CCmdVarptr
0000                  (      romdefs.asm):01778         GrBackground                    EQU     CGrBackground
0000                  (      romdefs.asm):01779         GrBytesPerLine                  EQU     CGrBytesPerLine
0000                  (      romdefs.asm):01780         GrCalcPixelPos                  EQU     CGrCalcPixelPos
0000                  (      romdefs.asm):01781         GrCircleRadius                  EQU     CGrCircleRadius
0000                  (      romdefs.asm):01782         GrCircleXCo                     EQU     CGrCircleXCo
0000                  (      romdefs.asm):01783         GrCircleYCo                     EQU     CGrCircleYCo
0000                  (      romdefs.asm):01784         GrClearGrScreen                 EQU     CGrClearGrScreen
0000                  (      romdefs.asm):01785         GrColourSet                     EQU     CGrColourSet
0000                  (      romdefs.asm):01786         GrColourTemp                    EQU     CGrColourTemp
0000                  (      romdefs.asm):01787         GrCurrColour                    EQU     CGrCurrColour
0000                  (      romdefs.asm):01788         GrCurrPmode                     EQU     CGrCurrPmode
0000                  (      romdefs.asm):01789         GrCurrX                         EQU     CGrCurrX
0000                  (      romdefs.asm):01790         GrCurrXCo                       EQU     CGrCurrXCo
0000                  (      romdefs.asm):01791         GrCurrY                         EQU     CGrCurrY
0000                  (      romdefs.asm):01792         GrCurrYCo                       EQU     CGrCurrYCo
0000                  (      romdefs.asm):01793         GrDirtyFlag                     EQU     CGrDirtyFlag
0000                  (      romdefs.asm):01794         GrDisplayStartAddr              EQU     CGrDisplayStartAddr
0000                  (      romdefs.asm):01795         GrDraw                          EQU     CGrDraw
0000                  (      romdefs.asm):01796         GrDrawAngle                     EQU     CGrDrawAngle
0000                  (      romdefs.asm):01797         GrDrawScale                     EQU     CGrDrawScale
0000                  (      romdefs.asm):01798         GrForeground                    EQU     CGrForeground
0000                  (      romdefs.asm):01799         GrLastDisplayAddr               EQU     CGrLastDisplayAddr
0000                  (      romdefs.asm):01800         GrPixelNoX                      EQU     CGrPixelNoX
0000                  (      romdefs.asm):01801         GrPixelNoY                      EQU     CGrPixelNoY
0000                  (      romdefs.asm):01802         GrPlotFlag                      EQU     CGrPlotFlag
0000                  (      romdefs.asm):01803         GrReserveGrRam                  EQU     CGrReserveGrRam
0000                  (      romdefs.asm):01804         GrResetLRGPixel                 EQU     CGrResetLRGPixel
0000                  (      romdefs.asm):01805         GrSelectColourSet               EQU     CGrSelectColourSet
0000                  (      romdefs.asm):01806         GrSelectDisplay                 EQU     CGrSelectDisplay
0000                  (      romdefs.asm):01807         GrSelectPage                    EQU     CGrSelectPage
0000                  (      romdefs.asm):01808         GrSelectVDGColSet               EQU     CGrSelectVDGColSet
0000                  (      romdefs.asm):01809         GrSetColours                    EQU     CGrSetColours
0000                  (      romdefs.asm):01810         GrSetLRGPixel                   EQU     CGrSetLRGPixel
0000                  (      romdefs.asm):01811         GrSetResetData                  EQU     CGrSetResetData
0000                  (      romdefs.asm):01812         GrSetVDGMode                    EQU     CGrSetVDGMode
0000                  (      romdefs.asm):01813         GrSetVDGOffset                  EQU     CGrSetVDGOffset
0000                  (      romdefs.asm):01814         GrStartPages                    EQU     CGrStartPages
0000                  (      romdefs.asm):01815         IndCasBlockIn                   EQU     CIndCasBlockIn
0000                  (      romdefs.asm):01816         IndCasBlockOut                  EQU     CIndCasBlockOut
0000                  (      romdefs.asm):01817         IndCasOnRead                    EQU     CIndCasOnRead
0000                  (      romdefs.asm):01818         IndCasWriteLead                 EQU     CIndCasWriteLead
0000                  (      romdefs.asm):01819         IndCharOutput                   EQU     CIndCharOutput
0000                  (      romdefs.asm):01820         IndJoystickIn                   EQU     CIndJoystickIn
0000                  (      romdefs.asm):01821         IndKeyInput                     EQU     CIndKeyInput
0000                  (      romdefs.asm):01822         IndVecReset                     EQU     CIndVecReset
0000                  (      romdefs.asm):01823         Misc16BitScratch                EQU     CMisc16BitScratch
0000                  (      romdefs.asm):01824         PixMaskTable2Col                EQU     CPixMaskTable2Col
0000                  (      romdefs.asm):01825         PixMaskTable4Col                EQU     CPixMaskTable4Col
0000                  (      romdefs.asm):01826         PrinterCRLF                     EQU     CPrinterCRLF
0000                  (      romdefs.asm):01827         PrinterDirOut                   EQU     CPrinterDirOut
0000                  (      romdefs.asm):01828         PrinterOut                      EQU     CPrinterOut
0000                  (      romdefs.asm):01829         SecVecFIRQ                      EQU     CSecVecFIRQ
0000                  (      romdefs.asm):01830         SecVecIRQ                       EQU     CSecVecIRQ
0000                  (      romdefs.asm):01831         SecVecNMI                       EQU     CSecVecNMI
0000                  (      romdefs.asm):01832         SecVecSWI                       EQU     CSecVecSWI
0000                  (      romdefs.asm):01833         SecVecSWI2                      EQU     CSecVecSWI2
0000                  (      romdefs.asm):01834         SecVecSWI3                      EQU     CSecVecSWI3
0000                  (      romdefs.asm):01835         SerDLBaud                       EQU     CSerDLBaud
0000                  (      romdefs.asm):01836         SerDLTimeout                    EQU     CSerDLTimeout
0000                  (      romdefs.asm):01837         SndBeep                         EQU     CSndBeep
0000                  (      romdefs.asm):01838         SndDisable                      EQU     CSndDisable
0000                  (      romdefs.asm):01839         SndDotNoteScale                 EQU     CSndDotNoteScale
0000                  (      romdefs.asm):01840         SndDTOAOn                       EQU     CSndDTOAOn
0000                  (      romdefs.asm):01841         SndEnable                       EQU     CSndEnable
0000                  (      romdefs.asm):01842         SndLength                       EQU     CSndLength
0000                  (      romdefs.asm):01843         SndNoteLen                      EQU     CSndNoteLen
0000                  (      romdefs.asm):01844         SndOctave                       EQU     CSndOctave
0000                  (      romdefs.asm):01845         SndPitch                        EQU     CSndPitch
0000                  (      romdefs.asm):01846         SndPlayNote                     EQU     CSndPlayNote
0000                  (      romdefs.asm):01847         SndTempo                        EQU     CSndTempo
0000                  (      romdefs.asm):01848         SndTimerPlay                    EQU     CSndTimerPlay
0000                  (      romdefs.asm):01849         SndVolume                       EQU     CSndVolume
0000                  (      romdefs.asm):01850         SysBoot64                       EQU     CSysBoot64
0000                  (      romdefs.asm):01851         SysErr                          EQU     CSysErr
0000                  (      romdefs.asm):01852         SysErr2                         EQU     CSysErr2
0000                  (      romdefs.asm):01853         SysReadJoystick                 EQU     CSysReadJoystick
0000                  (      romdefs.asm):01854         SysReset                        EQU     CSysReset
0000                  (      romdefs.asm):01855         SysResetDA                      EQU     CSysResetDA
0000                  (      romdefs.asm):01856         SysSelJoystick                  EQU     CSysSelJoystick
0000                  (      romdefs.asm):01857         SysTimeVal                      EQU     CSysTimeVal
0000                  (      romdefs.asm):01858         SysWriteDA                      EQU     CSysWriteDA
0000                  (      romdefs.asm):01859         TextCapsLock                    EQU     CTextCapsLock
0000                  (      romdefs.asm):01860         TextClearLine                   EQU     CTextClearLine
0000                  (      romdefs.asm):01861         TextCls                         EQU     CTextCls
0000                  (      romdefs.asm):01862         TextClsChar                     EQU     CTextClsChar
0000                  (      romdefs.asm):01863         TextCursFalshCnt                EQU     CTextCursFalshCnt
0000                  (      romdefs.asm):01864         TextDevN                        EQU     CTextDevN
0000                  (      romdefs.asm):01865         TextKbdBuffAddr                 EQU     CTextKbdBuffAddr
0000                  (      romdefs.asm):01866         TextKbdDelay                    EQU     CTextKbdDelay
0000                  (      romdefs.asm):01867         TextKbdRollover                 EQU     CTextKbdRollover
0000                  (      romdefs.asm):01868         TextLastKey                     EQU     CTextLastKey
0000                  (      romdefs.asm):01869         TextOutChar                     EQU     CTextOutChar
0000                  (      romdefs.asm):01870         TextOutCRLF                     EQU     CTextOutCRLF
0000                  (      romdefs.asm):01871         TextOutNum16                    EQU     CTextOutNum16
0000                  (      romdefs.asm):01872         TextOutNumFPA0                  EQU     CTextOutNumFPA0
0000                  (      romdefs.asm):01873         TextOutQuestion                 EQU     CTextOutQuestion
0000                  (      romdefs.asm):01874         TextOutSpace                    EQU     CTextOutSpace
0000                  (      romdefs.asm):01875         TextOutString                   EQU     CTextOutString
0000                  (      romdefs.asm):01876         TextPrnAutoCRLF                 EQU     CTextPrnAutoCRLF
0000                  (      romdefs.asm):01877         TextPrnCommaW                   EQU     CTextPrnCommaW
0000                  (      romdefs.asm):01878         TextPrnCurrCol                  EQU     CTextPrnCurrCol
0000                  (      romdefs.asm):01879         TextPrnEOLCnt                   EQU     CTextPrnEOLCnt
0000                  (      romdefs.asm):01880         TextPrnEOLSeq                   EQU     CTextPrnEOLSeq
0000                  (      romdefs.asm):01881         TextPrnLastComma                EQU     CTextPrnLastComma
0000                  (      romdefs.asm):01882         TextPrnLineW                    EQU     CTextPrnLineW
0000                  (      romdefs.asm):01883         TextPrnSelFlag                  EQU     CTextPrnSelFlag
0000                  (      romdefs.asm):01884         TextResetVDU                    EQU     CTextResetVDU
0000                  (      romdefs.asm):01885         TextScanKbd                     EQU     CTextScanKbd
0000                  (      romdefs.asm):01886         TextSerBaudRate                 EQU     CTextSerBaudRate
0000                  (      romdefs.asm):01887         TextSerEOLDelay                 EQU     CTextSerEOLDelay
0000                  (      romdefs.asm):01888         TextUpdateCurs                  EQU     CTextUpdateCurs
0000                  (      romdefs.asm):01889         TextVDUCommaW                   EQU     CTextVDUCommaW
0000                  (      romdefs.asm):01890         TextVDUCurrCol                  EQU     CTextVDUCurrCol
0000                  (      romdefs.asm):01891         TextVDUCursAddr                 EQU     CTextVDUCursAddr
0000                  (      romdefs.asm):01892         TextVDULastComma                EQU     CTextVDULastComma
0000                  (      romdefs.asm):01893         TextVDULineW                    EQU     CTextVDULineW
0000                  (      romdefs.asm):01894         TextVDUOut                      EQU     CTextVDUOut
0000                  (      romdefs.asm):01895         TextWaitKey                     EQU     CTextWaitKey
0000                  (      romdefs.asm):01896         TextWaitKeyCurs                 EQU     CTextWaitKeyCurs
0000                  (      romdefs.asm):01897         TextWaitKeyCurs2                EQU     CTextWaitKeyCurs2
0000                  (      romdefs.asm):01898         UtilCopyBXtoU                   EQU     CUtilCopyBXtoU
0000                  (      romdefs.asm):01899         VarAssign16Bit                  EQU     CVarAssign16Bit
0000                  (      romdefs.asm):01900         VarAssign16Bit2                 EQU     CVarAssign16Bit2
0000                  (      romdefs.asm):01901         VarAssign16BitB                 EQU     CVarAssign16BitB
0000                  (      romdefs.asm):01902         VarAssign8Bit                   EQU     CVarAssign8Bit
0000                  (      romdefs.asm):01903         VarCKChar                       EQU     CVarCKChar
0000                  (      romdefs.asm):01904         VarCKClBrac                     EQU     CVarCKClBrac
0000                  (      romdefs.asm):01905         VarCKComma                      EQU     CVarCKComma
0000                  (      romdefs.asm):01906         VarCKOpBrac                     EQU     CVarCKOpBrac
0000                  (      romdefs.asm):01907         VarDelVar                       EQU     CVarDelVar
0000                  (      romdefs.asm):01908         VarGarbageCollect               EQU     CVarGarbageCollect
0000                  (      romdefs.asm):01909         VarGet16Bit                     EQU     CVarGet16Bit
0000                  (      romdefs.asm):01910         VarGet8Bit                      EQU     CVarGet8Bit
0000                  (      romdefs.asm):01911         VarGetComma8                    EQU     CVarGetComma8
0000                  (      romdefs.asm):01912         VarGetExpr                      EQU     CVarGetExpr
0000                  (      romdefs.asm):01913         VarGetExprCC                    EQU     CVarGetExprCC
0000                  (      romdefs.asm):01914         VarGetStr                       EQU     CVarGetStr
0000                  (      romdefs.asm):01915         VarGetUsr                       EQU     CVarGetUsr
0000                  (      romdefs.asm):01916         VarGetVar                       EQU     CVarGetVar
0000                  (      romdefs.asm):01917         VarNormFPA0                     EQU     CVarNormFPA0
0000                  (      romdefs.asm):01918         VectAccessScreen                EQU     CVectAccessScreen
0000                  (      romdefs.asm):01919         VectAssignStr                   EQU     CVectAssignStr
0000                  (      romdefs.asm):01920         VectBase                        EQU     CVectBase
0000                  (      romdefs.asm):01921         VectCheckEOF                    EQU     CVectCheckEOF
0000                  (      romdefs.asm):01922         VectCheckKeys                   EQU     CVectCheckKeys
0000                  (      romdefs.asm):01923         VectCloseAllFiles               EQU     CVectCloseAllFiles
0000                  (      romdefs.asm):01924         VectCloseFile                   EQU     CVectCloseFile
0000                  (      romdefs.asm):01925         VectCloseFileCmd                EQU     CVectCloseFileCmd
0000                  (      romdefs.asm):01926         VectCmdInterp                   EQU     CVectCmdInterp
0000                  (      romdefs.asm):01927         VectDeTokenize                  EQU     CVectDeTokenize
0000                  (      romdefs.asm):01928         VectDevInit                     EQU     CVectDevInit
0000                  (      romdefs.asm):01929         VectDevNo                       EQU     CVectDevNo
0000                  (      romdefs.asm):01930         VectDevOpen                     EQU     CVectDevOpen
0000                  (      romdefs.asm):01931         VectEvaluateExpr                EQU     CVectEvaluateExpr
0000                  (      romdefs.asm):01932         VectGetNextCmd                  EQU     CVectGetNextCmd
0000                  (      romdefs.asm):01933         VectInChar                      EQU     CVectInChar
0000                  (      romdefs.asm):01934         VectInputFile                   EQU     CVectInputFile
0000                  (      romdefs.asm):01935         VectLineInputFile               EQU     CVectLineInputFile
0000                  (      romdefs.asm):01936         VectOutChar                     EQU     CVectOutChar
0000                  (      romdefs.asm):01937         VectOutputFile                  EQU     CVectOutputFile
0000                  (      romdefs.asm):01938         VectReReqestIn                  EQU     CVectReReqestIn
0000                  (      romdefs.asm):01939         VectResetBasMem                 EQU     CVectResetBasMem
0000                  (      romdefs.asm):01940         VectRunLink                     EQU     CVectRunLink
0000                  (      romdefs.asm):01941         VectSysError                    EQU     CVectSysError
0000                  (      romdefs.asm):01942         VectTokenize                    EQU     CVectTokenize
0000                  (      romdefs.asm):01943         VectUserError                   EQU     CVectUserError
0000                  (      romdefs.asm):01944         WarmStart                       EQU     CWarmStart
0000                  (      romdefs.asm):01945         WarmStartFlag                   EQU     CWarmStartFlag
                      (      romdefs.asm):01946         
                      (      romdefs.asm):01947                                 ENDC
                      (      romdefs.asm):01948                                 
     008A             (      romdefs.asm):01949         DBZero          EQU     Misc16BitScratch ; this is always set to Zero.
                      (      romdefs.asm):01950                                 
     003A             (      romdefs.asm):01951         StackBuf        equ     $3A             ; stack buffer size
     003D             (      romdefs.asm):01952         RelPTR          equ     $03D            ; Tempory arithmetic/logical table ptr
     00FA             (      romdefs.asm):01953         LineBufMax      equ     250             ; maximum line buffer length
                      (      romdefs.asm):01954         
                      (      romdefs.asm):01955         ; For compatibility with CoCo ROM listings
                      (      romdefs.asm):01956         ; first floating point accumulator
     004F             (      romdefs.asm):01957         FP0EXP          equ     BasVarFPAcc1    ; exponent
     0050             (      romdefs.asm):01958         FPA0            equ     BasVarFPAcc1+1  ; mantissa
     0054             (      romdefs.asm):01959         FP0SGN          equ     BasVarFPAcc1+5  ; sign
     0055             (      romdefs.asm):01960         COEFCT          equ     BasVarFPAcc1+6  ; polynomial coeficient counter
     0056             (      romdefs.asm):01961         StrDesc         equ     BasVarFPAcc1+7  ; tempory string descriptor (5 bytes)
                      (      romdefs.asm):01962         
                      (      romdefs.asm):01963         ; second floating point accumulator
     005C             (      romdefs.asm):01964         FP1EXP          equ     BasVarFPAcc2    ; exponent $5C
     005D             (      romdefs.asm):01965         FPA1            equ     BasVarFPAcc2+1  ; mantissa $5D
     0061             (      romdefs.asm):01966         FP1SGN          equ     BasVarFPAcc2+5  ; sign $61
     0062             (      romdefs.asm):01967         ResSGN          equ     BasVarFPAcc2+6  ; sign of result of FP operation $62
     0063             (      romdefs.asm):01968         FPSByte         equ     BasVarFPAcc2+7  ; floating point sub byte $63
     0064             (      romdefs.asm):01969         CoefPTR         equ     BasVarFPAcc2+8  ; Coeficient pointer
                      (      romdefs.asm):01970         
     005B             (      romdefs.asm):01971         FPCARY          equ     $005B   
                      (      romdefs.asm):01972         
     0013             (      romdefs.asm):01973         FPA2            equ     BasTempFPA2     ; FPA2
                      (      romdefs.asm):01974         
     00AB             (      romdefs.asm):01975         VarAB           equ     $00AB           ; temp vars / RND
     00AC             (      romdefs.asm):01976         VarAC           equ     $00AC           ; temp vars / RND
     00AD             (      romdefs.asm):01977         VarAD           equ     $00AD           ; temp vars / RND
     00AE             (      romdefs.asm):01978         VarAE           equ     $00AE           ; temp vars / RND
                      (      romdefs.asm):01979         
                      (      romdefs.asm):01980         ;
                      (      romdefs.asm):01981         ; Device numbers
                      (      romdefs.asm):01982         ;
                      (      romdefs.asm):01983         
     0000             (      romdefs.asm):01984         DevConsole      equ     0               ; console
     FFFF             (      romdefs.asm):01985         DevCasette      equ     -1              ; cassette
     FFFE             (      romdefs.asm):01986         DevPrinter      equ     -2              ; printer
                      (      romdefs.asm):01987                 
                      (      romdefs.asm):01988         ;
                      (      romdefs.asm):01989         ; Cassette file types
                      (      romdefs.asm):01990         ;
     0055             (      romdefs.asm):01991         SyncByte        equ     $55             ; Sync byte in cassete files
     003C             (      romdefs.asm):01992         BlockBegin      equ     $3C             ; Begining of block marker
                      (      romdefs.asm):01993         
                      (      romdefs.asm):01994         ;Block Types
     0000             (      romdefs.asm):01995         BtFileName      equ     $00             ; File name block
     0001             (      romdefs.asm):01996         BtData          equ     $01             ; Data block
     00FF             (      romdefs.asm):01997         BtEOF           equ     $FF             ; End of file block
                      (      romdefs.asm):01998         
     000F             (      romdefs.asm):01999         FNameBlockLen   equ     15              ; 15 bytes in header block
     0008             (      romdefs.asm):02000         CasFilenameLen  equ     8               ; Cassette filename length
     00FA             (      romdefs.asm):02001         DefBlockSize    equ     250             ; Default block size
                      (      romdefs.asm):02002         
                      (      romdefs.asm):02003         ;File Types, as stored in filename block
     0000             (      romdefs.asm):02004         FtBasic         equ     $00             ; Basic program
     0001             (      romdefs.asm):02005         FtDataFile      equ     $01             ; Data file
     0002             (      romdefs.asm):02006         FtMachineCode   equ     $02             ; Machine code program
     0003             (      romdefs.asm):02007         FtBinary        equ     $03             ; Binary file
     0088             (      romdefs.asm):02008         FtDream         equ     $88             ; Dream Assembler source file
     00FF             (      romdefs.asm):02009         FtHeaderless    equ     $FF             ; Headerless
                      (      romdefs.asm):02010         
                      (      romdefs.asm):02011         ;Ascii/Binary flag from filename block
     00FF             (      romdefs.asm):02012         AsAscii         equ     $FF             ; ASCII file
     0000             (      romdefs.asm):02013         AsBinary        equ     $00             ; Binary file (tokenised basic)
                      (      romdefs.asm):02014         
                      (      romdefs.asm):02015         ; Gap Flag from filename block
     0000             (      romdefs.asm):02016         GfUngapped      equ     $00             ; No gaps
     00FF             (      romdefs.asm):02017         GfGapped        equ     $FF             ; Gaps between blocks
                      (      romdefs.asm):02018         
                      (      romdefs.asm):02019         ; Cassette file IO types
     0001             (      romdefs.asm):02020         CasInputFile    equ     1               ; input file
     0002             (      romdefs.asm):02021         CasOutputFile   equ     2               ; output file
                      (      romdefs.asm):02022         
                      (      romdefs.asm):02023         ;
                      (      romdefs.asm):02024         ; Screen metrics.
                      (      romdefs.asm):02025         ;
     00FF             (      romdefs.asm):02026         GrMaxX          equ     255             ; Maximum X co-ordinate
     00BF             (      romdefs.asm):02027         GrMaxY          equ     191             ; Maximum Y co-ordinate
     0008             (      romdefs.asm):02028         GrMaxColour     equ     8               ; maximum colour number
     0004             (      romdefs.asm):02029         GrMaxPmode      equ     4               ; maximum pmode 
     0001             (      romdefs.asm):02030         GrMaxColourSet  equ     1               ; maximum colour set    
     0008             (      romdefs.asm):02031         GrMaxPages      equ     8               ; maximum PCLEAR pages
     0600             (      romdefs.asm):02032         GrPageSize      equ     $600            ; Graphic (pclear) page size in bytes
                      (      romdefs.asm):02033         
     0006             (      romdefs.asm):02034         GrStartPage     equ     $06             ; default start page for graphics memory $0600
     001E             (      romdefs.asm):02035         BasStartPage    equ     $1E             ; default start page for basic program $1E00
                      (      romdefs.asm):02036         
     0400             (      romdefs.asm):02037         TextScreenBase  equ     $0400           ; base of text screen
     0600             (      romdefs.asm):02038         GrScreenBase    equ     $0600           ; base of graphics pages
     0200             (      romdefs.asm):02039         TextScreenLen   equ     $0200           ; Length of text screen
     05FF             (      romdefs.asm):02040         TextScreenLast  equ     (TextScreenBase+TextScreenLen)-1        ; last character of text screen
                      (      romdefs.asm):02041         
                      (      romdefs.asm):02042         ;
                      (      romdefs.asm):02043         ; Lo-res colour masks
                      (      romdefs.asm):02044         ;
                      (      romdefs.asm):02045         
     0000             (      romdefs.asm):02046         MaskGreen       equ     $00             ; Green
     0010             (      romdefs.asm):02047         MaskYellow      equ     $10             ; Yellow
     0020             (      romdefs.asm):02048         MaskBlue        equ     $20             ; Blue
     0030             (      romdefs.asm):02049         MaskRed         equ     $30             ; red
     0040             (      romdefs.asm):02050         MaskBuff        equ     $40             ; buff / white
     0050             (      romdefs.asm):02051         MaskCyan        equ     $50             ; cyan
     0060             (      romdefs.asm):02052         MaskMagenta     equ     $60             ; magenta
     0070             (      romdefs.asm):02053         MaskOrange      equ     $70             ; orange
                      (      romdefs.asm):02054         
     0010             (      romdefs.asm):02055         LRGColourDiff   equ     $10             ; difference between colours    
                      (      romdefs.asm):02056         
                      (      romdefs.asm):02057         ;
                      (      romdefs.asm):02058         ; Lo-res pixel masks
                      (      romdefs.asm):02059         ;
     0008             (      romdefs.asm):02060         MaskUpR         equ     $08             ; upper right
     0004             (      romdefs.asm):02061         MaskUpL         equ     $04             ; upper left
     0002             (      romdefs.asm):02062         MaskLowR        equ     $02             ; lower right
     0001             (      romdefs.asm):02063         MaskLowL        equ     $01             ; lower left
     000F             (      romdefs.asm):02064         MaskAllOn       equ     (MaskUpR+MaskUpL+MaskLowR+MaskLowL)     ; all on
     0000             (      romdefs.asm):02065         MaskAllOff      equ     $00             ; all off
                      (      romdefs.asm):02066         
     0080             (      romdefs.asm):02067         MaskLRG         equ     $80             ; low res graphics
                      (      romdefs.asm):02068         
                      (      romdefs.asm):02069         ; 
                      (      romdefs.asm):02070         ; Lo-res (semigraphics) and text screen metrics.
                      (      romdefs.asm):02071         ;
                      (      romdefs.asm):02072         
     003F             (      romdefs.asm):02073         LoMaxX          equ     63              ; Maximum lo-res X co-ordinate
     001F             (      romdefs.asm):02074         LoMaxY          equ     31              ; Maximum lo-res Y co-ordinate
     0008             (      romdefs.asm):02075         LoMaxColour     equ     8               ; max lo-res colour
     0020             (      romdefs.asm):02076         TextCharsLine   equ     32              ; Text/Lo-res character cells per line
                      (      romdefs.asm):02077         
                      (      romdefs.asm):02078         ;
                      (      romdefs.asm):02079         ; Cartridge entry points
                      (      romdefs.asm):02080         ;
                      (      romdefs.asm):02081         
     C000             (      romdefs.asm):02082         CartBase        equ     $c000           ; cartridge area base
     C000             (      romdefs.asm):02083         CartEntryFIRQ   equ     CartBase        ; entry point when FIRQ generated
     C002             (      romdefs.asm):02084         CartEntryDOS    equ     CartBase+2      ; entry point when dos flag found 'DK' at $C000
     444B             (      romdefs.asm):02085         CartDOSFlag     equ     $444B           ; Dos flag word : 'DK' 
                      (      romdefs.asm):02086         
                      (      romdefs.asm):02087         ;
                      (      romdefs.asm):02088         ; Dragon 64 RAM basic stuff
                      (      romdefs.asm):02089         ;
                      (      romdefs.asm):02090         
     C000             (      romdefs.asm):02091         D64RAMBase      equ     $C000           ; Dragon 64 RAM basic starts at $c000
     FEFF             (      romdefs.asm):02092         D64RAMTop       equ     $FEFF           ; Dragon 64 RAM ends here 
                      (      romdefs.asm):02093         
                      (      romdefs.asm):02094         ;
                      (      romdefs.asm):02095         ; Firmware flag used by warm start and RAM basic boot
                      (      romdefs.asm):02096         ;
     0055             (      romdefs.asm):02097         FFlagTrue       equ     $55             ; flag initialised / true
     0012             (      romdefs.asm):02098         NOPFlag         equ     $12             ; op-code fro NOP, used to mark start of reset vector           
                      (      romdefs.asm):02099         
                      (      romdefs.asm):02100         ;
                      (      romdefs.asm):02101         ; General evaluation vars, multiple uses
                      (      romdefs.asm):02102         ;
                      (      romdefs.asm):02103         
     0037             (      romdefs.asm):02104         Eval37  equ     $37
     0038             (      romdefs.asm):02105         Eval38  equ     $38
     0039             (      romdefs.asm):02106         Eval39  equ     $39
     003A             (      romdefs.asm):02107         Eval3A  equ     $3A
     003B             (      romdefs.asm):02108         Eval3B  equ     $3B
     003C             (      romdefs.asm):02109         Eval3C  equ     $3C
     003E             (      romdefs.asm):02110         Eval3E  equ     $3E
     003F             (      romdefs.asm):02111         Eval3F  equ     $3F
                      (      romdefs.asm):02112         
     0040             (      romdefs.asm):02113         Eval40  equ     $40
     0041             (      romdefs.asm):02114         Eval41  equ     $41
     0042             (      romdefs.asm):02115         Eval42  equ     $42
     0043             (      romdefs.asm):02116         Eval43  equ     $43
     0044             (      romdefs.asm):02117         Eval44  equ     $44
     0045             (      romdefs.asm):02118         Eval45  equ     $45
     0046             (      romdefs.asm):02119         Eval46  equ     $46
     0047             (      romdefs.asm):02120         Eval47  equ     $47
     0048             (      romdefs.asm):02121         Eval48  equ     $48
     0049             (      romdefs.asm):02122         Eval49  equ     $49
     004A             (      romdefs.asm):02123         Eval4A  equ     $4A
     004B             (      romdefs.asm):02124         Eval4B  equ     $4B
     004C             (      romdefs.asm):02125         Eval4C  equ     $4C
     004D             (      romdefs.asm):02126         Eval4D  equ     $4D
     004E             (      romdefs.asm):02127         Eval4E  equ     $4E
                      (      romdefs.asm):02128         
     00CF             (      romdefs.asm):02129         EvalCF  equ     $CF
                      (      romdefs.asm):02130         
     00D1             (      romdefs.asm):02131         EvalD1  equ     $D1
     00D2             (      romdefs.asm):02132         EvalD2  equ     $D2
     00D3             (      romdefs.asm):02133         EvalD3  equ     $D3
     00D4             (      romdefs.asm):02134         EvalD4  equ     $D4
     00D5             (      romdefs.asm):02135         EvalD5  equ     $D5
     00D6             (      romdefs.asm):02136         EvalD6  equ     $D6
     00D7             (      romdefs.asm):02137         EvalD7  equ     $D7
     00D8             (      romdefs.asm):02138         EvalD8  equ     $D8
     00D9             (      romdefs.asm):02139         EvalD9  equ     $D9
     00DA             (      romdefs.asm):02140         EvalDA  equ     $DA
     00DB             (      romdefs.asm):02141         EvalDB  equ     $DB
     00DC             (      romdefs.asm):02142         EvalDC  equ     $DC     
                      (      romdefs.asm):02143         
     0047             (      romdefs.asm):02144         BasFoundLineNo  EQU     Eval47          ; Address of line number found by BasFindLineNo
                      (     DiagCart.asm):00008                         use     samdefs.asm
                      (      samdefs.asm):00001         ;
                      (      samdefs.asm):00002         ; SAM Defs.
                      (      samdefs.asm):00003         ;
                      (      samdefs.asm):00004         
     FFE0             (      samdefs.asm):00005         SAMVectors      equ             $FFE0                   ; SAM vector block at top of memory map
     0020             (      samdefs.asm):00006         SAMVecSize      equ             $20                             ; SAM vector block size
                      (      samdefs.asm):00007         
     FFC0             (      samdefs.asm):00008         SAMBase         equ             $FFC0                   ; Base of SAM bits
                      (      samdefs.asm):00009         
                      (      samdefs.asm):00010         ; V2 V1 V0      Mode(s)
                      (      samdefs.asm):00011         ;  0  0  0      AL, AE, S4, S6
                      (      samdefs.asm):00012         ;  0  0  1      G1C, G1R
                      (      samdefs.asm):00013         ;  0  1  0      G2C
                      (      samdefs.asm):00014         ;  0  1  1      G2R
                      (      samdefs.asm):00015         ;  1  0  0      G3C
                      (      samdefs.asm):00016         ;  1  0  1      G3R
                      (      samdefs.asm):00017         ;  1  1  0      G6C, G6R
                      (      samdefs.asm):00018         ;  1  1  1      DMA
                      (      samdefs.asm):00019         
     FFC0             (      samdefs.asm):00020         SAMCV0          equ             $FFC0                   ; Video mode bits
     FFC1             (      samdefs.asm):00021         SAMSV0          equ             $FFC1
     FFC2             (      samdefs.asm):00022         SAMCV1          equ             $FFC2
     FFC3             (      samdefs.asm):00023         SAMSV1          equ             $FFC3
     FFC4             (      samdefs.asm):00024         SAMCV2          equ             $FFC4
     FFC5             (      samdefs.asm):00025         SAMSV2          equ             $FFC5
                      (      samdefs.asm):00026         
                      (      samdefs.asm):00027         ;
                      (      samdefs.asm):00028         ; Binary offset from $0000, in 512 byte pages.
                      (      samdefs.asm):00029         ;
                      (      samdefs.asm):00030         
     FFC6             (      samdefs.asm):00031         SAMCF0          equ             $FFC6                   ; Display offset
     FFC7             (      samdefs.asm):00032         SAMSF0          equ             $FFC7
     FFC8             (      samdefs.asm):00033         SAMCF1          equ             $FFC8
     FFC9             (      samdefs.asm):00034         SAMSF1          equ             $FFC9
     FFCA             (      samdefs.asm):00035         SAMCF2          equ             $FFCA
     FFCB             (      samdefs.asm):00036         SAMSF2          equ             $FFCB
     FFCC             (      samdefs.asm):00037         SAMCF3          equ             $FFCC
     FFCD             (      samdefs.asm):00038         SAMSF3          equ             $FFCD
     FFCE             (      samdefs.asm):00039         SAMCF4          equ             $FFCE
     FFCF             (      samdefs.asm):00040         SAMSF4          equ             $FFCF
     FFD0             (      samdefs.asm):00041         SAMCF5          equ             $FFD0
     FFD1             (      samdefs.asm):00042         SAMSF5          equ             $FFD1
     FFD2             (      samdefs.asm):00043         SAMCF6          equ             $FFD2
     FFD3             (      samdefs.asm):00044         SAMSF6          equ             $FFD3
                      (      samdefs.asm):00045         
                      (      samdefs.asm):00046         ; Maps 2 pages of 32K into $0000-$7FFF, requires 64K RAM.
                      (      samdefs.asm):00047         
     FFD4             (      samdefs.asm):00048         SAMCP1          equ             $FFD4                   ; Page #1
     FFD5             (      samdefs.asm):00049         SAMSP1          equ             $FFD5
                      (      samdefs.asm):00050         
                      (      samdefs.asm):00051         ; R1 R0
                      (      samdefs.asm):00052         ;  0  0         Slow, 0.89MHz 
                      (      samdefs.asm):00053         ;  0  1         Address dependent 1.7MHz / 0.89MHz
                      (      samdefs.asm):00054         ;  1  0         Fast
                      (      samdefs.asm):00055         ;  1  1         Fast
                      (      samdefs.asm):00056         
     FFD6             (      samdefs.asm):00057         SAMCR0          equ             $FFD6                   ; CPU Rate
     FFD7             (      samdefs.asm):00058         SAMSR0          equ             $FFD7
     FFD8             (      samdefs.asm):00059         SAMCR1          equ             $FFD8
     FFD9             (      samdefs.asm):00060         SAMSR2          equ             $FFD9
                      (      samdefs.asm):00061         
                      (      samdefs.asm):00062         ; M1 M0
                      (      samdefs.asm):00063         ;  0  0          4K dynamic
                      (      samdefs.asm):00064         ;  0  1         16K dynamic
                      (      samdefs.asm):00065         ;  1  0         64K dynamic
                      (      samdefs.asm):00066         ;  1  1         64K static
                      (      samdefs.asm):00067         
     FFDA             (      samdefs.asm):00068         SAMCM0          equ             $FFDA                   ; Memory type
     FFDB             (      samdefs.asm):00069         SAMSM0          equ             $FFDB
     FFDC             (      samdefs.asm):00070         SAMCM1          equ             $FFDC
     FFDD             (      samdefs.asm):00071         SAMSM1          equ             $FFDD
                      (      samdefs.asm):00072         
                      (      samdefs.asm):00073         ; 0= RAM below 32K, ROM above, 1=RAM for entire map 
                      (      samdefs.asm):00074         ; In both map types top 256 bytes reserved for I/O space
                      (      samdefs.asm):00075         
     FFDE             (      samdefs.asm):00076         SAMCTY          equ             $FFDE                   ; Map type
     FFDF             (      samdefs.asm):00077         SAMSTY          equ             $FFDF
                      (      samdefs.asm):00078         
                      (      samdefs.asm):00079         
                      (      samdefs.asm):00080         
                      (      samdefs.asm):00081         
                      (     DiagCart.asm):00009                         use     wddefs.asm
                      (       wddefs.asm):00001         ;
                      (       wddefs.asm):00002         ; WD17xx / WD27xx defines.
                      (       wddefs.asm):00003         ;
                      (       wddefs.asm):00004                         ifdef   Tandy
                      (       wddefs.asm):00005         ; Disk command codes WD1793, WD1773, RSDos FDC carts.
0000                  (       wddefs.asm):00006         WDCmdRestore    EQU     $00             ; Restore to track 0
0000                  (       wddefs.asm):00007         WDCmdSeek       EQU     $10             ; Seek to track command
0000                  (       wddefs.asm):00008         WDCmdReadSec    EQU     $80             ; Read sector command
0000                  (       wddefs.asm):00009         WDCmdWriteSec   EQU     $A0             ; Write sector command
0000                  (       wddefs.asm):00010         WDCmdReadAddr   EQU     $C0             ; Read address mark
0000                  (       wddefs.asm):00011         WDCmdForceInt   EQU     $D0             ; Force inturrupt
0000                  (       wddefs.asm):00012         WDCmdWriteTrack EQU     $F4             ; Write (format) track  
                      (       wddefs.asm):00013                         else
                      (       wddefs.asm):00014         ; Disk command codes WD2797, Dragon Dos, Cumana Dos, Dragon Alpha/Professional, Dragon Beta
     0000             (       wddefs.asm):00015         WDCmdRestore    EQU     $00             ; Restore to track 0
     0010             (       wddefs.asm):00016         WDCmdSeek       EQU     $10             ; Seek to track command
     0088             (       wddefs.asm):00017         WDCmdReadSec    EQU     $88             ; Read sector command
     00A8             (       wddefs.asm):00018         WDCmdWriteSec   EQU     $A8             ; Write sector command
     00C0             (       wddefs.asm):00019         WDCmdReadAddr   EQU     $C0             ; Read address mark
     00D0             (       wddefs.asm):00020         WDCmdForceInt   EQU     $D0             ; Force inturrupt
     00F4             (       wddefs.asm):00021         WDCmdWriteTrack EQU     $F4             ; Write (format) track
                      (       wddefs.asm):00022                         endc
                      (       wddefs.asm):00023         ;
                      (       wddefs.asm):00024         ; Step rates.
                      (       wddefs.asm):00025         ;
                      (       wddefs.asm):00026         
     0000             (       wddefs.asm):00027         StepRate6ms     EQU     $00             ;  6ms step rate
     0001             (       wddefs.asm):00028         StepRate12ms    EQU     $01             ; 12ms step rate
     0002             (       wddefs.asm):00029         StepRate20ms    EQU     $02             ; 20ms step rate
     0003             (       wddefs.asm):00030         StepRate30ms    EQU     $03             ; 30ms step rate
                      (       wddefs.asm):00031         
     0002             (       wddefs.asm):00032         StepRateDefault EQU     StepRate20ms    ; Default
                      (       wddefs.asm):00033         
                      (       wddefs.asm):00034         ;
                      (       wddefs.asm):00035         ; WD Error flag / status bits
                      (       wddefs.asm):00036         ;
                      (       wddefs.asm):00037         
     0080             (       wddefs.asm):00038         WDErrNotReady   EQU     $80             ; Not ready
     0040             (       wddefs.asm):00039         WDErrWriteProt  EQU     $40             ; Write protect
     0020             (       wddefs.asm):00040         WDErrHeadLoaded EQU     $20             ; Head loaded, type 1
     0020             (       wddefs.asm):00041         WDErrRecType    EQU     $20             ; Record type, read sec
     0010             (       wddefs.asm):00042         WDErrSeek       EQU     $10             ; Seek error, type 1
     0010             (       wddefs.asm):00043         WDErrRNF        EQU     $10             ; Record not found, read address, sector write sector
     0008             (       wddefs.asm):00044         WDErrCRC        EQU     $08             ; CRC error all but read/write track
     0004             (       wddefs.asm):00045         WDErrTrack0     EQU     $04             ; Head on track 0, type 1
     0004             (       wddefs.asm):00046         WDErrLostData   EQU     $04             ; Lost data 
     0002             (       wddefs.asm):00047         WDErrIndex      EQU     $02             ; Index pulse, type 1
     0002             (       wddefs.asm):00048         WDErrDRQ        EQU     $02             ; Data request
     0001             (       wddefs.asm):00049         WDErrBusy       EQU     $01             ; Busy
                      (       wddefs.asm):00050         
     000F             (       wddefs.asm):00051         WDErrMask0F     EQU     WDErrCRC+WDErrLostData+WDErrDRQ+WDErrBusy
     005F             (       wddefs.asm):00052         WDErrMask5F     EQU     WDErrWriteProt+WDErrRNF+WDErrMask0F
     00DF             (       wddefs.asm):00053         WDErrMaskDF     EQU     WDErrNotReady+WDErrMask5F
     0047             (       wddefs.asm):00054         WDErrMaskFormat EQU     WDErrWriteProt+WDErrLostData+WDErrDRQ+WDErrBusy
     003F             (       wddefs.asm):00055         WDDefErrMask    EQU     WDErrRecType+WDErrSeek+WDErrMask0F
     007C             (       wddefs.asm):00056         WDErrMaskRW     EQU     WDErrWriteProt+WDErrRecType+WDErrRNF+WDErrCRC+WDErrLostData
                      (       wddefs.asm):00057         
                      (       wddefs.asm):00058         
                      (     DiagCart.asm):00010         
     0032             (     DiagCart.asm):00011         IRQBlinkRate    EQU     50              ; once / second at 50 hz
                      (     DiagCart.asm):00012         
                      (     DiagCart.asm):00013                         ifndef Test
0000                  (     DiagCart.asm):00014         RAMPageNo       EQU     $E0             ; Page no of RAM        
0000                  (     DiagCart.asm):00015         RAMBase         EQU     (RAMPageNo*256) ; base of RAM area.
0000                  (     DiagCart.asm):00016         RAMTop          EQU     RAMBase+$1EFF   ; top of RAM
                      (     DiagCart.asm):00017                         else
     0000             (     DiagCart.asm):00018         RAMPageNo       EQU     $00             ; Page no of RAM        
     0000             (     DiagCart.asm):00019         RAMBase         EQU     (RAMPageNo*256) ; base of RAM area.
     03FF             (     DiagCart.asm):00020         RAMTop          EQU     RAMBase+$03ff   ; top of RAM
                      (     DiagCart.asm):00021                         endc
                      (     DiagCart.asm):00022                         
     0000             (     DiagCart.asm):00023         DRAM4           EQU     0               ; 1 or 2 banks of 4K rams (early CoCo only)
     0001             (     DiagCart.asm):00024         DRAM16          EQU     1               ; 1 or 2 banks of 16K rams.
     0002             (     DiagCart.asm):00025         DRAM64          EQU     2               ; 1 bank of 64K (or half good 64K)
     0003             (     DiagCart.asm):00026         DRAMStatic      EQU     3               ; Static ram.
                      (     DiagCart.asm):00027         
     1000             (     DiagCart.asm):00028         Bank4K          EQU     $1000           ; 4K bank
     4000             (     DiagCart.asm):00029         Bank16K         EQU     $4000           ; 16K bank
                      (     DiagCart.asm):00030         
     0050             (     DiagCart.asm):00031         PrintBuffLen    EQU     80              ; print buffer length
                      (     DiagCart.asm):00032                         org     RAMBase
                      (     DiagCart.asm):00033         
0000                  (     DiagCart.asm):00034         RamBegin                
                      (     DiagCart.asm):00035         ; these will be in RAM on the card
0000                  (     DiagCart.asm):00036         RAMFlag         RMB     1               ; RAM flag, ram chip type 0=4k, 1=16k, 2=64k    
0001                  (     DiagCart.asm):00037         SaveLEDS        RMB     1               ; Temp save of current LEDS
0002                  (     DiagCart.asm):00038         LEDDir          RMB     1               ; LEDS animation direction
0003                  (     DiagCart.asm):00039         IsCoCo3         RMB     1               ; is this machine a CoCo3?
0004                  (     DiagCart.asm):00040         SavedS          RMB     2               ; Saved stack pointer for CoCo3 RAM call.
                      (     DiagCart.asm):00041         
                      (     DiagCart.asm):00042         ; RAM test related
0006                  (     DiagCart.asm):00043         TestVector      RMB     2               ; address of the test routine to use.
0008                  (     DiagCart.asm):00044         TestBase        RMB     2               ; QRamTest / RamTest base
000A                  (     DiagCart.asm):00045         TestEnd         RMB     2               ; QRamTest / RamTest last address to test +1
000C                  (     DiagCart.asm):00046         TestFailAddr    RMB     2               ; QRamTest / RamTest failed at address
000E                  (     DiagCart.asm):00047         TestWrote       RMB     1               ; QRamTest / RamTest written byte
000F                  (     DiagCart.asm):00048         TestRead        RMB     1               ; QRamTest / RamTest read byte
0010                  (     DiagCart.asm):00049         TestSaved       RMB     1               ; saved value when test failed....
0011                  (     DiagCart.asm):00050         TestPage1       RMB     1               ; Are we testing page 1?
0012                  (     DiagCart.asm):00051         TestDPlus       RMB     1               ; Are we testing Dragon Plus RAM?
0013                  (     DiagCart.asm):00052         TestDPlusBank   RMB     1               ; Bank to set if testing DPlus
0014                  (     DiagCart.asm):00053         TestContinue    RMB     1               ; are we starting a test from scratch or continuing?
0015                  (     DiagCart.asm):00054         CoCo3MinBank    RMB     1               ; Minimum bank number for CoCo3 to test
0016                  (     DiagCart.asm):00055         CoCo3Blocks     RMB     1               ; Ram test testing CoCo3 RAM blocks
0017                  (     DiagCart.asm):00056         CoCo3SaveBlock2 RMB     1               ; Saved block2
0018                  (     DiagCart.asm):00057         CoCo3SaveBlock4 RMB     1               ; Saved block4
0019                  (     DiagCart.asm):00058         CoCo3BlockNo    RMB     1               ; Block number under test
                      (     DiagCart.asm):00059         
                      (     DiagCart.asm):00060         ; VDG screen related
001A                  (     DiagCart.asm):00061         ScreenOK        RMB     1               ; Is it ok to use 6847 screen?
001B                  (     DiagCart.asm):00062         ScreenBase      RMB     2               ; Screen base address
001D                  (     DiagCart.asm):00063         ScreenEnd       RMB     2               ; End of screen RAM, just to make things easier!
001F                  (     DiagCart.asm):00064         CursorPos       RMB     2               ; cursor address
0021                  (     DiagCart.asm):00065         SaveCursorPos   RMB     2               ; saved cursor pos      
                      (     DiagCart.asm):00066         
                      (     DiagCart.asm):00067         ; Buffer for PIA registers
0023                  (     DiagCart.asm):00068         PIABuff         RMB     6               ; Buffer for PIA values
                      (     DiagCart.asm):00069         
                      (     DiagCart.asm):00070         ; LCD related
0029                  (     DiagCart.asm):00071         LCDFlag         RMB     1               ; LCD Initialized flag
002A                  (     DiagCart.asm):00072         LCDLineNo       RMB     1               ; Current LCD line number
                      (     DiagCart.asm):00073         
                      (     DiagCart.asm):00074         ; User interface related
002B                  (     DiagCart.asm):00075         PrintBuff       RMB     PrintBuffLen+1  ; print buffer, used by Hex routines amongst others
007C                  (     DiagCart.asm):00076         PrintBuffPos    RMB     2               ; Address in print buffer
007E                  (     DiagCart.asm):00077         OutputFlag      RMB     1               ; devices to output to.....
007F                  (     DiagCart.asm):00078         OldOutputFlag   RMB     1               ; saved version of above
0080                  (     DiagCart.asm):00079         Paused          RMB     1               ; are we paused or not?
0081                  (     DiagCart.asm):00080         NoWait          RMB     1               ; Should we skip delays (except for errors?)
                      (     DiagCart.asm):00081         
                      (     DiagCart.asm):00082         ; Interrupt related
0082                  (     DiagCart.asm):00083         IRQCount        RMB     1               ; IRQ counter
0083                  (     DiagCart.asm):00084         NMICount        RMB     2               ; NMI counter
0085                  (     DiagCart.asm):00085         FIRQCount       RMB     2               ; FIRQ counter
0087                  (     DiagCart.asm):00086         WaitInt         RMB     1               ; interrupt wait flags
0088                  (     DiagCart.asm):00087         GotInt          RMB     1               ; Int we got, see XXXWait flags below
                      (     DiagCart.asm):00088         
                      (     DiagCart.asm):00089         
                      (     DiagCart.asm):00090         ; Temp screen buffer, note **MUST** come at end of RAM vars or DP offsets after it will 
                      (     DiagCart.asm):00091         ; not work!
0089                  (     DiagCart.asm):00092         ScreenBuffer    RMB     TextScreenLen   ; buffer for one screenfull.
                      (     DiagCart.asm):00093         
0289                  (     DiagCart.asm):00094         RamEnd
                      (     DiagCart.asm):00095         
     0001             (     DiagCart.asm):00096         DevVDG          EQU     %00000001       ; vdg
     0002             (     DiagCart.asm):00097         DevLCD          EQU     %00000010       ; lcd   
                      (     DiagCart.asm):00098         
                      (     DiagCart.asm):00099                 
                      (     DiagCart.asm):00100                         org     CartBase
C000 2027             (     DiagCart.asm):00101         Start           bra     NewReset        ; So we can be entered with EXEC &HC000
                      (     DiagCart.asm):00102         
                      (     DiagCart.asm):00103                         ifdef Test
C002 29               (     DiagCart.asm):00104         TestDIP         fcb     DIPTest         ; test machine, defined in hardware.asm         
                      (     DiagCart.asm):00105                         endc
                      (     DiagCart.asm):00106         
                      (     DiagCart.asm):00107         ; Vector indirects, these mean the vectors at end of rom never need to change.
                      (     DiagCart.asm):00108         ; ATTENTION! do ***NOT** change the filler below or updating ROM may break interface!
                      (     DiagCart.asm):00109         
C003 0000000000000000 (     DiagCart.asm):00110                         zmb     ((CartBase+$10)-*)
     0000000000
C010 44494147         (     DiagCart.asm):00111         Signature       fcc     "DIAG"          ; So flasher can recognize us.
                      (     DiagCart.asm):00112                         
C014 7ED524           (     DiagCart.asm):00113         IndirectVSWI3   jmp     NewSWI3
C017 7ED525           (     DiagCart.asm):00114         IndirectVSWI2   jmp     NewSWI2
C01A 7ED526           (     DiagCart.asm):00115         IndirectVFIRQ   jmp     NewFIRQ
C01D 7ED546           (     DiagCart.asm):00116         IndirectVIRQ    jmp     NewIRQ
C020 7ED561           (     DiagCart.asm):00117         IndirectVSWI    jmp     NewSWI
C023 7ED562           (     DiagCart.asm):00118         IndirectVNMI    jmp     NewNMI
C026 7EC029           (     DiagCart.asm):00119         IndirectVReset  jmp     NewReset
                      (     DiagCart.asm):00120                         
C029 1A50             (     DiagCart.asm):00121         NewReset        orcc    #IntsDisable    ; Disable ints so they are disabled if entered with EXEC
C02B 7FFF44           (     DiagCart.asm):00122                         clr     StatusReg       ; Clear status
C02E 7FFF40           (     DiagCart.asm):00123                         clr     LEDS            ; turn all LEDS off
C031 7FFF41           (     DiagCart.asm):00124                         clr     LEDS2
                      (     DiagCart.asm):00125                 
                      (     DiagCart.asm):00126         ; first test that we have usable SRAM on the card as we will put our vars and
                      (     DiagCart.asm):00127         ; stack here, so we can still operate if main RAM is shot.
                      (     DiagCart.asm):00128         
C034 8E0000           (     DiagCart.asm):00129                         ldx     #RAMBase        ; point to base of RAM
                      (     DiagCart.asm):00130                         
C037 8C03FD           (     DiagCart.asm):00131         SRAMTestLoop    cmpx    #RAMTop-2       ; reached top of RAM?
C03A 2715             (     DiagCart.asm):00132                         beq     SRAMOK          ; yes SRAM is OK, continue
                      (     DiagCart.asm):00133         
C03C 86FF             (     DiagCart.asm):00134                         lda     #$FF            ; Test value
C03E A784             (     DiagCart.asm):00135                         sta     ,x              ; save it
C040 A184             (     DiagCart.asm):00136                         cmpa    ,x              ; same
C042 2608             (     DiagCart.asm):00137                         bne     SRAMFail        ; nope fail
                      (     DiagCart.asm):00138                 
C044 6384             (     DiagCart.asm):00139                         com     ,x              ; invert
C046 6D80             (     DiagCart.asm):00140                         tst     ,x+             ; is it zero?
C048 2602             (     DiagCart.asm):00141                         bne     SRAMFail        ; nope fail
C04A 20EB             (     DiagCart.asm):00142                         bra     SRAMTestLoop
                      (     DiagCart.asm):00143                         
C04C 73FF40           (     DiagCart.asm):00144         SRAMFail        com     LEDS            ; flag SRAM fail!
C04F 20FE             (     DiagCart.asm):00145         L@              bra     L@              ; loop forever
                      (     DiagCart.asm):00146         
                      (     DiagCart.asm):00147         ; So if we reach this point SRAM seems to be OK, so setup stack
C051 10CE03FD         (     DiagCart.asm):00148         SRAMOK          lds     #RAMTop-2       ; setup stack pointer
C055 8E0000           (     DiagCart.asm):00149                         ldx     #RamBegin       ; clear Ram vars
C058 108E0289         (     DiagCart.asm):00150                         ldy     #RamEnd         
C05C 170E75           (     DiagCart.asm):00151                         lbsr    RamZero         ; go clear it
                      (     DiagCart.asm):00152         
C05F 8600             (     DiagCart.asm):00153                         lda     #RAMPageNo      ; setup DP
C061 1F8B             (     DiagCart.asm):00154                         tfr     a,DP
                      (     DiagCart.asm):00155                         
     00               (     DiagCart.asm):00156                         SETDP   RAMPageNo       ; tell assembler
                      (     DiagCart.asm):00157         
C063 C640             (     DiagCart.asm):00158                         ldb     #DIPNoDelay     ; check to see if no wait dip is set
C065 170D0C           (     DiagCart.asm):00159                         lbsr    DIPMask 
C068 2702             (     DiagCart.asm):00160                         beq     SetupIRQ        ; no, delays as normal
                      (     DiagCart.asm):00161                         
C06A 0A81             (     DiagCart.asm):00162                         dec     NoWait          ; will make NoWait $ff
                      (     DiagCart.asm):00163                         
                      (     DiagCart.asm):00164         ; Init IRQ blink counter so we know IRQ is working later on. For MAME emulation we also
                      (     DiagCart.asm):00165         ; need to init the normal low ram secondary vector.
                      (     DiagCart.asm):00166                         
C06C 8632             (     DiagCart.asm):00167         SetupIRQ        lda     #IRQBlinkRate   ; setup for IRQ
C06E 9782             (     DiagCart.asm):00168                         sta     IRQCount
                      (     DiagCart.asm):00169                         
                      (     DiagCart.asm):00170         ; Flag that we are ready, and send Signon message to LCD, we can't use normal screen
                      (     DiagCart.asm):00171         ; at this point as we have not verified that the screen RAM is OK       
C070 8680             (     DiagCart.asm):00172                         lda     #StatusReady    ; flag that we are ready in status register
C072 BAFF44           (     DiagCart.asm):00173                         ora     StatusReg
C075 B7FF44           (     DiagCart.asm):00174                         sta     StatusReg       ; store it back
                      (     DiagCart.asm):00175                         
C078 170F00           (     DiagCart.asm):00176                         lbsr    LCDInit         ; try initializing LCD
C07B 3089D153         (     DiagCart.asm):00177                         leax    LCDSignon,x     ; point to message
C07F 170F64           (     DiagCart.asm):00178                         lbsr    LCDWriteStr     ; write it to LCD.
                      (     DiagCart.asm):00179                         
C082 8601             (     DiagCart.asm):00180                         lda     #1              ; Initialize LED value  
C084 B7FF40           (     DiagCart.asm):00181                         sta     LEDS            ; output LED value
                      (     DiagCart.asm):00182         
                      (     DiagCart.asm):00183         ; Setup PIAs, different routine if configured as Dragon or CoCo.
                      (     DiagCart.asm):00184         ; On a Dragon 32 or CoCo 1/2 the RAM chip size jumpers are read and the SAM
                      (     DiagCart.asm):00185         ; is programmed as needed.
C087 170CFD           (     DiagCart.asm):00186                         lbsr    SetupPIAs       ; setup PIAs and SAM
C08A 7CFF40           (     DiagCart.asm):00187                         inc     LEDS
                      (     DiagCart.asm):00188         
C08D 171059           (     DiagCart.asm):00189                         lbsr    WaitPause       ; Wait a delay
                      (     DiagCart.asm):00190         
                      (     DiagCart.asm):00191         ; check for button S4 pressed, if down show build date
C090 8608             (     DiagCart.asm):00192                         lda     #ButtonS4       ; check for button S4 being pressed?
C092 170ECA           (     DiagCart.asm):00193                         lbsr    ButtonPressed   ; 
C095 2614             (     DiagCart.asm):00194                         bne     NoDate          ; no skip showing compile date
                      (     DiagCart.asm):00195         
C097 170F78           (     DiagCart.asm):00196                         lbsr    LCDClrScr       ; clear LCD screen
C09A 308D10D8         (     DiagCart.asm):00197                         leax    LBuildDate,pcr  ; point at message
C09E 170F45           (     DiagCart.asm):00198                         lbsr    LCDWriteStr     ; display it
                      (     DiagCart.asm):00199                         
C0A1 308D146B         (     DiagCart.asm):00200                         leax    BuildDate,pcr   ; point at build date
C0A5 170F3E           (     DiagCart.asm):00201                         lbsr    LCDWriteStr     ; display it
                      (     DiagCart.asm):00202                         
C0A8 17103E           (     DiagCart.asm):00203                         lbsr    WaitPause       ; Wait a delay
                      (     DiagCart.asm):00204                         
C0AB 308D10DE         (     DiagCart.asm):00205         NoDate          leax    LScreenRAM,pcr  ; Point at screen ram test message
C0AF 170F9D           (     DiagCart.asm):00206                         lbsr    LCDClrWriteStr  ; write it to LCD
                      (     DiagCart.asm):00207         
                      (     DiagCart.asm):00208         ; Tell the SAM where we have put the screen RAM
C0B2 170B8A           (     DiagCart.asm):00209                         lbsr    InitScreenVars  ; Init screen vars, even if screen not OK
C0B5 7CFF40           (     DiagCart.asm):00210                         inc     LEDS
                      (     DiagCart.asm):00211         
                      (     DiagCart.asm):00212         ; Test the screen RAM, if the screen RAM is OK, we can clear it and use the VDG
                      (     DiagCart.asm):00213         ; as well as LCD for output.            
C0B8 8E0400           (     DiagCart.asm):00214                         ldx     #TextScreenBase ; point at text screen
C0BB 31890200         (     DiagCart.asm):00215                         leay    TextScreenLen,x ; last address
C0BF 170511           (     DiagCart.asm):00216                         lbsr    QRamTest        ; quick ram test        
C0C2 270D             (     DiagCart.asm):00217                         beq     ScreenRamOK     ; screen RAM ok, use it for full tests
                      (     DiagCart.asm):00218                 
                      (     DiagCart.asm):00219                 
C0C4 1704A8           (     DiagCart.asm):00220         NoScreen        lbsr    RAMFail         ; display ram fail message on LCD
                      (     DiagCart.asm):00221         
C0C7 B6FF40           (     DiagCart.asm):00222                         lda     LEDS            ; mark fail
C0CA 8A80             (     DiagCart.asm):00223                         ora     #$80
C0CC B7FF40           (     DiagCart.asm):00224                         sta     LEDS
                      (     DiagCart.asm):00225         
C0CF 200E             (     DiagCart.asm):00226                         bra     QuickTest       ; move on with LCD only 
                      (     DiagCart.asm):00227                         
C0D1 0C1A             (     DiagCart.asm):00228         ScreenRamOK     inc     ScreenOK        ; it's OK to use VDG screen     
C0D3 8601             (     DiagCart.asm):00229                         lda     #DevVDG         ; select VDG as output device
C0D5 9A7E             (     DiagCart.asm):00230                         ora     OutputFlag
C0D7 977E             (     DiagCart.asm):00231                         sta     OutputFlag
                      (     DiagCart.asm):00232         
C0D9 170F69           (     DiagCart.asm):00233                         lbsr    LCDPassed       ; display passed message and wait a short while
C0DC 7CFF40           (     DiagCart.asm):00234                         inc     LEDS
                      (     DiagCart.asm):00235         
                      (     DiagCart.asm):00236         ; Do quick RAM tests, just testing with $FF and $00             
C0DF 170075           (     DiagCart.asm):00237         QuickTest       lbsr    ShowMachine     ; Show machine we are set to
                      (     DiagCart.asm):00238                 
C0E2 170995           (     DiagCart.asm):00239                         lbsr    GetCPUType      ; Get show CPU type
                      (     DiagCart.asm):00240                         
C0E5 1703BB           (     DiagCart.asm):00241                         lbsr    DoQuickTest     ; Do quick RAM test
                      (     DiagCart.asm):00242         
                      (     DiagCart.asm):00243         ; Address test, to try and detect address line errors.
C0E8 1705C3           (     DiagCart.asm):00244                         lbsr    AddressRAMTest  ; Do RAM address line test 
                      (     DiagCart.asm):00245                         
                      (     DiagCart.asm):00246         ; Checksum ROMS at $8000 and $A000, lookup checksums in table of known ROMS
                      (     DiagCart.asm):00247         ; and identify them if found.           
C0EB 17065A           (     DiagCart.asm):00248                         lbsr    ChecksumROMS    ; do ROM checksums
                      (     DiagCart.asm):00249                 
C0EE 170F21           (     DiagCart.asm):00250                         lbsr    LCDClrScr       ; Clear LCD screen
C0F1 308D129D         (     DiagCart.asm):00251                         leax    LIntsEnable,pcr ; point to message
C0F5 170F9B           (     DiagCart.asm):00252                         lbsr    DevWriteStr     ; write it to LCD
C0F8 170FEE           (     DiagCart.asm):00253                         lbsr    WaitPause       ; Wait for user to read results
                      (     DiagCart.asm):00254                         
                      (     DiagCart.asm):00255                         ifdef   Test
C0FB 1A50             (     DiagCart.asm):00256                         orcc    #IntsDisable    ; disable interrupts
                      (     DiagCart.asm):00257                         
C0FD 867E             (     DiagCart.asm):00258                         lda     #$7E            ; opcode for JMP
                      (     DiagCart.asm):00259                         
C0FF 8ED546           (     DiagCart.asm):00260                         ldx     #NewIRQ         ; setup low ram IRQ vector
C102 BF010D           (     DiagCart.asm):00261                         stx     SecVecIRQ+1
C105 B7010C           (     DiagCart.asm):00262                         sta     SecVecIRQ
                      (     DiagCart.asm):00263         
C108 8ED526           (     DiagCart.asm):00264                         ldx     #NewFIRQ        ; setup low ram FIRQ vector
C10B BF0110           (     DiagCart.asm):00265                         stx     SecVecFIRQ+1
C10E B7010F           (     DiagCart.asm):00266                         sta     SecVecFIRQ
                      (     DiagCart.asm):00267         
                      (     DiagCart.asm):00268                         endc
                      (     DiagCart.asm):00269         
C111 B6FF03           (     DiagCart.asm):00270                         lda     PIA0CRB         ; get pia0 control register B
C114 8A01             (     DiagCart.asm):00271                         ora     #CRIRQ          ; enable CB1 IRQ generation on /HS
C116 B7FF03           (     DiagCart.asm):00272                         sta     PIA0CRB         ; save it back to PIA0          
                      (     DiagCart.asm):00273                         
                      (     DiagCart.asm):00274                         ifndef  Test
                      (     DiagCart.asm):00275                         lda     PIA1CRB         ; get PIA1, control register B
                      (     DiagCart.asm):00276                         ora     #CRIRQ          ; enable CB1 FIRQ generation CART
                      (     DiagCart.asm):00277                         sta     PIA1CRB         ; save it back to PIA1          
                      (     DiagCart.asm):00278                         endc
                      (     DiagCart.asm):00279                         
C119 1CAF             (     DiagCart.asm):00280                         andcc   #IntsEnable     ; enable IRQ, FIRQ
                      (     DiagCart.asm):00281         
                      (     DiagCart.asm):00282         ; Dump contents of PIA registers, and test CRx and DDRx values have remained set                
C11B 17088B           (     DiagCart.asm):00283                         lbsr    DumpPIAS        ; Dump PIA registers
                      (     DiagCart.asm):00284         
                      (     DiagCart.asm):00285         ; Test triggering of NMI and FIRQ, IRQ will be flashing LED if working.         
C11E 7CFF40           (     DiagCart.asm):00286                         inc     LEDS
C121 170682           (     DiagCart.asm):00287                         lbsr    InterruptTest   ; Do interrupt test
                      (     DiagCart.asm):00288         
                      (     DiagCart.asm):00289         ; Test cartridge SCS / P2 and CTS / CART
C124 7CFF40           (     DiagCart.asm):00290                         inc     LEDS
C127 1706E6           (     DiagCart.asm):00291                         lbsr    CartLineTest    ; Test nCTS and nP2 cart lines  
                      (     DiagCart.asm):00292         
                      (     DiagCart.asm):00293         ; If enabled by DIP switch, do long tests
C12A 308D1193         (     DiagCart.asm):00294                         leax    LMessBeginLong,pcr      ; Begin long test message
C12E 17039E           (     DiagCart.asm):00295                         lbsr    DoLongTest      ; do long RAM test
                      (     DiagCart.asm):00296         
                      (     DiagCart.asm):00297         ; If enabled by DIP switch do Dragon 64 tests
C131 1701D3           (     DiagCart.asm):00298                         lbsr    Dragon64Tests   ; Go do Dragon64 only tests
                      (     DiagCart.asm):00299                         
                      (     DiagCart.asm):00300         ; If we detected 64K DRAMS, test the upper 32K.         
C134 17026C           (     DiagCart.asm):00301                         lbsr    RAM64Tests      ; Go do upper RAM test if 64K rams      
                      (     DiagCart.asm):00302         ; Probe for and test Dragon Plus addon.
C137 170285           (     DiagCart.asm):00303                         lbsr    PlusTests       ; Test Dragon Plus
                      (     DiagCart.asm):00304         
                      (     DiagCart.asm):00305         ; If enabled by DIP switch do CoCo3 specific tests
C13A 17005F           (     DiagCart.asm):00306                         lbsr    CoCo3Tests      ; test coco3
                      (     DiagCart.asm):00307         
                      (     DiagCart.asm):00308         ; Tests complete prompt user to run again.
C13D 171000           (     DiagCart.asm):00309                         lbsr    VCRLCDClrScr    ; clear LCD screen, CR on VDG
C140 308D12EB         (     DiagCart.asm):00310                         leax    LComplete,pcr   ; tests complete message
C144 170F4C           (     DiagCart.asm):00311                         lbsr    DevWriteStr     ; go write it
                      (     DiagCart.asm):00312                         
C147 C680             (     DiagCart.asm):00313                         ldb     #DIPLoopTest    ; should we test continually?
C149 170C28           (     DiagCart.asm):00314                         lbsr    DIPMask         
C14C 2606             (     DiagCart.asm):00315                         bne     LoopTest
                      (     DiagCart.asm):00316                                 
C14E 170DF2           (     DiagCart.asm):00317                         lbsr    WaitNext        ; wait for next to be pressed
                      (     DiagCart.asm):00318         
C151 170947           (     DiagCart.asm):00319                         lbsr    ToggleMode      ; toggle mode!
                      (     DiagCart.asm):00320                         
C154 16FED2           (     DiagCart.asm):00321         LoopTest        lbra    NewReset        ; go test again!
                      (     DiagCart.asm):00322                         
                      (     DiagCart.asm):00323         
                      (     DiagCart.asm):00324         ; Show what type of machine and configured RAM chip size.
C157 C608             (     DiagCart.asm):00325         ShowMachine     ldb     #DIPDgnCoCo     ; test Dragon (1) or CoCo (0)
C159 170C18           (     DiagCart.asm):00326                         lbsr    DIPMask         ; test it
C15C 2606             (     DiagCart.asm):00327                         bne     IsDragon        
                      (     DiagCart.asm):00328                         
C15E 318D11D8         (     DiagCart.asm):00329                         leay    LModelTableC,pcr ; point to CoCo name table
C162 2004             (     DiagCart.asm):00330                         bra     DoShow
                      (     DiagCart.asm):00331                         
C164 318D11C8         (     DiagCart.asm):00332         IsDragon        leay    LModelTableD,pcr ; point to Dragon name table
                      (     DiagCart.asm):00333                         
C168 3420             (     DiagCart.asm):00334         DoShow          pshs    y               ; save message pointer
                      (     DiagCart.asm):00335         ;               ldd     #$0500          ; X,Y = 5,0
                      (     DiagCart.asm):00336         ;               lbsr    GotoXY
                      (     DiagCart.asm):00337                         
C16A 308D11AC         (     DiagCart.asm):00338                         leax    LMachineConf,pcr ; point at message
C16E 170EDE           (     DiagCart.asm):00339                         lbsr    LCDClrWriteStr  ; write it to LCD
                      (     DiagCart.asm):00340                                         
C171 3520             (     DiagCart.asm):00341                         puls    y               ; recover machine type name
C173 AEA4             (     DiagCart.asm):00342                         ldx     ,y              ; get address of machine type (Dragon or CoCo)
C175 170F1B           (     DiagCart.asm):00343                         lbsr    DevWriteStr     ; write it to LCD and VDG
                      (     DiagCart.asm):00344         
C178 C604             (     DiagCart.asm):00345                         ldb     #DIPSetRAM      ; are we setting RAM directly?
C17A 170BF7           (     DiagCart.asm):00346                         lbsr    DIPMask         ; test it
C17D 260D             (     DiagCart.asm):00347                         bne     ShowChip        ; yes don't interpret machine type
                      (     DiagCart.asm):00348         
                      (     DiagCart.asm):00349                         ifdef   Test
C17F B6C002           (     DiagCart.asm):00350                         lda     TestDIP
                      (     DiagCart.asm):00351                         else
                      (     DiagCart.asm):00352                         lda     DIPSw
                      (     DiagCart.asm):00353                         endc
C182 8403             (     DiagCart.asm):00354                         anda    #DIPMachineMask ; mask out machine
                      (     DiagCart.asm):00355                         
C184 3122             (     DiagCart.asm):00356                         leay    2,y             ; point at machine names (32, 64, Alpha etc)
C186 48               (     DiagCart.asm):00357                         lsla                    ; multiply a by 2 to get word offset
C187 AEA6             (     DiagCart.asm):00358                         ldx     a,y             ; get address of machine type
C189 170F07           (     DiagCart.asm):00359                         lbsr    DevWriteStr     ; write it to LCD and VDG
                      (     DiagCart.asm):00360         
                      (     DiagCart.asm):00361         ; Write detected RAM *CHIP* type, 4K, 16K, 64K, this is detected at power on time
                      (     DiagCart.asm):00362         ; from the chip select links on the Dragon 32 or CoCo motherboard.
                      (     DiagCart.asm):00363         ; Since the Dragon 64 only ever has 64K chips, these are assumed rather than 
                      (     DiagCart.asm):00364         ; detected, as there is no jumper to detect from.
                      (     DiagCart.asm):00365         
C18C 308D11B4         (     DiagCart.asm):00366         ShowChip        leax    LRAMTable,pcr   ; point at table
C190 9600             (     DiagCart.asm):00367                         lda     RAMFlag         ; get chip type
C192 48               (     DiagCart.asm):00368                         lsla                    ; multiply a by 2 to get word offset
C193 AE86             (     DiagCart.asm):00369                         ldx     a,x             ; get offset of message
C195 170EFB           (     DiagCart.asm):00370                         lbsr    DevWriteStr     ; write it
                      (     DiagCart.asm):00371                         
C198 170AF5           (     DiagCart.asm):00372                         lbsr    VSpace
                      (     DiagCart.asm):00373         ;               lbsr    WaitPause       ; wait a while
C19B 39               (     DiagCart.asm):00374                         rts
                      (     DiagCart.asm):00375                 
                      (     DiagCart.asm):00376                         
                      (     DiagCart.asm):00377         ;****[ Included modules: Tests ]******************************************                      
                      (     DiagCart.asm):00378                         use     coco3tests.asm  ; CoCo 3 specific tests, extra RAM, GIME etc.
                      (   coco3tests.asm):00001         ;
                      (   coco3tests.asm):00002         ; CoCo 3 specific tests.
                      (   coco3tests.asm):00003         ;
                      (   coco3tests.asm):00004         
                      (   coco3tests.asm):00005         ;DefaultInit1   EQU     #Init1CoCo+Innit1MMU+Init1GIRQ  
     00C0             (   coco3tests.asm):00006         DefaultInit1    EQU     Init1CoCo+Init1MMU
                      (   coco3tests.asm):00007         ;+Init1GIRQ     
                      (   coco3tests.asm):00008         
                      (   coco3tests.asm):00009         
                      (   coco3tests.asm):00010                         ifndef Test
C19C                  (   coco3tests.asm):00011         DPOffset        EQU     $80             ; Offset of new DP from current
C19C                  (   coco3tests.asm):00012         RAMOffset       EQU     DPOffset*256    ; Offset to routines copied to RAM
C19C                  (   coco3tests.asm):00013         StackOffset     EQU     RAMOffset               
                      (   coco3tests.asm):00014                         else
     0000             (   coco3tests.asm):00015         DPOffset        EQU     $00             ; Offset of new DP from current
     8000             (   coco3tests.asm):00016         RAMOffset       EQU     $8000           ; Offset to routines copied to RAM
     2000             (   coco3tests.asm):00017         StackOffset     EQU     $2000
                      (   coco3tests.asm):00018                         endc
                      (   coco3tests.asm):00019                         
C19C                  (   coco3tests.asm):00020         CoCo3Tests
C19C 0D03             (   coco3tests.asm):00021                 tst     IsCoCo3                 ; is this machine a coco3 ?
C19E 2705             (   coco3tests.asm):00022                 beq     CoCo3TestsExit          ; nope, exit
                      (   coco3tests.asm):00023         
C1A0 1700AF           (   coco3tests.asm):00024                 lbsr    ChecksumCC3             ; Checksum ROMS
                      (   coco3tests.asm):00025                 
C1A3 8D01             (   coco3tests.asm):00026                 bsr     CoCo3RAM                ; CoCo3 RAM test        
                      (   coco3tests.asm):00027         
C1A5                  (   coco3tests.asm):00028         CoCo3TestsExit
C1A5 39               (   coco3tests.asm):00029                 rts
                      (   coco3tests.asm):00030         
C1A6                  (   coco3tests.asm):00031         CoCo3RAM
C1A6 1A50             (   coco3tests.asm):00032                 orcc    #IntsDisable            ; disable interrupts
C1A8 7FFFD9           (   coco3tests.asm):00033                 clr     SAMSR2                  ; 2MHz mode for RAM test!
                      (   coco3tests.asm):00034                 
C1AB 170341           (   coco3tests.asm):00035                 lbsr    GetTestLength           ; Get and set test length
C1AE 8D74             (   coco3tests.asm):00036                 bsr     GetCoCo3RamSize         ; Get minimum bank number
                      (   coco3tests.asm):00037                 
C1B0 0316             (   coco3tests.asm):00038                 com     CoCo3Blocks             ; Flag that we are testing blocks
                      (   coco3tests.asm):00039                 
C1B2 B6FFA2           (   coco3tests.asm):00040                 lda     MMUT0Block2             ; get current block 2 and save it
C1B5 9717             (   coco3tests.asm):00041                 sta     CoCo3SaveBlock2
                      (   coco3tests.asm):00042                 
C1B7 B6FFA4           (   coco3tests.asm):00043                 lda     MMUT0Block4             ; get current block 4 and save it
C1BA 9718             (   coco3tests.asm):00044                 sta     CoCo3SaveBlock4
                      (   coco3tests.asm):00045                 
                      (   coco3tests.asm):00046         
C1BC 9615             (   coco3tests.asm):00047                 lda     CoCo3MinBank            ; Get start block
C1BE                  (   coco3tests.asm):00048         CoCo3RAMLoop
C1BE B7FFA2           (   coco3tests.asm):00049                 sta     MMUT0Block2             ; map it in
C1C1 9719             (   coco3tests.asm):00050                 sta     CoCo3BlockNo            ; Tell display procedure
                      (   coco3tests.asm):00051                 
C1C3 308D0055         (   coco3tests.asm):00052                 leax    BlockRange,pcr          ; point at address table
C1C7 170339           (   coco3tests.asm):00053                 lbsr    DoRamTest               ; go test the RAM
C1CA 261D             (   coco3tests.asm):00054                 bne     CoCo3RAMExit            ; failure, exit
                      (   coco3tests.asm):00055                 
C1CC B6FFA2           (   coco3tests.asm):00056                 lda     MMUT0Block2             ; move to next bank
C1CF 843F             (   coco3tests.asm):00057                 anda    #BlockNoMask            ; Mask out invalid bits
C1D1 4C               (   coco3tests.asm):00058                 inca                            
C1D2 813B             (   coco3tests.asm):00059                 cmpa    #MaxBlockRRMode         ; > max block with ROM paged in?
C1D4 2FE8             (   coco3tests.asm):00060                 ble     CoCo3RAMLoop            ; no keep going
                      (   coco3tests.asm):00061         
                      (   coco3tests.asm):00062         ; We have reached the maximum block number we can test with the ROMS enabled as blocks
                      (   coco3tests.asm):00063         ; $3C-$3F will be mapped to the ROM and not RAM!
                      (   coco3tests.asm):00064         ; Now that we have tested the lower blocks, we can copy ourselves to lower RAM
                      (   coco3tests.asm):00065         ; page the roms out and continue testing from there.....
                      (   coco3tests.asm):00066         
C1D6 9617             (   coco3tests.asm):00067                 lda     CoCo3SaveBlock2         ; restore mapped block 2
C1D8 B7FFA2           (   coco3tests.asm):00068                 sta     MMUT0Block2
                      (   coco3tests.asm):00069         
C1DB 863C             (   coco3tests.asm):00070                 lda     #MaxBlockRRMode+1       ; Start block
C1DD 9715             (   coco3tests.asm):00071                 sta     CoCo3MinBank            ; save it for later
                      (   coco3tests.asm):00072         
C1DF 1700B9           (   coco3tests.asm):00073                 lbsr    CoCo3RAMCopy            ; copy us to RAM
                      (   coco3tests.asm):00074                 
C1E2 308D0012         (   coco3tests.asm):00075                 leax    CoCo3RAMTestRAM,pcr     ; point to continued test
C1E6 BDC2C7           (   coco3tests.asm):00076                 jsr     CoCo3RAMCallX           ; call it
                      (   coco3tests.asm):00077                 
                      (   coco3tests.asm):00078                 
C1E9                  (   coco3tests.asm):00079         CoCo3RAMExit
C1E9 9617             (   coco3tests.asm):00080                 lda     CoCo3SaveBlock2         ; restore mapped block 2
C1EB B7FFA2           (   coco3tests.asm):00081                 sta     MMUT0Block2
                      (   coco3tests.asm):00082         
C1EE 9618             (   coco3tests.asm):00083                 lda     CoCo3SaveBlock4         ; restore mapped block 2
C1F0 B7FFA4           (   coco3tests.asm):00084                 sta     MMUT0Block4
                      (   coco3tests.asm):00085         
C1F3 0F16             (   coco3tests.asm):00086                 clr     CoCo3Blocks             ; Flag normal RAM test
C1F5 1CAF             (   coco3tests.asm):00087                 andcc   #IntsEnable             ; renable interrupts
C1F7 39               (   coco3tests.asm):00088                 rts
                      (   coco3tests.asm):00089         
C1F8                  (   coco3tests.asm):00090         CoCo3RAMTestRAM 
C1F8 7FFFDF           (   coco3tests.asm):00091                 clr     SAMSTY                  ; all RAM mode....
                      (   coco3tests.asm):00092         
                      (   coco3tests.asm):00093         ; We have to get and set the test routine address, as the old ROM based
                      (   coco3tests.asm):00094         ; address will still be stored there.....       
C1FB 1702F1           (   coco3tests.asm):00095                 lbsr    GetTestLength           ; Get and set test length
C1FE 9615             (   coco3tests.asm):00096                 lda     CoCo3MinBank            ; Get start block
C200                  (   coco3tests.asm):00097         CoCo3RAMLoop2
C200 B7FFA4           (   coco3tests.asm):00098                 sta     MMUT0Block4             ; map it in
C203 9719             (   coco3tests.asm):00099                 sta     CoCo3BlockNo            ; Tell display procedure
                      (   coco3tests.asm):00100                 
C205 308D0017         (   coco3tests.asm):00101                 leax    BlockRange2,pcr         ; point at address table
C209 1702F7           (   coco3tests.asm):00102                 lbsr    DoRamTest               ; go test the RAM
C20C 260A             (   coco3tests.asm):00103                 bne     CoCo3RAMExit2           ; failure, exit
                      (   coco3tests.asm):00104                 
C20E B6FFA4           (   coco3tests.asm):00105                 lda     MMUT0Block4             ; move to next bank
C211 843F             (   coco3tests.asm):00106                 anda    #BlockNoMask            ; Mask out invalid bits
C213 4C               (   coco3tests.asm):00107                 inca                            
C214 813F             (   coco3tests.asm):00108                 cmpa    #MaxBlock               ; > max block 
C216 2FE8             (   coco3tests.asm):00109                 ble     CoCo3RAMLoop2           ; no keep going
                      (   coco3tests.asm):00110                         
C218                  (   coco3tests.asm):00111         CoCo3RAMExit2
C218 7FFFDE           (   coco3tests.asm):00112                 clr     SAMCTY                  ; RAM / ROM mode....
C21B 39               (   coco3tests.asm):00113                 rts
                      (   coco3tests.asm):00114                 
C21C                  (   coco3tests.asm):00115         BlockRange
C21C 40006000         (   coco3tests.asm):00116                 FDB     Block2Base,Block3Base   ; Area of memory with block mapped in
C220                  (   coco3tests.asm):00117         BlockRange2
C220 8000A000         (   coco3tests.asm):00118                 FDB     Block4Base,Block5Base   ; Area of memory with block mapped in, upper blocks
                      (   coco3tests.asm):00119         
                      (   coco3tests.asm):00120         ; Work out the Size of the RAM (128K or 512K), by checking for RAM 
                      (   coco3tests.asm):00121         ; mirroring.    
     6809             (   coco3tests.asm):00122         TestWord        EQU     $6809           ; test word for mirror check
                      (   coco3tests.asm):00123         
C224                  (   coco3tests.asm):00124         GetCoCo3RamSize 
C224 FCFFA2           (   coco3tests.asm):00125                 ldd     MMUT0Block2             ; save current mappings
C227 3406             (   coco3tests.asm):00126                 pshs    d
                      (   coco3tests.asm):00127                 
C229 8630             (   coco3tests.asm):00128                 lda     #MinBlock128            ; Get minimum block number for 128K machine
C22B 9715             (   coco3tests.asm):00129                 sta     CoCo3MinBank            ; assume we only have 128K
                      (   coco3tests.asm):00130                 
C22D B7FFA2           (   coco3tests.asm):00131                 sta     MMUT0Block2             ; Map block in.
C230 8010             (   coco3tests.asm):00132                 suba    #$10                    ; Block no of mirror (if 128K)
C232 B7FFA3           (   coco3tests.asm):00133                 sta     MMUT0Block3             ; Map block in
                      (   coco3tests.asm):00134                 
C235 7F6000           (   coco3tests.asm):00135                 clr     Block3Base              ; clear first word of mirror block
C238 7F6001           (   coco3tests.asm):00136                 clr     Block3Base+1            
                      (   coco3tests.asm):00137                 
C23B CC6809           (   coco3tests.asm):00138                 ldd     #TestWord               ; get test word
C23E FD4000           (   coco3tests.asm):00139                 std     Block2Base              ; save it in block
C241 10B36000         (   coco3tests.asm):00140                 cmpd    Block3Base              ; is it mirrored?
C245 2704             (   coco3tests.asm):00141                 beq     RestoreMap              ; yes, leave machine as 128K
                      (   coco3tests.asm):00142                 
C247 8600             (   coco3tests.asm):00143         Set512K lda     #MinBlock512            ; min block for 512K
C249 9715             (   coco3tests.asm):00144                 sta     CoCo3MinBank            ; set it
                      (   coco3tests.asm):00145         
C24B                  (   coco3tests.asm):00146         RestoreMap      
C24B 3506             (   coco3tests.asm):00147                 puls    d                       ; restore mappings
C24D FDFFA2           (   coco3tests.asm):00148                 std     MMUT0Block2
C250 39               (   coco3tests.asm):00149                 rts
                      (   coco3tests.asm):00150                 
C251                  (   coco3tests.asm):00151         CoCo3GIMERegs
C251 39               (   coco3tests.asm):00152                 rts
                      (   coco3tests.asm):00153         
                      (   coco3tests.asm):00154         ;
                      (   coco3tests.asm):00155         ; Checksum 'hiddern' ROMS at $C000 and $E000
                      (   coco3tests.asm):00156         ;
C252                  (   coco3tests.asm):00157         ChecksumCC3
C252 8D47             (   coco3tests.asm):00158                 bsr     CoCo3RAMCopy            ; copy us to RAM
C254 308D0003         (   coco3tests.asm):00159                 leax    ChecksumCoCo3,pcr       ; Point to routine
C258 8D6D             (   coco3tests.asm):00160                 bsr     CoCo3RAMCallX           ; call copy in RAM
C25A 39               (   coco3tests.asm):00161                 rts
                      (   coco3tests.asm):00162         
C25B                  (   coco3tests.asm):00163         ChecksumCoCo3
C25B B6FF44           (   coco3tests.asm):00164                 lda     StatusReg               ; Set disable bit in Diag status reg
C25E 8A10             (   coco3tests.asm):00165                 ora     #StatusDisable
C260 B7FF44           (   coco3tests.asm):00166                 sta     StatusReg
                      (   coco3tests.asm):00167                 
C263 86C0             (   coco3tests.asm):00168                 lda     #DefaultInit1           ; Setup mapping of RAM
C265 84FC             (   coco3tests.asm):00169                 anda    #~Init1ROMMask          ; mask out any existing ROM bits
C267 8A02             (   coco3tests.asm):00170                 ora     #IntitROMInt            ; 32K internal ROM
C269 B7FF90           (   coco3tests.asm):00171                 sta     InitReg1                ; map it!
                      (   coco3tests.asm):00172                 
C26C 170DA3           (   coco3tests.asm):00173                 lbsr    LCDClrScr               ; Clear LCD screen
                      (   coco3tests.asm):00174                         
C26F 308D0FD5         (   coco3tests.asm):00175                 leax    LMessCSumC0,pcr         ; point to LCD message
C273 170E1D           (   coco3tests.asm):00176                 lbsr    DevWriteStr             ; write it to LCD
                      (   coco3tests.asm):00177                 
C276 CEC000           (   coco3tests.asm):00178                 ldu     #$C000                  ; first rom $C000-$DFFF
C279 108EE000         (   coco3tests.asm):00179                 ldy     #$E000
C27D 1704FA           (   coco3tests.asm):00180                 lbsr    ChecksumROM             ; go get checksum
                      (   coco3tests.asm):00181                         
C280 7CFF40           (   coco3tests.asm):00182                 inc     LEDS
                      (   coco3tests.asm):00183                         
C283 308D0FD6         (   coco3tests.asm):00184                 leax    LMessCSumE0,pcr         ; point to LCD message
C287 170E09           (   coco3tests.asm):00185                 lbsr    DevWriteStr             ; write it to LCD
                      (   coco3tests.asm):00186         
C28A CEE000           (   coco3tests.asm):00187                 ldu     #$E000                  ; second rom $E000-$FDFF
C28D 108EFE00         (   coco3tests.asm):00188                 ldy     #$FE00
C291 1704E6           (   coco3tests.asm):00189                 lbsr    ChecksumROM             ; go do checksum
                      (   coco3tests.asm):00190         
C294 7CFF40           (   coco3tests.asm):00191                 inc     LEDS
C297 170A4F           (   coco3tests.asm):00192                 lbsr    Newline                 ; and newline
                      (   coco3tests.asm):00193         
                      (   coco3tests.asm):00194         ;       ldb     #2                      ; double length delay
                      (   coco3tests.asm):00195         ;       lbsr    WaitBPause              ; Wait for user to read results
C29A 39               (   coco3tests.asm):00196                 rts
                      (   coco3tests.asm):00197                 
C29B                  (   coco3tests.asm):00198         CoCo3RAMCopy
C29B 3401             (   coco3tests.asm):00199                 pshs    cc                      ; save flags
C29D 8A50             (   coco3tests.asm):00200                 ora     #IntsDisable
C29F 86C0             (   coco3tests.asm):00201                 lda     #DefaultInit1           ; Setup Default mode, RAM/ROM mode
C2A1 B7FF90           (   coco3tests.asm):00202                 sta     InitReg1
                      (   coco3tests.asm):00203                 
C2A4 8EC000           (   coco3tests.asm):00204                 ldx     #CartBase               ; base of our RAM
C2A7 31898000         (   coco3tests.asm):00205                 leay    -RAMOffset,x            ; dest 32K lower
                      (   coco3tests.asm):00206                 
C2AB                  (   coco3tests.asm):00207         CoCo3RAMCopyLoop
C2AB EC81             (   coco3tests.asm):00208                 ldd     ,x++                    ; get a word from ROM
C2AD EDA1             (   coco3tests.asm):00209                 std     ,y++                    ; save in RAM
C2AF 8CFF00           (   coco3tests.asm):00210                 cmpx    #$FF00                  ; done all
C2B2 25F7             (   coco3tests.asm):00211                 blo     CoCo3RAMCopyLoop        ; no keep going
                      (   coco3tests.asm):00212                 
C2B4 3581             (   coco3tests.asm):00213                 puls    cc,pc                   ; restore and return
                      (   coco3tests.asm):00214         
                      (   coco3tests.asm):00215         ;
                      (   coco3tests.asm):00216         ; Copy vars back after call.
                      (   coco3tests.asm):00217         ;
                      (   coco3tests.asm):00218         
C2B6                  (   coco3tests.asm):00219         CoCo3CopyVars
C2B6 8E0000           (   coco3tests.asm):00220                 ldx     #RAMBase                ; point at RAM base
C2B9 31898000         (   coco3tests.asm):00221                 leay    -RAMOffset,x            ; point at copy in lower RAM
                      (   coco3tests.asm):00222         
C2BD                  (   coco3tests.asm):00223         CoCo3CopyVarsLoop
C2BD A6A0             (   coco3tests.asm):00224                 lda     ,y+                     ; get a byte from lower RAM
C2BF A780             (   coco3tests.asm):00225                 sta     ,x+                     ; save in vars
C2C1 8C0289           (   coco3tests.asm):00226                 cmpx    #RamEnd                 ; done all?
C2C4 26F7             (   coco3tests.asm):00227                 bne     CoCo3CopyVarsLoop       ; nope loop again
C2C6 39               (   coco3tests.asm):00228                 rts
                      (   coco3tests.asm):00229                 
                      (   coco3tests.asm):00230         
                      (   coco3tests.asm):00231         ;
                      (   coco3tests.asm):00232         ; Call a routine in RAM copy of code, routine in ROM supplied in X
                      (   coco3tests.asm):00233         ; X is adjusted for correct address in RAM before calling.
                      (   coco3tests.asm):00234         ; DP and S are also adjusted to ROMS may be paged out.
                      (   coco3tests.asm):00235         ;
                      (   coco3tests.asm):00236         ; This routine should be entered as a subroutine with JSR/BSR/LBSR.
                      (   coco3tests.asm):00237         ;       
C2C7                  (   coco3tests.asm):00238         CoCo3RAMCallX   
C2C7 3409             (   coco3tests.asm):00239                 pshs    cc,dp                   ; save current CC & DP
C2C9 8A50             (   coco3tests.asm):00240                 ora     #IntsDisable            ; disable interrupts
                      (   coco3tests.asm):00241                 
C2CB 10FF0004         (   coco3tests.asm):00242                 sts     >SavedS                 ; save current stack pointer
C2CF 32E9E000         (   coco3tests.asm):00243                 leas    -StackOffset,s          ; Point S at CoCo RAM
C2D3 3402             (   coco3tests.asm):00244                 pshs    a                       ; save a
C2D5 1FB8             (   coco3tests.asm):00245                 tfr     dp,a                    ; get DP
C2D7 8000             (   coco3tests.asm):00246                 suba    #DPOffset               ; adjust DP to point to RAM
C2D9 1F8B             (   coco3tests.asm):00247                 tfr     a,dp                    ; set DP
C2DB 3502             (   coco3tests.asm):00248                 puls    a                       ; restore a
                      (   coco3tests.asm):00249                 
C2DD 30898000         (   coco3tests.asm):00250                 leax    -RAMOffset,x            ; Point at address in RAM
C2E1 3410             (   coco3tests.asm):00251                 pshs    x                       ; save address to call on stack
C2E3 308D0006         (   coco3tests.asm):00252                 leax    CoCo3RAMCall2,pcr       ; Get our address in RAM
C2E7 30898000         (   coco3tests.asm):00253                 leax    -RAMOffset,x            ; Adjust for RAM
C2EB 6E84             (   coco3tests.asm):00254                 jmp     ,x                      ; call RAM routine
                      (   coco3tests.asm):00255         
                      (   coco3tests.asm):00256         ; this is executed in RAM
C2ED                  (   coco3tests.asm):00257         CoCo3RAMCall2
C2ED 3510             (   coco3tests.asm):00258                 puls    x                       ; restore X
C2EF AD84             (   coco3tests.asm):00259                 jsr     ,x                      ; call routine
                      (   coco3tests.asm):00260         
                      (   coco3tests.asm):00261         ; routine will return here, still in RAM        
C2F1                  (   coco3tests.asm):00262         CoCo3RAMReturn
C2F1 86C0             (   coco3tests.asm):00263                 lda     #DefaultInit1           ; back to RAM/ROM mode
C2F3 B7FF90           (   coco3tests.asm):00264                 sta     InitReg1
                      (   coco3tests.asm):00265                 
C2F6 B6FF44           (   coco3tests.asm):00266                 lda     StatusReg               ; reset disable bit in status reg
C2F9 84EF             (   coco3tests.asm):00267                 anda    #~StatusDisable
C2FB B7FF44           (   coco3tests.asm):00268                 sta     StatusReg               ; store it back
                      (   coco3tests.asm):00269                 
C2FE 10FE0004         (   coco3tests.asm):00270                 lds     >SavedS                 ; restore stack pointer
C302 3509             (   coco3tests.asm):00271                 puls    cc,dp                   ; restore DP & CC
C304 8DB0             (   coco3tests.asm):00272                 bsr     CoCo3CopyVars           ; copy vars back
C306 39               (   coco3tests.asm):00273                 rts                             ; return to caller
                      (     DiagCart.asm):00379                         use     d64tests.asm    ; Dragon 64 specific tests, ACIA etc
                      (     d64tests.asm):00001         ;
                      (     d64tests.asm):00002         ; Dragon 64 / Alpha only tests.
                      (     d64tests.asm):00003         ;
                      (     d64tests.asm):00004         
C307                  (     d64tests.asm):00005         Dragon64Tests   
C307 C609             (     d64tests.asm):00006                         ldb     #DIPMaskD64     ; check if this is a Dragon64?
C309 170A70           (     d64tests.asm):00007                         lbsr    CheckMachine    ; check against DIPS
C30C 2707             (     d64tests.asm):00008                         beq     Is64            ; yep it's a 64
                      (     d64tests.asm):00009         
C30E C60A             (     d64tests.asm):00010                         ldb     #DIPMaskAlpha   ; check if this is a Dragon Alpha?
C310 170A69           (     d64tests.asm):00011                         lbsr    CheckMachine    ; check against DIPS
C313 266E             (     d64tests.asm):00012                         bne     Not64           ; Nope, not either
                      (     d64tests.asm):00013         
C315 308D11D6         (     d64tests.asm):00014         Is64            leax    MessD64,pcr     ; Print D64 tests message
C319 17095B           (     d64tests.asm):00015                         lbsr    WriteStr        ; write to screen
                      (     d64tests.asm):00016                         
C31C 308D0FB7         (     d64tests.asm):00017                         leax    LMessD64,pcr    ; Print D64 tests message
C320 170D30           (     d64tests.asm):00018                         lbsr    LCDClrWriteStrWait ; write to screen
                      (     d64tests.asm):00019                         
C323 3401             (     d64tests.asm):00020                         pshs    cc
C325 1A50             (     d64tests.asm):00021                         orcc    #IntsDisable    ; disable interrupts
                      (     d64tests.asm):00022         
C327 B7FFDE           (     d64tests.asm):00023                         sta     SAMCTY          ; map type 0
                      (     d64tests.asm):00024         
                      (     d64tests.asm):00025         ; Configure PIA1 side b bit 2 as output and select second ROM   
C32A B6FF23           (     d64tests.asm):00026                         lda     PIA1CRB         ; get control register of PIA1, port B
C32D 84FB             (     d64tests.asm):00027                         anda    #~CRDDRDATA     ; access DDR of port b
C32F B7FF23           (     d64tests.asm):00028                         sta     PIA1CRB         ; update the PIA
                      (     d64tests.asm):00029                 
C332 F6FF22           (     d64tests.asm):00030                         ldb     PIA1DB          ; get DDR register
C335 CA04             (     d64tests.asm):00031                         orb     #MaskROMSEL     ; make ROMSEL bit an output
C337 F7FF22           (     d64tests.asm):00032                         stb     PIA1DB          ; write DDR
C33A 8A04             (     d64tests.asm):00033                         ora     #CRDDRDATA      ; access data register of port B
C33C B7FF23           (     d64tests.asm):00034                         sta     PIA1CRB         ; tell PIA
                      (     d64tests.asm):00035                 
C33F B6FF22           (     d64tests.asm):00036                         lda     PIA1DB          ; get data register of PIA
C342 84FB             (     d64tests.asm):00037                         anda    #~MaskROMSEL    ; select second ROM, containing code to be copied to RAM        
C344 B7FF22           (     d64tests.asm):00038                         sta     PIA1DB          ; write it to PIA
                      (     d64tests.asm):00039         
C347 1703FE           (     d64tests.asm):00040                         lbsr    ChecksumROMS    ; do ROM checksums (RAM version)                
                      (     d64tests.asm):00041         
                      (     d64tests.asm):00042         ; switch ROMS back              
C34A B6FF22           (     d64tests.asm):00043                         lda     PIA1DB          ; get data register of PIA
C34D 8A04             (     d64tests.asm):00044                         ora     #MaskROMSEL     ; select first ROM
C34F B7FF22           (     d64tests.asm):00045                         sta     PIA1DB          ; write it to PIA
                      (     d64tests.asm):00046                                                 
C352 B7FFD4           (     d64tests.asm):00047                         sta     SAMCP1          ; back to page 0
                      (     d64tests.asm):00048         
C355 3501             (     d64tests.asm):00049                         puls    cc              ; restore int status 
                      (     d64tests.asm):00050                         
C357 170CB8           (     d64tests.asm):00051                         lbsr    LCDClrScr
C35A 8D28             (     d64tests.asm):00052                         bsr     DumpACIA
                      (     d64tests.asm):00053         
C35C C60A             (     d64tests.asm):00054                         ldb     #DIPMaskAlpha   ; check if this is a Dragon Alpha?
C35E 170A13           (     d64tests.asm):00055                         lbsr    DIPMask         ; check against DIPS
C361 C10A             (     d64tests.asm):00056                         cmpb    #DIPMaskAlpha
C363 260D             (     d64tests.asm):00057                         bne     NotAlpha        ; Nope, not Alpha
                      (     d64tests.asm):00058                         
C365 308D0F51         (     d64tests.asm):00059                         leax    LPIA2Mess,pcr   ; PIA2 message
C369 170D27           (     d64tests.asm):00060                         lbsr    DevWriteStr     ; write it
                      (     d64tests.asm):00061                         
C36C 8EFF24           (     d64tests.asm):00062                         ldx     #PIA2DA         ; point at PIA
C36F 170675           (     d64tests.asm):00063                         lbsr    GetPIADisplay2  ; go display it
C372                  (     d64tests.asm):00064         NotAlpha
C372 170D74           (     d64tests.asm):00065                         lbsr    WaitPause
                      (     d64tests.asm):00066         
C375 308D0F75         (     d64tests.asm):00067                         leax    LMessD64End,pcr ; Print D64 tests message
C379 170905           (     d64tests.asm):00068                         lbsr    WriteStrUpper   
                      (     d64tests.asm):00069         
C37C 308D0F6E         (     d64tests.asm):00070                         leax    LMessD64End,pcr ; Print D64 tests message
C380 170CD0           (     d64tests.asm):00071                         lbsr    LCDClrWriteStrWait ; write to screen
                      (     d64tests.asm):00072                         
C383 39               (     d64tests.asm):00073         Not64           rts
                      (     d64tests.asm):00074                 
                      (     d64tests.asm):00075         ;
                      (     d64tests.asm):00076         ; DumpACIA, dump ACIA registers to LCD/Screen
                      (     d64tests.asm):00077         ;       
                      (     d64tests.asm):00078         
C384 308D0F2C         (     d64tests.asm):00079         DumpACIA        leax    LACIAMess,pcr   ; point at message
C388 170D08           (     d64tests.asm):00080                         lbsr    DevWriteStr     ; write it
                      (     d64tests.asm):00081         
C38B CEFF04           (     d64tests.asm):00082                         ldu     #AciaData       ; point at ACIA
C38E C604             (     d64tests.asm):00083                         ldb     #4              ; 4 bytes
                      (     d64tests.asm):00084         
C390 A6C0             (     d64tests.asm):00085         DumpACIALoop    lda     ,u+             ; get byte from ACIA
C392 170CDB           (     d64tests.asm):00086                         lbsr    DevHexByte      ; display it
C395 C101             (     d64tests.asm):00087                         cmpb    #1              ; don't display dash after last byte
C397 2703             (     d64tests.asm):00088                         beq     DumpACIANext    
C399 170D19           (     d64tests.asm):00089                         lbsr    DDash           ; display dash
C39C 5A               (     d64tests.asm):00090         DumpACIANext    decb                    ; decrement count
C39D 26F1             (     d64tests.asm):00091                         bne     DumpACIALoop    ; loop again
                      (     d64tests.asm):00092                         
C39F 170D0D           (     d64tests.asm):00093                         lbsr    DCR             ; and EOL.
                      (     d64tests.asm):00094                 
C3A2 39               (     d64tests.asm):00095                         rts
                      (     d64tests.asm):00096                         
                      (     d64tests.asm):00097         
                      (     d64tests.asm):00098         ;
                      (     d64tests.asm):00099         ; Check if machine has 64K rams, if so test upper RAM
                      (     d64tests.asm):00100         ;               
                      (     d64tests.asm):00101         
C3A3 9600             (     d64tests.asm):00102         RAM64Tests      lda     RAMFlag         ; does this machinr have 64K RAMS?
C3A5 8102             (     d64tests.asm):00103                         cmpa    #DRAM64
C3A7 2615             (     d64tests.asm):00104                         bne     RAM64TestsExit  ; no don't test upper RAM bank
                      (     d64tests.asm):00105         
C3A9 0D03             (     d64tests.asm):00106                         tst     IsCoCo3         ; Is this a CoCo3?
C3AB 2611             (     d64tests.asm):00107                         bne     RAM64TestsExit  ; yes don't test upper RAM bank
                      (     d64tests.asm):00108                         
C3AD 3401             (     d64tests.asm):00109                         pshs    cc
C3AF 1A50             (     d64tests.asm):00110                         orcc    #IntsDisable    ; disable interrupts
                      (     d64tests.asm):00111         
C3B1 0C11             (     d64tests.asm):00112                         inc     TestPage1       ; flag to test we are doing page 1
C3B3 308D0F4C         (     d64tests.asm):00113                         leax    LMess64K,pcr    ; point to message
C3B7 170131           (     d64tests.asm):00114                         lbsr    DoLongOrShort   ; Do long test if enabled, else do short
C3BA 0F11             (     d64tests.asm):00115                         clr     TestPage1       ; flag we are back to page 0
                      (     d64tests.asm):00116         
C3BC 3501             (     d64tests.asm):00117                         puls    cc              ; restore cc
C3BE 39               (     d64tests.asm):00118         RAM64TestsExit  rts
                      (     d64tests.asm):00119                 
                      (     DiagCart.asm):00380                         use     dplustests.asm  ; Dragon Plus detection and tests
                      (   dplustests.asm):00001         ; 
                      (   dplustests.asm):00002         ; Dragon Plus tests.
                      (   dplustests.asm):00003         ;
                      (   dplustests.asm):00004         
     FFE0             (   dplustests.asm):00005         Plus6845Ctrl    equ     $FFE0           ; 6845 control register
     FFE1             (   dplustests.asm):00006         Plus6845Data    equ     $FFE1           ; 6845 data register
     FFE2             (   dplustests.asm):00007         PlusBank        equ     $FFE2           ; memory bank register
                      (   dplustests.asm):00008         
     0002             (   dplustests.asm):00009         PlusBankA       equ     %00000010       ; bank A of extra ram
     0006             (   dplustests.asm):00010         PlusBankB       equ     %00000110       ; bank B of extra ram
     0001             (   dplustests.asm):00011         PlusBankVideo   equ     %00000001       ; 2K Video RAM
                      (   dplustests.asm):00012         
     0000             (   dplustests.asm):00013         PlusVideoBase   EQU     $0000           ; base of video RAM
     07FF             (   dplustests.asm):00014         PlusVideoEnd    EQU     $07FF           ; End of plus video ram
                      (   dplustests.asm):00015         
C3BF 0D03             (   dplustests.asm):00016         PlusTests       tst     IsCoCo3         ; is the machine a CoCo3?
C3C1 263E             (   dplustests.asm):00017                         bne     PlusTestsEnd    ; yes, DragonPlus not valid for CoCo3.
                      (   dplustests.asm):00018                         
C3C3 308D1091         (   dplustests.asm):00019                         leax    LProbeDPlus,pcr ; probe message
C3C7 170D7C           (   dplustests.asm):00020                         lbsr    VCRLCDClrMess   ; Clear LCD display, CR on VDG, write string
                      (   dplustests.asm):00021                         
C3CA 8D46             (   dplustests.asm):00022                         bsr     ProbePlus       ; probe for it
C3CC 2708             (   dplustests.asm):00023                         beq     FoundTest
                      (   dplustests.asm):00024                         
C3CE 308D109E         (   dplustests.asm):00025                         leax    LProbeNotFound,pcr      ; Not Found message
C3D2 170CCA           (   dplustests.asm):00026                         lbsr    DevWriteStrWait ; write message and wait
                      (   dplustests.asm):00027                         
C3D5 39               (   dplustests.asm):00028                         rts
                      (   dplustests.asm):00029                         
C3D6 308D109A         (   dplustests.asm):00030         FoundTest       leax    LProbeFound,pcr ; Found message
C3DA 170CC2           (   dplustests.asm):00031                         lbsr    DevWriteStrWait ; write message and wait
                      (   dplustests.asm):00032                         
C3DD 170052           (   dplustests.asm):00033                         lbsr    InitCRTC        ; Initialize CRTC
C3E0 17009A           (   dplustests.asm):00034                         lbsr    DisplayTest     ; Display some test data
                      (   dplustests.asm):00035                         
C3E3 308D1093         (   dplustests.asm):00036                         leax    LDPlusVRTest,pcr ; point at message
C3E7 170D5C           (   dplustests.asm):00037                         lbsr    VCRLCDClrMess   ; Clear LCD display, CR on VDG, write string
                      (   dplustests.asm):00038         
C3EA 170CEB           (   dplustests.asm):00039                         lbsr    Wait
                      (   dplustests.asm):00040                         
C3ED 318D0011         (   dplustests.asm):00041                         leay    PlusTestTable,pcr       ; point at test table
                      (   dplustests.asm):00042                         
C3F1 A6A4             (   dplustests.asm):00043         PlusTestBanks   lda     ,y              ; get bank to test
C3F3 270C             (   dplustests.asm):00044                         beq     PlusTestsEnd    ; end of table exit
                      (   dplustests.asm):00045                         
C3F5 3021             (   dplustests.asm):00046                         leax    1,y             ; point at start and end addresses
C3F7 3420             (   dplustests.asm):00047                         pshs    y               ; save y as it gets borked by ram tests
C3F9 8D59             (   dplustests.asm):00048                         bsr     TestPlusBank    ; test the bank
C3FB 3520             (   dplustests.asm):00049                         puls    y               ; restore y
                      (   dplustests.asm):00050                         
C3FD 3125             (   dplustests.asm):00051                         leay    5,y             ; point to next table entry
C3FF 20F0             (   dplustests.asm):00052                         bra     PlusTestBanks   ; go test       
                      (   dplustests.asm):00053                         
C401                  (   dplustests.asm):00054         PlusTestsEnd            
C401 39               (   dplustests.asm):00055                         rts
                      (   dplustests.asm):00056         
C402 01               (   dplustests.asm):00057         PlusTestTable   fcb     PlusBankVideo   ; bank to test
C403 0000             (   dplustests.asm):00058                         fdb     PlusVideoBase   ; start address
C405 07FF             (   dplustests.asm):00059                         fdb     PlusVideoEnd    ; end address
                      (   dplustests.asm):00060                         
C407 02               (   dplustests.asm):00061                         fcb     PlusBankA       ; bank to test
C408 0000             (   dplustests.asm):00062                         fdb     $0000           ; start address
C40A 7FFF             (   dplustests.asm):00063                         fdb     $7FFF           ; end address
                      (   dplustests.asm):00064                         
C40C 06               (   dplustests.asm):00065                         fcb     PlusBankB       ; bank to test
C40D 0000             (   dplustests.asm):00066                         fdb     $0000           ; start address
C40F 7FFF             (   dplustests.asm):00067                         fdb     $7FFF           ; end address
                      (   dplustests.asm):00068         
C411 00               (   dplustests.asm):00069                         fcb     $00             ; terminator
                      (   dplustests.asm):00070         ;
                      (   dplustests.asm):00071         ; Probe for Dragon Plus.
                      (   dplustests.asm):00072         ;
                      (   dplustests.asm):00073                         
C412 860D             (   dplustests.asm):00074         ProbePlus       lda     #13             ; Test R13, as this is readable
C414 B7FFE0           (   dplustests.asm):00075                         sta     Plus6845Ctrl    ; select horizontal total reg
                      (   dplustests.asm):00076                         
C417 F6FFE1           (   dplustests.asm):00077                         ldb     Plus6845Data    ; save old value if any
                      (   dplustests.asm):00078                         
C41A 8655             (   dplustests.asm):00079                         lda     #$55            ; test value
C41C B7FFE1           (   dplustests.asm):00080                         sta     Plus6845Data    ; save value
C41F B1FFE1           (   dplustests.asm):00081                         cmpa    Plus6845Data    ; is it the same?
C422 2607             (   dplustests.asm):00082                         bne     ProbePlusBad    ; not found
                      (   dplustests.asm):00083                         
C424 43               (   dplustests.asm):00084                         coma                    ; flip the bits
                      (   dplustests.asm):00085                         
C425 B7FFE1           (   dplustests.asm):00086                         sta     Plus6845Data    ; save value
C428 B1FFE1           (   dplustests.asm):00087                         cmpa    Plus6845Data    ; is it the same?
                      (   dplustests.asm):00088                         
C42B 3401             (   dplustests.asm):00089         ProbePlusBad    pshs    cc
C42D F7FFE1           (   dplustests.asm):00090                         stb     Plus6845Data    ; restore old value
C430 3581             (   dplustests.asm):00091                         puls    cc,pc
                      (   dplustests.asm):00092                         
                      (   dplustests.asm):00093         
                      (   dplustests.asm):00094         ;
                      (   dplustests.asm):00095         ; InitCRTC code borrowed from ED128.BIN
                      (   dplustests.asm):00096         ;
                      (   dplustests.asm):00097                         
                      (   dplustests.asm):00098         
C432                  (   dplustests.asm):00099         InitCRTC
C432 3417             (   dplustests.asm):00100                         PSHS    X,B,A,CC        ; save regs
C434 1A50             (   dplustests.asm):00101                         ORCC    #IntsDisable    ; disable ints
                      (   dplustests.asm):00102                         
C436 8601             (   dplustests.asm):00103                         LDA     #PlusBankVideo  ; select 6845 video RAM in $0000-$0800                                  
C438 B7FFE2           (   dplustests.asm):00104                         STA     PlusBank                                
                      (   dplustests.asm):00105                         
                      (   dplustests.asm):00106                         ifndef Test
                      (   dplustests.asm):00107                         LDA     #$20            ; space char
                      (   dplustests.asm):00108                         LDX     #PlusVideoBase  ; Fill video ram
C43B                  (   dplustests.asm):00109         ClearLoop
                      (   dplustests.asm):00110                         STA     ,X+             ; store it
                      (   dplustests.asm):00111                         CMPX    #PlusVideoEnd+1 ; done all?
                      (   dplustests.asm):00112                         BNE     ClearLoop       ; nope loop again
                      (   dplustests.asm):00113                         endc 
                      (   dplustests.asm):00114                         
C43B 4F               (   dplustests.asm):00115                         CLRA                    ; select default memory map
C43C B7FFE2           (   dplustests.asm):00116                         STA     PlusBank
                      (   dplustests.asm):00117                 
C43F 5F               (   dplustests.asm):00118                         CLRB                    ; Zero register no
C440 308D0029         (   dplustests.asm):00119                         leax    CRTCRegValues,pcr       ; point to register data
C444                  (   dplustests.asm):00120         InitLoop
C444 F7FFE0           (   dplustests.asm):00121                         STB     Plus6845Ctrl    ; Set register to write
C447 A680             (   dplustests.asm):00122                         LDA     ,X+             ; get value
C449 B7FFE1           (   dplustests.asm):00123                         STA     Plus6845Data    ; Write it
C44C 5C               (   dplustests.asm):00124                         INCB                    ; do next register
C44D C110             (   dplustests.asm):00125                         CMPB    #$10            ; done all?
C44F 26F3             (   dplustests.asm):00126                         BNE     InitLoop        ; nope do next
                      (   dplustests.asm):00127         
C451 3517             (   dplustests.asm):00128                         PULS    X,B,A,CC        ; restore and return    
C453 39               (   dplustests.asm):00129                         RTS
                      (   dplustests.asm):00130         
                      (   dplustests.asm):00131         ;
                      (   dplustests.asm):00132         ; Test Plus RAM bank
                      (   dplustests.asm):00133         ;
                      (   dplustests.asm):00134         ; Entry :
                      (   dplustests.asm):00135         ;       A       = bank to test
                      (   dplustests.asm):00136         ;       X       = pointer to start and end address words
                      (   dplustests.asm):00137         ; Exit
                      (   dplustests.asm):00138         ;       CC.Z    = set on error
                      (   dplustests.asm):00139         ;       X       = error address
                      (   dplustests.asm):00140         ;
C454 1A50             (   dplustests.asm):00141         TestPlusBank    orcc    #IntsDisable    ; disable interrupts
                      (   dplustests.asm):00142                         
C456 9713             (   dplustests.asm):00143                         sta     TestDPlusBank   ; set bank we're testing
C458 4F               (   dplustests.asm):00144                         clra    
C459 43               (   dplustests.asm):00145                         coma
C45A 9712             (   dplustests.asm):00146                         sta     TestDPlus       ; flag testing DPlus RAM
                      (   dplustests.asm):00147                         
C45C 170090           (   dplustests.asm):00148                         lbsr    GetTestLength   ; setup test vector
C45F 1700A1           (   dplustests.asm):00149                         lbsr    DoRamTest       ; long RAM test
C462 1CAF             (   dplustests.asm):00150                         andcc   #IntsEnable     ; enable interrupts
                      (   dplustests.asm):00151                         
C464 3401             (   dplustests.asm):00152                         pshs    cc              ; save result
C466 7FFFE2           (   dplustests.asm):00153                         clr     PlusBank        ; back to normal RAM
C469 0F12             (   dplustests.asm):00154                         clr     TestDPlus       ; clear  plus bank test
                      (   dplustests.asm):00155                         
C46B 3581             (   dplustests.asm):00156                         puls    cc,pc           ; restore and return
                      (   dplustests.asm):00157                         
C46D                  (   dplustests.asm):00158         CRTCRegValues
C46D 71               (   dplustests.asm):00159                         FCB     $71             ;  0 Horizontal Total = 113 
C46E 50               (   dplustests.asm):00160                         FCB     $50             ;  1 Horizontal Displayed = 80
C46F 5D               (   dplustests.asm):00161                         FCB     $5D             ;  2 Horizontal Sync          
C470 37               (   dplustests.asm):00162                         FCB     $37             ;  3 HSync Width+VSync        
C471 19               (   dplustests.asm):00163                         FCB     $19             ;  4 Vertical Total           
C472 1E               (   dplustests.asm):00164                         FCB     $1E             ;  5 Vertical Adjust          
C473 18               (   dplustests.asm):00165                         FCB     $18             ;  6 Vertical Displayed       
C474 19               (   dplustests.asm):00166                         FCB     $19             ;  7 VSync Position           
C475 A2               (   dplustests.asm):00167                         FCB     $A2             ;  8 Interlace+Cursor         
C476 0A               (   dplustests.asm):00168                         FCB     $0A             ;  9 Scan Lines/Character = 11
C477 60               (   dplustests.asm):00169                         FCB     $60             ; 10 Cursor start line        
C478 0A               (   dplustests.asm):00170                         FCB     $0A             ; 11 Cursor end scan line     
C479 00               (   dplustests.asm):00171                         FCB     $00             ; 12 Screen Start Address High
C47A 00               (   dplustests.asm):00172                         FCB     $00             ; 13 Screen Start Address Low =
C47B 00               (   dplustests.asm):00173                         FCB     $00             ; 14 Cursor Address High
C47C 00               (   dplustests.asm):00174                         FCB     $00             ; 15 Cursor Address Low
                      (   dplustests.asm):00175                         
C47D                  (   dplustests.asm):00176         DisplayTest
C47D 3401             (   dplustests.asm):00177                         pshs    cc      
C47F 1A50             (   dplustests.asm):00178                         orcc    #IntsDisable    ; disable ints
                      (   dplustests.asm):00179                 
C481 8601             (   dplustests.asm):00180                         lda     #PlusBankVideo  ; select video ram
C483 B7FFE2           (   dplustests.asm):00181                         sta     PlusBank
                      (   dplustests.asm):00182                         
                      (   dplustests.asm):00183                         ifndef Test
                      (   dplustests.asm):00184                         ldx     #PlusMess       ; point to message
                      (   dplustests.asm):00185                         ldy     #0              ; point to screen
                      (   dplustests.asm):00186                         
C486                  (   dplustests.asm):00187         CopyLoop        lda     ,x+             ; get a byte
                      (   dplustests.asm):00188                         tsta                    ; end of message?
                      (   dplustests.asm):00189                         beq     EndMess         ; yep : exit
                      (   dplustests.asm):00190                         sta     ,y+             ; put it on screen
                      (   dplustests.asm):00191                         bra     CopyLoop        ; do next
                      (   dplustests.asm):00192         
C486                  (   dplustests.asm):00193         EndMess         ldy     #10*80          ; print character set   
                      (   dplustests.asm):00194                         
C486                  (   dplustests.asm):00195         CharLoop        sta     ,y+             ; save character
                      (   dplustests.asm):00196                         inca                    ; next character
                      (   dplustests.asm):00197                         bne     CharLoop         
                      (   dplustests.asm):00198                         
                      (   dplustests.asm):00199                         endc
C486 7FFFE2           (   dplustests.asm):00200                         clr     PlusBank        ; Reset to normal ram
C489 3581             (   dplustests.asm):00201                         puls    cc,pc
                      (   dplustests.asm):00202                 
C48B 447261676F6E2050 (   dplustests.asm):00203         PlusMess        FCN     'Dragon Plus video test.'               
     6C75732076696465
     6F20746573742E00
                      (   dplustests.asm):00204                         
                      (     DiagCart.asm):00381                         use     tests.asm       ; test routines, RAM, Cartridge Interrrupts etc 
                      (        tests.asm):00001         ;
                      (        tests.asm):00002         ; Test routines for Diag cart.
                      (        tests.asm):00003         ;
                      (        tests.asm):00004         
                      (        tests.asm):00005         ;
                      (        tests.asm):00006         ; Quick RAM tests, just values $FF and $00
                      (        tests.asm):00007         ;
                      (        tests.asm):00008         
C4A3 338D012C         (        tests.asm):00009         DoQuickTest     leau    QRamTest,pcr    ; point to short test
C4A7 DF06             (        tests.asm):00010                         stu     TestVector      ; set the test vector
C4A9 308D0116         (        tests.asm):00011         GoTestRAM       leax    RamBanksSmall,pcr       ; assume 4K
C4AD 0D00             (        tests.asm):00012                         tst     RAMFlag         ; are we configured for 4K rams?
C4AF 2704             (        tests.asm):00013                         beq     SetBanks        ; yes use them
                      (        tests.asm):00014                         
C4B1 30890008         (        tests.asm):00015                         leax    BankTableSize,x ; select large table
                      (        tests.asm):00016         
C4B5 8D4C             (        tests.asm):00017         SetBanks        bsr     DoRamTest       ; test first bank
                      (        tests.asm):00018                         
C4B7 7CFF40           (        tests.asm):00019                         inc     LEDS
                      (        tests.asm):00020         
C4BA D600             (        tests.asm):00021                         ldb     RAMFlag         ; Check RAM size
C4BC C102             (        tests.asm):00022                         cmpb    #DRAM64         ; Check to see if we have 4K or 16K RAMS
C4BE 2407             (        tests.asm):00023                         bhs     Rams64          ; yes we do both banks as same chips
                      (        tests.asm):00024                         
C4C0 C610             (        tests.asm):00025                         ldb     #DIPOneBank     ; just do one bank?
C4C2 1708AF           (        tests.asm):00026                         lbsr    DIPMask         ; test it
C4C5 2604             (        tests.asm):00027                         bne     JustOne         ; yes, skip second
                      (        tests.asm):00028         
C4C7 3004             (        tests.asm):00029         Rams64          leax    4,x             ; next table entry
C4C9 8D38             (        tests.asm):00030                         bsr     DoRamTest       ; test second bank
C4CB 7CFF40           (        tests.asm):00031         JustOne         inc     LEDS
C4CE 39               (        tests.asm):00032         NoLongTests     rts
                      (        tests.asm):00033         
                      (        tests.asm):00034         
                      (        tests.asm):00035         ;
                      (        tests.asm):00036         ; Long RAM tests, test blocks, with all 255 values.
                      (        tests.asm):00037         ;
                      (        tests.asm):00038         ; on entry X points to a string to be displayed before beginning the tests.
                      (        tests.asm):00039         
C4CF C620             (        tests.asm):00040         DoLongTest      ldb     #DIPSkipLong    ; skip long tests?
C4D1 1708A0           (        tests.asm):00041                         lbsr    DIPMask         ; check against DIPS
C4D4 26F8             (        tests.asm):00042                         bne     NoLongTests     ; yes skip them
                      (        tests.asm):00043         
C4D6 0D03             (        tests.asm):00044                         tst     IsCoCo3         ; Is this machine a CoCo3?
C4D8 26F4             (        tests.asm):00045                         bne     NoLongTests     ; yes skip them, we will do specific test later
                      (        tests.asm):00046         
C4DA 338D016A         (        tests.asm):00047         DoLong          leau    LRamTest,pcr    ; point to long test
C4DE DF06             (        tests.asm):00048                         stu     TestVector      ; set the test vector
                      (        tests.asm):00049                         
C4E0 170C5D           (        tests.asm):00050         DoTests         lbsr    VCRLCDClrScr    ; Clear LCD display, CR on VDG
C4E3 170BAD           (        tests.asm):00051                         lbsr    DevWriteStr     ; display it
C4E6 170C00           (        tests.asm):00052                         lbsr    WaitPause       ; delay a little
                      (        tests.asm):00053                         
C4E9 20BE             (        tests.asm):00054                         bra     GoTestRAM
                      (        tests.asm):00055         
                      (        tests.asm):00056         ;
                      (        tests.asm):00057         ; Do long or short test dependent on dip.
                      (        tests.asm):00058         ;
                      (        tests.asm):00059         ; on entry X points to a string to be displayed before beginning the tests.
                      (        tests.asm):00060         
C4EB 8D02             (        tests.asm):00061         DoLongOrShort   bsr     GetTestLength   ; Set test length
C4ED 20F1             (        tests.asm):00062                         bra     DoTests         ; go do it
                      (        tests.asm):00063         
                      (        tests.asm):00064         ;
                      (        tests.asm):00065         ; GetTestLength, returns the test type to perform in U.
                      (        tests.asm):00066         ; Checks the SkipLong DIP switch and if set returns a pointer to 
                      (        tests.asm):00067         ; the short test, otherwise a pointer to the long test.
                      (        tests.asm):00068         ;
                      (        tests.asm):00069         
C4EF C620             (        tests.asm):00070         GetTestLength   ldb     #DIPSkipLong    ; skip long tests?
C4F1 170880           (        tests.asm):00071                         lbsr    DIPMask         ; check against DIPS
C4F4 2606             (        tests.asm):00072                         bne     DoShortTest     ; only do short test
                      (        tests.asm):00073                         
C4F6 338D014E         (        tests.asm):00074                         leau    LRamTest,pcr    ; point to long test    
C4FA 2004             (        tests.asm):00075                         bra     SetTestVec      
                      (        tests.asm):00076         
C4FC 338D00D3         (        tests.asm):00077         DoShortTest     leau    QRamTest,pcr    ; point to short test   
C500 DF06             (        tests.asm):00078         SetTestVec      stu     TestVector      ; set the test vector
C502 39               (        tests.asm):00079                         rts
                      (        tests.asm):00080                         
                      (        tests.asm):00081         ;
                      (        tests.asm):00082         ; RAM tests, outputting to VDG and LCD.
                      (        tests.asm):00083         ;
                      (        tests.asm):00084         ; Entry :
                      (        tests.asm):00085         ;       X               = pointer to table of start, end address
                      (        tests.asm):00086         ;       TestVector      = address of test routine to run
                      (        tests.asm):00087         ; Exit
                      (        tests.asm):00088         ;       CC.Z    = set on error
                      (        tests.asm):00089         ;
                      (        tests.asm):00090         
C503 3450             (        tests.asm):00091         DoRamTest       pshs    u,x
                      (        tests.asm):00092         
C505 0D16             (        tests.asm):00093                         tst     CoCo3Blocks     ; Are we processing CoCo 3 RAM blocks?
C507 2620             (        tests.asm):00094                         bne     ShowBlocks      ; yes display for blocks
                      (        tests.asm):00095                         
C509 3410             (        tests.asm):00096                         pshs    x
C50B 170B04           (        tests.asm):00097                         lbsr    LCDClrScr       ; clear LCD screen.
C50E 308D0C91         (        tests.asm):00098                         leax    LMessRamTest,pcr ; point to message
C512 170B7E           (        tests.asm):00099                         lbsr    DevWriteStr
                      (        tests.asm):00100                         
C515 3510             (        tests.asm):00101                         puls    x
                      (        tests.asm):00102                         
C517 EC84             (        tests.asm):00103                         ldd     ,x              ; print start address
                      (        tests.asm):00104                         
C519 170B61           (        tests.asm):00105                         lbsr    DevHexWord              
                      (        tests.asm):00106                         
C51C 170B96           (        tests.asm):00107                         lbsr    DDash           ; output dash, then dollar
C51F 170B96           (        tests.asm):00108                         lbsr    DDollar         ; 
                      (        tests.asm):00109                         
C522 EC02             (        tests.asm):00110                         ldd     2,x             ; print end address
C524 170B56           (        tests.asm):00111                         lbsr    DevHexWord
C527 2015             (        tests.asm):00112                         bra     DoRamTest2      ; do rest of test
                      (        tests.asm):00113                 
C529 3410             (        tests.asm):00114         ShowBlocks      pshs    x
C52B 170AE4           (        tests.asm):00115                         lbsr    LCDClrScr       ; clear LCD screen.
C52E 308D0C7F         (        tests.asm):00116                         leax    LMessRamTestB,pcr ; point to message
C532 170B5E           (        tests.asm):00117                         lbsr    DevWriteStr
                      (        tests.asm):00118                 
C535 3510             (        tests.asm):00119                         puls    x
                      (        tests.asm):00120         
C537 9619             (        tests.asm):00121                         lda     CoCo3BlockNo    ; get current block no
C539 843F             (        tests.asm):00122                         anda    #BlockNoMask    ; Mask out invalid bits
C53B 170B32           (        tests.asm):00123                         lbsr    DevHexByte      ; display it
                      (        tests.asm):00124                         
C53E                  (        tests.asm):00125         DoRamTest2
C53E 170B71           (        tests.asm):00126                         lbsr    DSpace          ; print a space
                      (        tests.asm):00127         
C541 10AE02           (        tests.asm):00128                         ldy     2,x             ; get test addresses from table
C544 AE84             (        tests.asm):00129                         ldx     ,x
                      (        tests.asm):00130                         
C546 0F14             (        tests.asm):00131                         clr     TestContinue    ; Flag beginning of RAM test
                      (        tests.asm):00132                         
                      (        tests.asm):00133         ; not we cannot use indirect jsr [TestVector] as this gets assembled as the
                      (        tests.asm):00134         ; absolute 16 bit address of TestVector, we need the DP relative version.
                      (        tests.asm):00135                         
C548 DE06             (        tests.asm):00136         RestartTest     ldu     TestVector      ; run ram test  
C54A ADC4             (        tests.asm):00137                         jsr     ,u
C54C 2604             (        tests.asm):00138                         bne     RamTestFailed
                      (        tests.asm):00139                         
C54E 8D0E             (        tests.asm):00140                         bsr     RAMPassed       ; Display passed message
C550 200A             (        tests.asm):00141                         bra     RamTestExit     ; restore and exit      
                      (        tests.asm):00142                         
C552 8D1B             (        tests.asm):00143         RamTestFailed   bsr     RAMFail         ; do ram fail output
C554 2606             (        tests.asm):00144                         bne     RamTestExit     ; next pressed, exit test
C556 4F               (        tests.asm):00145                         clra    
C557 43               (        tests.asm):00146                         coma                    ; flag test to continue
C558 9714             (        tests.asm):00147                         sta     TestContinue
C55A 20EC             (        tests.asm):00148                         bra     RestartTest     ; restart it....
                      (        tests.asm):00149                         
C55C 35D0             (        tests.asm):00150         RamTestExit     puls    u,x,pc          ; restore and return
                      (        tests.asm):00151         
C55E 308D0F4D         (        tests.asm):00152         RAMPassed       leax    MessPassed,pcr  ; Passed message
C562 170712           (        tests.asm):00153                         lbsr    WriteStr
                      (        tests.asm):00154                         
C565 308D0C76         (        tests.asm):00155                         leax    LPassed,pcr     ; Passed message
C569 170A7A           (        tests.asm):00156                         lbsr    LCDWriteStr
                      (        tests.asm):00157                         
C56C 160B7A           (        tests.asm):00158                         lbra    WaitPause       ; give user time to see it....
                      (        tests.asm):00159         
                      (        tests.asm):00160                 
C56F 308D0F44         (        tests.asm):00161         RAMFail         leax    MessFailedAt,pcr ; print failed message
C573 170701           (        tests.asm):00162                         lbsr    WriteStr
                      (        tests.asm):00163                         
C576 CC0001           (        tests.asm):00164                         ldd     #$0001          ; column 12 line 2
C579 170A76           (        tests.asm):00165                         lbsr    LCDGotoXY       ; go to co-ordinates
                      (        tests.asm):00166         
C57C 308D0C52         (        tests.asm):00167                         leax    LMessFailedAt,pcr       ; point to fail message
C580 170A63           (        tests.asm):00168                         lbsr    LCDWriteStr     ; write it to LCD
                      (        tests.asm):00169                         
C583 DC0C             (        tests.asm):00170                         ldd     TestFailAddr    ; get address of first failure
C585 170AF5           (        tests.asm):00171                         lbsr    DevHexWord      ; display it
                      (        tests.asm):00172                         
C588 170A42           (        tests.asm):00173                         lbsr    LSpace          ; output a space
                      (        tests.asm):00174                         
C58B 308D0F35         (        tests.asm):00175                         leax    MessWrote,pcr   ; Display byte written
C58F 1706E5           (        tests.asm):00176                         lbsr    WriteStr
                      (        tests.asm):00177                         
C592 8677             (        tests.asm):00178                         lda     #'w'            ; wrote byte
C594 170A3E           (        tests.asm):00179                         lbsr    LCDWriteChar    ; write it
                      (        tests.asm):00180                         
C597 960E             (        tests.asm):00181                         lda     TestWrote       ; get byte written
C599 170AD4           (        tests.asm):00182                         lbsr    DevHexByte
                      (        tests.asm):00183                         
C59C 308D0F2A         (        tests.asm):00184                         leax    MessRead,pcr    ; Display byte read
C5A0 1706D4           (        tests.asm):00185                         lbsr    WriteStr
                      (        tests.asm):00186                         
C5A3 170A27           (        tests.asm):00187                         lbsr    LSpace          ; output a space
C5A6 8672             (        tests.asm):00188                         lda     #'r'            ; wrote byte
C5A8 170A2A           (        tests.asm):00189                         lbsr    LCDWriteChar    ; write it
                      (        tests.asm):00190         
C5AB 960F             (        tests.asm):00191                         lda     TestRead        ; get byte read
C5AD 170AC0           (        tests.asm):00192                         lbsr    DevHexByte
                      (        tests.asm):00193                         
C5B0 170736           (        tests.asm):00194                         lbsr    Newline         ; print an EOL
                      (        tests.asm):00195         
C5B3 1709B1           (        tests.asm):00196         RamFailWait     lbsr    QueryButton     ; wait for button press
                      (        tests.asm):00197         
C5B6 8101             (        tests.asm):00198                         cmpa    #ButtonNext     ; Was next pressed?
C5B8 2706             (        tests.asm):00199                         beq     FlagTerminate   ; yes, flag terminate
                      (        tests.asm):00200                         
C5BA 8104             (        tests.asm):00201                         cmpa    #ButtonSkip     ; Was it skip
C5BC 2704             (        tests.asm):00202                         beq     RamFailExit     ; yes flag skip...zero flag already set
C5BE 20F3             (        tests.asm):00203                         bra     RamFailWait     ; neither wait for a valid button.....
                      (        tests.asm):00204                         
C5C0 1CFB             (        tests.asm):00205         FlagTerminate   andcc   #~FlagZero      ; Flag, next so terminate
                      (        tests.asm):00206                         
C5C2 39               (        tests.asm):00207         RamFailExit     rts
                      (        tests.asm):00208         
                      (        tests.asm):00209         ; If running in test mode im MAME, don't test the RAM we are using.....
                      (        tests.asm):00210                         ifdef Test
     0400             (        tests.asm):00211         FirstRam        equ     RAMTop+1
                      (        tests.asm):00212                         else
C5C3                  (        tests.asm):00213         FirstRam        equ     $0000
                      (        tests.asm):00214                         endc    
                      (        tests.asm):00215         
                      (        tests.asm):00216         ; RAM banks if using 4K RAMS
C5C3 04001000         (        tests.asm):00217         RamBanksSmall   fdb     FirstRam,$1000
C5C7 10002000         (        tests.asm):00218                         fdb     $1000,$2000
                      (        tests.asm):00219         
                      (        tests.asm):00220         ; RAM banks if using 16K or 64K RAMS
C5CB 04004000         (        tests.asm):00221         RamBanksLarge   fdb     FirstRam,$4000
C5CF 40008000         (        tests.asm):00222                         fdb     $4000,$8000
                      (        tests.asm):00223         
     0008             (        tests.asm):00224         BankTableSize   equ     (RamBanksLarge-RamBanksSmall)
                      (        tests.asm):00225         
                      (        tests.asm):00226         ;
                      (        tests.asm):00227         ; Quick RAM test
                      (        tests.asm):00228         ; 
                      (        tests.asm):00229         ; Entry:
                      (        tests.asm):00230         ;       A       = 0, start test from beginning <>0 restart test from last
                      (        tests.asm):00231         ;       X       = base of area to test
                      (        tests.asm):00232         ;       Y       = length of area to test
                      (        tests.asm):00233         ;
                      (        tests.asm):00234         ; Exit:
                      (        tests.asm):00235         ;       CC.C    = error
                      (        tests.asm):00236         ;       X       = error address
                      (        tests.asm):00237         ;
C5D3 0D14             (        tests.asm):00238         QRamTest        tst     TestContinue    ; should we start from beginning ?
C5D5 2706             (        tests.asm):00239                         beq     QRamTestStart   ; yes, start from beginning
                      (        tests.asm):00240                         
C5D7 0D0E             (        tests.asm):00241                         tst     TestWrote       ; what was the last value written?
C5D9 270D             (        tests.asm):00242                         beq     QRamTestP1      ; we where on pass with $00, continue it
C5DB 2005             (        tests.asm):00243                         bra     QRamTestP0      ; we where on pass with $FF, continue it
                      (        tests.asm):00244                         
C5DD 9F08             (        tests.asm):00245         QRamTestStart   stx     TestBase        ; save base of test
C5DF 109F0A           (        tests.asm):00246                         sty     TestEnd         ; save end of test
                      (        tests.asm):00247                         
C5E2 4F               (        tests.asm):00248         QRamTestP0      clra                    ; do a pass with $FF
C5E3 43               (        tests.asm):00249                         coma                    
C5E4 8D09             (        tests.asm):00250                         bsr     QPass           ; test it
C5E6 2603             (        tests.asm):00251                         bne     QRamTestExit    ; error, exit
                      (        tests.asm):00252                         
C5E8 4F               (        tests.asm):00253         QRamTestP1      clra                    ; do a pass with $00
C5E9 8D04             (        tests.asm):00254                         bsr     QPass           ; test it
                      (        tests.asm):00255         
C5EB 3401             (        tests.asm):00256         QRamTestExit    pshs    cc              ; save codes
C5ED 3581             (        tests.asm):00257                         puls    cc,pc           ; restore and return
                      (        tests.asm):00258                         
                      (        tests.asm):00259         ;
                      (        tests.asm):00260         ; QPass, do the actual testing of the RAM, called by QRamTest and
                      (        tests.asm):00261         ; LRamTest, returns with CC.Z set on sucesss, clear on failure.
                      (        tests.asm):00262         ;
                      (        tests.asm):00263         ; TestPage1, TestDPlus, TestDPlusBank should be setup before calling
                      (        tests.asm):00264         ; this routine will page in / out memory as needed.
                      (        tests.asm):00265         ;
                      (        tests.asm):00266         ; On failure the RAM vars TestRead, TestWrote and TestFailAddr are
                      (        tests.asm):00267         ; set, so that thgese can be displayed to the user.
                      (        tests.asm):00268         ;               
                      (        tests.asm):00269                         
C5EF 3402             (        tests.asm):00270         QPass           pshs    a               ; save test value
                      (        tests.asm):00271         
C5F1 8D37             (        tests.asm):00272                         bsr     PageInRAM       ; page RAM in
                      (        tests.asm):00273         
C5F3 0D14             (        tests.asm):00274                         tst     TestContinue    ; are we continuing a test?
C5F5 2708             (        tests.asm):00275                         beq     QPassStart      ; no, start from beginning
                      (        tests.asm):00276                         
C5F7 9E0C             (        tests.asm):00277                         ldx     TestFailAddr    ; get address to continue from
C5F9 D610             (        tests.asm):00278                         ldb     TestSaved       ; get saved value
C5FB 960E             (        tests.asm):00279                         lda     TestWrote       ; get test value
C5FD 200C             (        tests.asm):00280                         bra     QPassContinue   ; go continue test
                      (        tests.asm):00281                         
C5FF 9E08             (        tests.asm):00282         QPassStart      ldx     TestBase        ; get base of test
                      (        tests.asm):00283                 
                      (        tests.asm):00284         ; Test the RAM          
C601                  (        tests.asm):00285         QPassLoop       
C601 E684             (        tests.asm):00286                         ldb     ,x              ; get current value in b
C603 1F02             (        tests.asm):00287                         tfr     d,y             ; save ram value and test value in y
C605 A784             (        tests.asm):00288                         sta     ,x              ; store test value in RAM
C607 A884             (        tests.asm):00289                         eora    ,x              ; is it the same?
C609 260B             (        tests.asm):00290                         bne     QPassErr        ; nope....exit
                      (        tests.asm):00291                         
C60B 1F20             (        tests.asm):00292         QPassContinue   tfr     y,d             ; restore saved values
C60D E780             (        tests.asm):00293                         stb     ,x+             ; replace old contetnts
C60F 9C0A             (        tests.asm):00294                         cmpx    TestEnd         ; reached last yet?
C611 26EE             (        tests.asm):00295                         bne     QPassLoop       ; loop again if more
                      (        tests.asm):00296                         
C613 5F               (        tests.asm):00297                         clrb                    ; set flags to zero, flag we passed
C614 2010             (        tests.asm):00298                         bra     QPassExit       ; return to caller
                      (        tests.asm):00299                         
C616 970F             (        tests.asm):00300         QPassErr        sta     TestRead        ; save written eor read value
C618 1F20             (        tests.asm):00301                         tfr     y,d             ; restore saved values
C61A 970E             (        tests.asm):00302                         sta     TestWrote       ; save written value
C61C 980F             (        tests.asm):00303                         eora    TestRead        ; restore read value
                      (        tests.asm):00304         ;               lda     ,x              ; get read back value
C61E 970F             (        tests.asm):00305                         sta     TestRead        ; save it
C620 9F0C             (        tests.asm):00306                         stx     TestFailAddr    ; save fail address
C622 D710             (        tests.asm):00307                         stb     TestSaved       ; save the original data
                      (        tests.asm):00308                         
C624 1CFB             (        tests.asm):00309                         andcc   #~FlagZero      ; flag failure
                      (        tests.asm):00310         
C626 8D16             (        tests.asm):00311         QPassExit       bsr     PageOutRAM      ; Page RAM out.
C628 3582             (        tests.asm):00312                         puls    a,pc            ; restore and return
                      (        tests.asm):00313         
                      (        tests.asm):00314         ; Page in the RAM under test
C62A 3402             (        tests.asm):00315         PageInRAM       pshs    a
C62C 0D11             (        tests.asm):00316                         tst     TestPage1       ; are we testing upper RAM?
C62E 2703             (        tests.asm):00317                         beq     PageInDPlus     ; no skip
C630 7FFFD5           (        tests.asm):00318                         clr     SAMSP1          ; set SMA Page 1
                      (        tests.asm):00319                         
C633 0D12             (        tests.asm):00320         PageInDPlus     tst     TestDPlus       ; are we testing Dragon plus banks?
C635 2705             (        tests.asm):00321                         beq     PageInExit      ; no, skip
                      (        tests.asm):00322         
C637 9613             (        tests.asm):00323                         lda     TestDPlusBank   ; get bank under test
C639 B7FFE2           (        tests.asm):00324                         sta     PlusBank        ; set it
                      (        tests.asm):00325                 
C63C 3582             (        tests.asm):00326         PageInExit      puls    a,pc
                      (        tests.asm):00327         
                      (        tests.asm):00328         ; Page out RAM once done                
C63E 3401             (        tests.asm):00329         PageOutRAM      pshs    cc              ; save codes
C640 7FFFD4           (        tests.asm):00330                         clr     SAMCP1          ; back to page 0 for output
C643 7FFFE2           (        tests.asm):00331                         clr     PlusBank        ; Select normal Dragon RAM
C646 3581             (        tests.asm):00332                         puls    cc,pc           ; restore and return
                      (        tests.asm):00333         
                      (        tests.asm):00334         
                      (        tests.asm):00335         
                      (        tests.asm):00336         ;
                      (        tests.asm):00337         ; Long RAM test
                      (        tests.asm):00338         ; 
                      (        tests.asm):00339         ; Entry:
                      (        tests.asm):00340         ;       X       = base of area to test
                      (        tests.asm):00341         ;       Y       = length of area to test
                      (        tests.asm):00342         ;
                      (        tests.asm):00343         ; Exit:
                      (        tests.asm):00344         ;       CC.Z    = error
                      (        tests.asm):00345         ;       X       = error address
                      (        tests.asm):00346         ;
                      (        tests.asm):00347         ; On failure the RAM vars TestRead, TestWrote and TestFailAddr are
                      (        tests.asm):00348         ; set, so that thgese can be displayed to the user.
                      (        tests.asm):00349         
C648 8D1E             (        tests.asm):00350         LRamTest        bsr     LTestSetLeds    ; setup leds
                      (        tests.asm):00351         
C64A 0D14             (        tests.asm):00352                         tst     TestContinue    ; should we start from beginning ?
C64C 2702             (        tests.asm):00353                         beq     LRamTestStart   ; yes, start from beginning
                      (        tests.asm):00354         
C64E 2006             (        tests.asm):00355                         bra     LRamTestLoop    ; re-enter test loop
                      (        tests.asm):00356                         
C650 9F08             (        tests.asm):00357         LRamTestStart   stx     TestBase        ; save base of test
C652 109F0A           (        tests.asm):00358                         sty     TestEnd         ; save end of test
                      (        tests.asm):00359                 
C655 4F               (        tests.asm):00360                         clra                    ; do a pass with $00
C656 8D1D             (        tests.asm):00361         LRamTestLoop    bsr     LProgress       ; show progress
                      (        tests.asm):00362                         
C658 8D95             (        tests.asm):00363                         bsr     QPass           ; test it
C65A 2603             (        tests.asm):00364                         bne     LRamTestExit    ; error, exit
                      (        tests.asm):00365                         
C65C 4C               (        tests.asm):00366                         inca                    ; text next value
C65D 26F7             (        tests.asm):00367                         bne     LRamTestLoop    ; loop if not zero
                      (        tests.asm):00368                         
C65F 3401             (        tests.asm):00369         LRamTestExit    pshs    cc              ; save flags
C661 9601             (        tests.asm):00370                         lda     SaveLEDS        ; put LEDS back
C663 B7FF40           (        tests.asm):00371                         sta     LEDS
C666 3581             (        tests.asm):00372                         puls    cc,pc           ; restore and return
                      (        tests.asm):00373         
C668 B6FF40           (        tests.asm):00374         LTestSetLeds    lda     LEDS            ; get current leds value
C66B 9701             (        tests.asm):00375                         sta     SaveLEDS        ; save them
C66D 8601             (        tests.asm):00376                         lda     #$01            ; init LEDS animation
C66F B7FF40           (        tests.asm):00377                         sta     LEDS
C672 0F02             (        tests.asm):00378                         clr     LEDDir          ; increment.
C674 39               (        tests.asm):00379                         rts
                      (        tests.asm):00380         
                      (        tests.asm):00381         ; display progress of long test so we know it hasn't crashed!
                      (        tests.asm):00382         
C675 3406             (        tests.asm):00383         LProgress       pshs    d               ; save regs
                      (        tests.asm):00384         
C677 9E1F             (        tests.asm):00385         ShowProgress    ldx     CursorPos       ; get cursor position
C679 9F21             (        tests.asm):00386                         stx     SaveCursorPos   ; save it
C67B 170618           (        tests.asm):00387                         lbsr    VDollar         ; print $dollar
                      (        tests.asm):00388                         
C67E CC0001           (        tests.asm):00389                         ldd     #$0001          ; column 12 line 2
C681 17096E           (        tests.asm):00390                         lbsr    LCDGotoXY       ; go to co-ordinates
                      (        tests.asm):00391                         
C684 308D0B3D         (        tests.asm):00392                         leax    LTestValue,pcr  ; print message
C688 17095B           (        tests.asm):00393                         lbsr    LCDWriteStr     ; write it
                      (        tests.asm):00394                         
C68B ECE4             (        tests.asm):00395                         ldd     ,s              ; recover saved value
C68D 1709E0           (        tests.asm):00396                         lbsr    DevHexByte      ; print it
                      (        tests.asm):00397                         
C690 9E21             (        tests.asm):00398                         ldx     SaveCursorPos   ; restore the cursor position
C692 9F1F             (        tests.asm):00399                         stx     CursorPos
                      (        tests.asm):00400                         
C694 B6FF40           (        tests.asm):00401                         lda     LEDS            ; get current LEDS value
C697 0D02             (        tests.asm):00402                         tst     LEDDir          ; check direction
C699 2607             (        tests.asm):00403                         bne     LEDSDec         ; decrement
C69B 48               (        tests.asm):00404                         lsla                    ; shift them left
C69C 8180             (        tests.asm):00405                         cmpa    #$80            ; reached far left?
C69E 2707             (        tests.asm):00406                         beq     LEDSRev         ; reverse direction next time
C6A0 2007             (        tests.asm):00407                         bra     LEDSUpdate      ; update
                      (        tests.asm):00408         
C6A2 44               (        tests.asm):00409         LEDSDec         lsra                    ; shift right
C6A3 8101             (        tests.asm):00410                         cmpa    #$01            ; reached far right?
C6A5 2602             (        tests.asm):00411                         bne     LEDSUpdate      ; nope update
                      (        tests.asm):00412                         
C6A7 0302             (        tests.asm):00413         LEDSRev         com     LEDDir          ; reverse direction next time
                      (        tests.asm):00414                         
C6A9 B7FF40           (        tests.asm):00415         LEDSUpdate      sta     LEDS            ; update LEDS           
                      (        tests.asm):00416                         
C6AC 3586             (        tests.asm):00417         LProgressExit   puls    d,pc            ; restore and return
                      (        tests.asm):00418         
                      (        tests.asm):00419         ;
                      (        tests.asm):00420         ; Test for potential Address line breaks / shorts
                      (        tests.asm):00421         ;
                      (        tests.asm):00422         
                      (        tests.asm):00423                 ifndef Test
C6AE                  (        tests.asm):00424         AddrTestBase    EQU     $0000
C6AE                  (        tests.asm):00425         AddrTestLEnd    EQU     $0400
                      (        tests.asm):00426                 else
     4000             (        tests.asm):00427         AddrTestBase    EQU     $4000
     4400             (        tests.asm):00428         AddrTestLEnd    EQU     $4400
                      (        tests.asm):00429                 endc    
                      (        tests.asm):00430         
C6AE 170961           (        tests.asm):00431         AddressRAMTest  lbsr    LCDClrScr       ; Clear LCD display, CR on VDG
C6B1 308D0B43         (        tests.asm):00432                         leax    LAddr07Test,pcr ; point at message
C6B5 1709DB           (        tests.asm):00433                         lbsr    DevWriteStr     ; display it
                      (        tests.asm):00434                         
C6B8 8E4000           (        tests.asm):00435                         ldx     #AddrTestBase   ; start of RAM test
C6BB 9F08             (        tests.asm):00436                         stx     TestBase
C6BD 8E4400           (        tests.asm):00437                         ldx     #AddrTestLEnd   ; end of RAM test
C6C0 9F0A             (        tests.asm):00438                         stx     TestEnd         ; save it
                      (        tests.asm):00439                         
C6C2 170689           (        tests.asm):00440                         lbsr    SaveScreen      ; save scren buffer in SRAM
                      (        tests.asm):00441                         
C6C5 4F               (        tests.asm):00442                         clra                    ; clear a
                      (        tests.asm):00443                         
C6C6 9E08             (        tests.asm):00444                         ldx     TestBase
C6C8 A780             (        tests.asm):00445         LWriteLoop      sta     ,x+             ; save a byte in RAM
C6CA 4C               (        tests.asm):00446                         inca                    ; increment byte
C6CB 9C0A             (        tests.asm):00447                         cmpx    TestEnd         ; end of block to write?
C6CD 26F9             (        tests.asm):00448                         bne     LWriteLoop      ; no loop again
                      (        tests.asm):00449                         
C6CF 4F               (        tests.asm):00450                         clra                    ; clear vars
C6D0 5F               (        tests.asm):00451                         clrb
C6D1 9E08             (        tests.asm):00452                         ldx     TestBase        ; get base of test area
C6D3 E684             (        tests.asm):00453         LReadLoop       ldb     ,x              ; get a byte from area
C6D5 3404             (        tests.asm):00454                         pshs    b               ; save on stack (in our SRAM)
C6D7 A1E0             (        tests.asm):00455                         cmpa    ,s+             ; is it same as written value?
C6D9 265E             (        tests.asm):00456                         bne     AddrTestFail    ; nope! Fail!
                      (        tests.asm):00457                         
C6DB 3001             (        tests.asm):00458                         leax    1,x             ; increment pointer
C6DD 4C               (        tests.asm):00459                         inca                    ; and value
C6DE 9C0A             (        tests.asm):00460                         cmpx    TestEnd         ; end of block to read?
C6E0 26F1             (        tests.asm):00461                         bne     LReadLoop       ; no go again.
                      (        tests.asm):00462                         
C6E2 17FE79           (        tests.asm):00463                         lbsr    RAMPassed       ; display passed message
                      (        tests.asm):00464                         
C6E5 17092A           (        tests.asm):00465                         lbsr    LCDClrScr       ; Clear LCD display, CR on VDG
C6E8 308D0B1F         (        tests.asm):00466                         leax    LAddr9FTest,pcr ; point at message
C6EC 1709A4           (        tests.asm):00467                         lbsr    DevWriteStr     ; display it
                      (        tests.asm):00468                         
C6EF 17065C           (        tests.asm):00469                         lbsr    SaveScreen      ; save scren buffer in SRAM
                      (        tests.asm):00470                         
C6F2 8E4000           (        tests.asm):00471                         ldx     #AddrTestBase   ; start of RAM test
C6F5 9F08             (        tests.asm):00472                         stx     TestBase
                      (        tests.asm):00473                         
C6F7 308DFEC8         (        tests.asm):00474                         leax    RamBanksSmall,pcr       ; assume 4K
C6FB 0D00             (        tests.asm):00475                         tst     RAMFlag         ; are we configured for 4K rams?
C6FD 2702             (        tests.asm):00476                         beq     AddrSetBanks    ; yes use them
                      (        tests.asm):00477                         
C6FF 3008             (        tests.asm):00478                         leax    BankTableSize,x ; select large table
                      (        tests.asm):00479         
C701 D600             (        tests.asm):00480         AddrSetBanks    ldb     RAMFlag         ; Check RAM size
C703 C102             (        tests.asm):00481                         cmpb    #DRAM64         ; Check to see if we have 4K or 16K RAMS
C705 2504             (        tests.asm):00482                         blo     AddrCheckOne    ; no check for one bank
                      (        tests.asm):00483                         
C707 3004             (        tests.asm):00484         AddrNextEntry   leax    4,x             ; next table entry
C709 2007             (        tests.asm):00485                         bra     AddrSetEnd      ; set ennd address
                      (        tests.asm):00486                         
C70B C610             (        tests.asm):00487         AddrCheckOne    ldb     #DIPOneBank     ; just do one bank?
C70D 170664           (        tests.asm):00488                         lbsr    DIPMask         ; test it
C710 27F5             (        tests.asm):00489                         beq     AddrNextEntry   ; no point to second bank
                      (        tests.asm):00490         
C712 AE02             (        tests.asm):00491         AddrSetEnd      ldx     2,x             ; get end address
C714 9F0A             (        tests.asm):00492                         stx     TestEnd         ; save it in end address to test
                      (        tests.asm):00493                         
C716 9E08             (        tests.asm):00494                         ldx     TestBase        ; get start address
C718 1F10             (        tests.asm):00495         UWriteLoop      tfr     x,d             ; transfer it to d
C71A A780             (        tests.asm):00496                         sta     ,x+             ; write MSB to RAM, this is the page no
C71C 9C0A             (        tests.asm):00497                         cmpx    TestEnd         ; reached end address
C71E 26F8             (        tests.asm):00498                         bne     UWriteLoop      ; nope keep going
                      (        tests.asm):00499                 
C720 9E08             (        tests.asm):00500                         ldx     TestBase        ; get start address
C722 1F10             (        tests.asm):00501         UReadLoop       tfr     x,d             ; transfer it to d
C724 E684             (        tests.asm):00502                         ldb     ,x              ; get value from RAM
C726 3404             (        tests.asm):00503                         pshs    b               ; save it on stack in SRAM
C728 A1E0             (        tests.asm):00504                         cmpa    ,s+             ; is it the same
C72A 260D             (        tests.asm):00505                         bne     AddrTestFail    ; nope : display failure
                      (        tests.asm):00506                         
C72C 3001             (        tests.asm):00507                         leax    1,x             ; move to next byte
C72E 9C0A             (        tests.asm):00508                         cmpx    TestEnd         ; reached end?
C730 26F0             (        tests.asm):00509                         bne     UReadLoop
                      (        tests.asm):00510                         
C732 170628           (        tests.asm):00511                         lbsr    RestoreScreen   ; restore screen from SRAM
C735 17FE26           (        tests.asm):00512                         lbsr    RAMPassed       ; display passed message
C738 39               (        tests.asm):00513                         rts
                      (        tests.asm):00514                         
C739 9F0C             (        tests.asm):00515         AddrTestFail    stx     TestFailAddr    ; save fail values
C73B 970E             (        tests.asm):00516                         sta     TestWrote
C73D D70F             (        tests.asm):00517                         stb     TestRead
C73F 1CFB             (        tests.asm):00518                         andcc   #~FlagZero      ; flag failure
C741 170619           (        tests.asm):00519                         lbsr    RestoreScreen   ; restore screen from SRAM
C744 17FE28           (        tests.asm):00520                         lbsr    RAMFail         ; display fail address
C747 39               (        tests.asm):00521                         rts
                      (        tests.asm):00522         ;
                      (        tests.asm):00523         ; Checksum ROMs
                      (        tests.asm):00524         ;
                      (        tests.asm):00525         ; ROM checksums, in the Dragon 32 and early CoCos these are 2 separate ROMS
                      (        tests.asm):00526         ; in the Dragon 64 and later CoCos these are one single ROM.
                      (        tests.asm):00527         ; I may at some point also Checksum the RAM mode ROM on a D64 (or Alpha).
                      (        tests.asm):00528                         
C748 1708C7           (        tests.asm):00529         ChecksumROMS    lbsr    LCDClrScr       ; Clear LCD screen
                      (        tests.asm):00530                         
C74B 308D0ACF         (        tests.asm):00531                         leax    LMessCSum80,pcr ; point to LCD message
C74F 170941           (        tests.asm):00532                         lbsr    DevWriteStr     ; write it to LCD
                      (        tests.asm):00533                 
C752 CE8000           (        tests.asm):00534                         ldu     #$8000          ; first rom $8000-$9FFF
C755 108EA000         (        tests.asm):00535                         ldy     #$A000
C759 17001E           (        tests.asm):00536                         lbsr    ChecksumROM     ; go get checksum
                      (        tests.asm):00537                         
C75C 7CFF40           (        tests.asm):00538                         inc     LEDS
                      (        tests.asm):00539                                         
C75F 1709DE           (        tests.asm):00540                         lbsr    VCRLCDClrScr    ; Clear LCD screen
C762 308D0ACD         (        tests.asm):00541                         leax    LMessCSumA0,pcr ; point to LCD message
C766 17092A           (        tests.asm):00542                         lbsr    DevWriteStr     ; write it to LCD
                      (        tests.asm):00543         
C769 CEA000           (        tests.asm):00544                         ldu     #$A000          ; second rom $A000-$BFFF
C76C 108EC000         (        tests.asm):00545                         ldy     #$C000
C770 170007           (        tests.asm):00546                         lbsr    ChecksumROM     ; go do checksum
                      (        tests.asm):00547         
C773 7CFF40           (        tests.asm):00548                         inc     LEDS
C776 170570           (        tests.asm):00549                         lbsr    Newline         ; and newline
                      (        tests.asm):00550                         
C779 39               (        tests.asm):00551                         rts
                      (        tests.asm):00552         
C77A 1F31             (        tests.asm):00553         ChecksumROM     tfr     u,x             ; get base address
C77C 3440             (        tests.asm):00554                         pshs    u               ; save base address for later
C77E 170019           (        tests.asm):00555                         lbsr    ChecksumMem     ; go calculate checksum
                      (        tests.asm):00556                         
C781 3406             (        tests.asm):00557                         pshs    d
C783 1708F7           (        tests.asm):00558                         lbsr    DevHexWord      ; output it
                      (        tests.asm):00559                         
C786 170507           (        tests.asm):00560                         lbsr    VSpace          ; output a space
C789 17083E           (        tests.asm):00561                         lbsr    LCR             ; CR to LCD
C78C 3506             (        tests.asm):00562                         puls    d
C78E 3540             (        tests.asm):00563                         puls    u               ; recover base adddress
C790 1700E5           (        tests.asm):00564                         lbsr    RomID           ; identify ROM
                      (        tests.asm):00565                         
C793 170953           (        tests.asm):00566                         lbsr    WaitPause       ; Wait for user to read results
C796 170950           (        tests.asm):00567                         lbsr    WaitPause       ; Wait for user to read results
C799 39               (        tests.asm):00568                         rts
                      (        tests.asm):00569         
                      (        tests.asm):00570         ;
                      (        tests.asm):00571         ; Checksum a block of memory.
                      (        tests.asm):00572         ;
                      (        tests.asm):00573         ; Entry:
                      (        tests.asm):00574         ;       X       = start address
                      (        tests.asm):00575         ;       Y       = end address
                      (        tests.asm):00576         ;
                      (        tests.asm):00577         ; Exit:
                      (        tests.asm):00578         ;       D       = checksum
                      (        tests.asm):00579         ;
                      (        tests.asm):00580         
C79A 3430             (        tests.asm):00581         ChecksumMem     pshs    x,y             ; save end address
C79C 4F               (        tests.asm):00582                         clra                    ; D=0
C79D 5F               (        tests.asm):00583                         clrb
C79E E381             (        tests.asm):00584         ChecksumLoop    addd    ,x++            ; add a byte from emory block
C7A0 AC62             (        tests.asm):00585                         cmpx    2,s             ; reached end yet?
C7A2 25FA             (        tests.asm):00586                         blo     ChecksumLoop
                      (        tests.asm):00587         
C7A4 35B0             (        tests.asm):00588                         puls    x,y,pc          ; restore and return
                      (        tests.asm):00589         
                      (        tests.asm):00590         ;
                      (        tests.asm):00591         ; Test Interrupts
                      (        tests.asm):00592         ;
C7A6 170869           (        tests.asm):00593         InterruptTest   lbsr    LCDClrScr       ; clear LCD screen
C7A9 8603             (        tests.asm):00594                         lda     #DevVDG+DevLCD  ; set output device to both
C7AB 977E             (        tests.asm):00595                         sta     OutputFlag
                      (        tests.asm):00596                 
C7AD DC83             (        tests.asm):00597                         ldd     NMICount        ; get NMI counter
C7AF 308D0BF4         (        tests.asm):00598                         leax    LSpuriousNMI,pcr ; point to message
C7B3 8D4D             (        tests.asm):00599                         bsr     IntShow
                      (        tests.asm):00600                         
C7B5 DC85             (        tests.asm):00601                         ldd     FIRQCount       ; get NMI counter
C7B7 308D0BFC         (        tests.asm):00602                         leax    LSpuriousFIRQ,pcr ; point to message
C7BB 8D45             (        tests.asm):00603                         bsr     IntShow
                      (        tests.asm):00604                         
C7BD 170929           (        tests.asm):00605                         lbsr    WaitPause       
                      (        tests.asm):00606                 
C7C0 17097D           (        tests.asm):00607                         lbsr    VCRLCDClrScr    ; Clear LCD screen, CR on VDG
                      (        tests.asm):00608                 
C7C3 308D0C00         (        tests.asm):00609                         leax    LWaitNMI,pcr    ; Wait for NMI message
C7C7 8640             (        tests.asm):00610                         lda     #NMITrigger     ; flag to CPLD to trigger int after delay
C7C9 8D0F             (        tests.asm):00611                         bsr     WaitForInt
                      (        tests.asm):00612                         
C7CB 1708E1           (        tests.asm):00613                         lbsr    DCR             ; Eol sequence
                      (        tests.asm):00614                         
C7CE 308D0BFF         (        tests.asm):00615                         leax    LWaitFIRQ,pcr   ; Wait for NMI message
C7D2 8620             (        tests.asm):00616                         lda     #FIRQTrigger    ; flag to CPLD to trigger int after delay
C7D4 8D04             (        tests.asm):00617                         bsr     WaitForInt
                      (        tests.asm):00618                         
C7D6 170910           (        tests.asm):00619                         lbsr    WaitPause       
C7D9 39               (        tests.asm):00620                         rts
                      (        tests.asm):00621                         
                      (        tests.asm):00622                         
C7DA 1708B6           (        tests.asm):00623         WaitForInt      lbsr    DevWriteStr     ; write string
                      (        tests.asm):00624                         
C7DD 9787             (        tests.asm):00625                         sta     WaitInt         ; int we are waiting for
C7DF 0F88             (        tests.asm):00626                         clr     GotInt          ; clear Int received flag
                      (        tests.asm):00627                         
C7E1 3402             (        tests.asm):00628                         pshs    a               ; save a
C7E3 B6FF44           (        tests.asm):00629                         lda     StatusReg       ; get current status reg
C7E6 AAE0             (        tests.asm):00630                         ora     ,s+             ; combine with flag
C7E8 B7FF44           (        tests.asm):00631                         sta     StatusReg       ; tell CPLD to trigger it
                      (        tests.asm):00632                         
C7EB 1708EA           (        tests.asm):00633                         lbsr    Wait            ; wait for it.......
                      (        tests.asm):00634                         
C7EE 9688             (        tests.asm):00635                         lda     GotInt          ; check to see if we got an int.....
C7F0 9487             (        tests.asm):00636                         anda    WaitInt                 
C7F2 2606             (        tests.asm):00637                         bne     WeGotInt        ; yes display
                      (        tests.asm):00638         
C7F4 308D0BF7         (        tests.asm):00639                         leax    LTimeout,pcr    ; no int received, tell user
C7F8 2004             (        tests.asm):00640                         bra     DisplayInt
                      (        tests.asm):00641                         
C7FA 308D0BE7         (        tests.asm):00642         WeGotInt        leax    LTriggered,pcr  ; int received, tell user       
                      (        tests.asm):00643         
C7FE 170892           (        tests.asm):00644         DisplayInt      lbsr    DevWriteStr     ; display it
C801 39               (        tests.asm):00645                         rts
                      (        tests.asm):00646         
C802 3406             (        tests.asm):00647         IntShow         pshs    d
C804 1708B1           (        tests.asm):00648                         lbsr    DDollar         ; write dollar sign
C807 3506             (        tests.asm):00649                         puls    d
C809 170871           (        tests.asm):00650                         lbsr    DevHexWord      ; output it
                      (        tests.asm):00651                         
C80C 170884           (        tests.asm):00652                         lbsr    DevWriteStr     ; write string
C80F 39               (        tests.asm):00653                         rts
                      (        tests.asm):00654         
                      (        tests.asm):00655         ;
                      (        tests.asm):00656         ; Cart line tests for CTS / P2
                      (        tests.asm):00657         ;
C810 17092D           (        tests.asm):00658         CartLineTest    lbsr    VCRLCDClrScr    ; clear LCD screen
                      (        tests.asm):00659                         
C813 308D0BEC         (        tests.asm):00660                         leax    LCartTest,pcr   ; Display message
C817 170879           (        tests.asm):00661                         lbsr    DevWriteStr     
                      (        tests.asm):00662         
C81A B6FF44           (        tests.asm):00663                         lda     StatusReg       ; Read current P2 & CTS status, should both be high.
C81D 8403             (        tests.asm):00664                         anda    #StatusCART     ; Check current status
C81F 8103             (        tests.asm):00665                         cmpa    #StatusCART     ; are they both high?
C821 2710             (        tests.asm):00666                         beq     CartTest
                      (        tests.asm):00667         
C823 3402             (        tests.asm):00668                         pshs    a               ; save line status      
C825 308D0BF1         (        tests.asm):00669                         leax    LCartError,pcr  ; Point to error message
C829 170867           (        tests.asm):00670                         lbsr    DevWriteStr     ; write message
                      (        tests.asm):00671                         
C82C 3502             (        tests.asm):00672                         puls    a
C82E 17083F           (        tests.asm):00673                         lbsr    DevHexByte      ; output line status
C831 2018             (        tests.asm):00674                         bra     CartLineExit    ; return without test
                      (        tests.asm):00675                         
C833 308D0BA5         (        tests.asm):00676         CartTest        leax    LWaitP2,pcr     ; point to test name
C837 108EFF50         (        tests.asm):00677                         ldy     #TriggerP2      ; address to trigger it
C83B C608             (        tests.asm):00678                         ldb     #StatusP2Latch  ; Status mask
C83D 8D13             (        tests.asm):00679                         bsr     WaitLine        ; go test it
                      (        tests.asm):00680                         
C83F 308D0B9D         (        tests.asm):00681                         leax    LWaitCTS,pcr    ; point to test name
C843 108EDEFF         (        tests.asm):00682                         ldy     #TriggerCTS     ; address to trigger it
C847 C604             (        tests.asm):00683                         ldb     #StatusCTSLatch ; Status mask
C849 8D07             (        tests.asm):00684                         bsr     WaitLine        ; go test it    
C84B                  (        tests.asm):00685         CartLineExit
C84B 17043F           (        tests.asm):00686                         lbsr    VCR             ; End on new line
C84E 170898           (        tests.asm):00687                         lbsr    WaitPause
C851 39               (        tests.asm):00688                         rts
                      (        tests.asm):00689         
C852 17083E           (        tests.asm):00690         WaitLine        lbsr    DevWriteStr     ; Write the test message
                      (        tests.asm):00691                         
C855 3404             (        tests.asm):00692                         pshs    b               ; save mask on stack
C857 7FFF45           (        tests.asm):00693                         clr     StatusReset     ; clear the latch
                      (        tests.asm):00694                         
C85A A6A4             (        tests.asm):00695                         lda     ,y              ; access the test location
C85C 12               (        tests.asm):00696                         nop                     ; just for luck.....
C85D B6FF44           (        tests.asm):00697                         lda     StatusReg       ; get status register
                      (        tests.asm):00698                         
C860 A4E0             (        tests.asm):00699                         anda    ,s+             ; mask bit out
C862 2706             (        tests.asm):00700                         beq     WaitLineFail    ; bit not latched, we fail
                      (        tests.asm):00701                         
C864 308D0B8F         (        tests.asm):00702                         leax    LPass,pcr       ; point at pass message
C868 2004             (        tests.asm):00703                         bra     WaitLineMess    ; go write it
                      (        tests.asm):00704                         
C86A 308D0B8F         (        tests.asm):00705         WaitLineFail    leax    LFail,pcr       ; point at fail message
                      (        tests.asm):00706         
C86E 170822           (        tests.asm):00707         WaitLineMess    lbsr    DevWriteStr     ; go write pass / fail  
C871 17083E           (        tests.asm):00708                         lbsr    DSpace          ; display a space       
C874 7FFF45           (        tests.asm):00709                         clr     StatusReset     ; clear the latch
C877 39               (        tests.asm):00710                         rts
                      (        tests.asm):00711         ;
                      (        tests.asm):00712         ; ROM ID, from checksum.
                      (        tests.asm):00713         ;
                      (        tests.asm):00714         ; Entry :       D = Checksum
                      (        tests.asm):00715         ;               U = Expected base address
                      (        tests.asm):00716         ;
                      (        tests.asm):00717         
                      (        tests.asm):00718         ; Length of checksum, pageno and string.
     0006             (        tests.asm):00719         RomStrLen       EQU     6
     0009             (        tests.asm):00720         ROMRecordLen    EQU     (2+1+RomStrLen)
                      (        tests.asm):00721                 
C878 3416             (        tests.asm):00722         RomID           pshs    d,x
C87A 1F30             (        tests.asm):00723                         tfr     u,d             ; get rom page into A
C87C 3402             (        tests.asm):00724                         pshs    a               ; save on stack for below
                      (        tests.asm):00725                         
C87E 308D002B         (        tests.asm):00726                         leax    (ChecksumTable-ROMRecordLen),pcr        ; point to table
C882 3009             (        tests.asm):00727         RomIDLoop       leax    ROMRecordLen,x  ; Move to next record
                      (        tests.asm):00728         
C884 EC84             (        tests.asm):00729                         ldd     ,x              ; get a word from table
C886 2705             (        tests.asm):00730                         beq     RomIDFound
                      (        tests.asm):00731                         
C888 10A361           (        tests.asm):00732                         cmpd    1,s             ; compare to checksum passed in
C88B 26F5             (        tests.asm):00733                         bne     RomIDLoop       ; not same, loop again
                      (        tests.asm):00734         
C88D 3410             (        tests.asm):00735         RomIDFound      pshs    x               ; save table pointer
C88F 3003             (        tests.asm):00736                         leax    3,x             ; Point at string
C891 C606             (        tests.asm):00737                         ldb     #RomStrLen      ; length of string      
C893 17080E           (        tests.asm):00738                         lbsr    DevWriteStrN    ; write characters from table
C896 1703F4           (        tests.asm):00739                         lbsr    VCR             ; CR to the VDG
C899 3510             (        tests.asm):00740                         puls    x               ; restore table pointer
                      (        tests.asm):00741         
C89B A602             (        tests.asm):00742                         lda     2,x             ; Get expected page
C89D 81FF             (        tests.asm):00743                         cmpa    #PageInvalid    ; not a real expected page?
C89F 2711             (        tests.asm):00744                         beq     RomIDEnd        ; yep skip
                      (        tests.asm):00745                         
C8A1 A1E4             (        tests.asm):00746                         cmpa    ,s              ; is expected page same as found page?
C8A3 2606             (        tests.asm):00747                         bne     RomIDPage       ; yep flag it!
                      (        tests.asm):00748                 
C8A5 308D09C9         (        tests.asm):00749                         leax    LCorrect,pcr    ; show correct location
C8A9 2004             (        tests.asm):00750                         bra     RomIDShow       ; show it....
                      (        tests.asm):00751         
C8AB 308D09D5         (        tests.asm):00752         RomIDPage       leax    LWrong,pcr      ; Show wrong location....       
C8AF 1707E1           (        tests.asm):00753         RomIDShow       lbsr    DevWriteStr     ; write it
                      (        tests.asm):00754         
C8B2 3261             (        tests.asm):00755         RomIDEnd        leas    1,s             ; drop saved ROM page
C8B4 3596             (        tests.asm):00756                         puls    d,x,pc
                      (        tests.asm):00757                 
                      (        tests.asm):00758         ;
                      (        tests.asm):00759         ; ROM checksum table, consists of records formatted as so :
                      (        tests.asm):00760         ;
                      (        tests.asm):00761         ; Offset        Length  Use
                      (        tests.asm):00762         ; 0             2       ROM checksum value
                      (        tests.asm):00763         ; 2             1       ROM start Page e.g. $80, $A0, $C0, $E0
                      (        tests.asm):00764         ; 3             6       ASCII ROM name.
                      (        tests.asm):00765         ;       
                      (        tests.asm):00766         
     00FF             (        tests.asm):00767         PageInvalid     EQU     $FF             ; Nota a valid checksum, mark it.
                      (        tests.asm):00768         
C8B6                  (        tests.asm):00769         ChecksumTable   
C8B6 B44F             (        tests.asm):00770                         FDB     $B44F           ; Dragon 32
C8B8 80               (        tests.asm):00771                         FCB     $80     
C8B9 443332204C4F     (        tests.asm):00772                         FCC     "D32 LO"
                      (        tests.asm):00773                         
C8BF DACC             (        tests.asm):00774                         FDB     $DACC   
C8C1 A0               (        tests.asm):00775                         FCB     $A0
C8C2 443332204849     (        tests.asm):00776                         FCC     "D32 HI"        
                      (        tests.asm):00777                         
C8C8 D753             (        tests.asm):00778                         FDB     $D753           ; Dragon 64, ROM mode
C8CA 80               (        tests.asm):00779                         FCB     $80     
C8CB 443634204C4F     (        tests.asm):00780                         FCC     "D64 LO"
C8D1 1968             (        tests.asm):00781                         FDB     $1968   
C8D3 A0               (        tests.asm):00782                         FCB     $A0     
C8D4 443634204849     (        tests.asm):00783                         FCC     "D64 HI"
                      (        tests.asm):00784                         
C8DA E334             (        tests.asm):00785                         FDB     $E334
C8DC A0               (        tests.asm):00786                         FCB     $A0
C8DD 543634204849     (        tests.asm):00787                         FCC     "T64 HI"        ; Tano D64, yes it's different from D64.
                      (        tests.asm):00788                         
C8E3 677C             (        tests.asm):00789                         FDB     $677C           ; Color basic 1.0
C8E5 A0               (        tests.asm):00790                         FCB     $A0     
C8E6 434220312E30     (        tests.asm):00791                         FCC     "CB 1.0"        
                      (        tests.asm):00792                         
C8EC 8DC2             (        tests.asm):00793                         FDB     $8DC2           ; Color basic 1.1
C8EE A0               (        tests.asm):00794                         FCB     $A0     
C8EF 434220312E31     (        tests.asm):00795                         FCC     "CB 1.1"        
                      (        tests.asm):00796                         
C8F5 1313             (        tests.asm):00797                         FDB     $1313           ; Color basic 1.2
C8F7 A0               (        tests.asm):00798                         FCB     $A0     
C8F8 434220312E32     (        tests.asm):00799                         FCC     "CB 1.2"        
                      (        tests.asm):00800                         
C8FE 9E9F             (        tests.asm):00801                         FDB     $9E9F           ; Color basic 1.2, CoCo3
C900 A0               (        tests.asm):00802                         FCB     $A0     
C901 434220312E32     (        tests.asm):00803                         FCC     "CB 1.2"
                      (        tests.asm):00804                         
C907 AD56             (        tests.asm):00805                         FDB     $AD56           ; Color basic 1.3
C909 A0               (        tests.asm):00806                         FCB     $A0     
C90A 434220312E33     (        tests.asm):00807                         FCC     "CB 1.3"
                      (        tests.asm):00808         
C910 9E87             (        tests.asm):00809                         FDB     $9E87           ; Extended color basic 1.0 (C) 1980, from CoCo1
C912 80               (        tests.asm):00810                         FCB     $80     
C913 454342312E30     (        tests.asm):00811                         FCC     "ECB1.0"
                      (        tests.asm):00812                         
C919 AF87             (        tests.asm):00813                         FDB     $AF87           ; Extended color basic 1.0 (C) 1981, from MESS
C91B 80               (        tests.asm):00814                         FCB     $80     
C91C 454342312E30     (        tests.asm):00815                         FCC     "ECB1.0"
                      (        tests.asm):00816                         
C922 40AC             (        tests.asm):00817                         FDB     $40AC           ; Extended color basic 1.1
C924 80               (        tests.asm):00818                         FCB     $80     
C925 454342312E31     (        tests.asm):00819                         FCC     "ECB1.1"
                      (        tests.asm):00820                         
C92B 7F63             (        tests.asm):00821                         FDB     $7F63           ; Extended color basic 2.0, CoCo3
C92D 80               (        tests.asm):00822                         FCB     $80     
C92E 454342322E30     (        tests.asm):00823                         FCC     "ECB2.0"
                      (        tests.asm):00824                         
C934 541A             (        tests.asm):00825                         FDB     $541A           ; CoCo3 $C000-$DFFF 'patch' rom
C936 C0               (        tests.asm):00826                         FCB     $C0     
C937 4343332D5052     (        tests.asm):00827                         FCC     "CC3-PR"
                      (        tests.asm):00828                         
C93D C0E6             (        tests.asm):00829                         FDB     $C0E6           ; CoCo3 Super Extended Colour basic
C93F E0               (        tests.asm):00830                         FCB     $E0     
C940 534543422031     (        tests.asm):00831                         FCC     "SECB 1"
                      (        tests.asm):00832                         
C946 F88D             (        tests.asm):00833                         FDB     $F88D           ; LZ Colour 64, ECB 1.0, CB 1.1 (clone/pirate).
C948 80               (        tests.asm):00834                         FCB     $80     
C949 656362312E30     (        tests.asm):00835                         FCC     "ecb1.0"
                      (        tests.asm):00836                         
C94F E321             (        tests.asm):00837                         FDB     $E321   
C951 A0               (        tests.asm):00838                         FCB     $A0     
C952 636220312E31     (        tests.asm):00839                         FCC     "cb 1.1"
                      (        tests.asm):00840                         
C958 986B             (        tests.asm):00841                         FDB     $986B           ; MX-1600, ECB 1.1, CB ??? (clone/pirate).
C95A 80               (        tests.asm):00842                         FCB     $80     
C95B 656362312E31     (        tests.asm):00843                         FCC     "ecb1.1"
                      (        tests.asm):00844                         
C961 96BF             (        tests.asm):00845                         FDB     $96BF   
C963 A0               (        tests.asm):00846                         FCB     $A0     
C964 6362203F3F3F     (        tests.asm):00847                         FCC     "cb ???"
                      (        tests.asm):00848                         
C96A 7733             (        tests.asm):00849                         FDB     $7733           ; CP400, ECB ???, CB ??? (clone/pirate).
C96C 80               (        tests.asm):00850                         FCB     $80     
C96D 6563623F3F3F     (        tests.asm):00851                         FCC     "ecb???"
                      (        tests.asm):00852                         
C973 5732             (        tests.asm):00853                         FDB     $5732   
C975 A0               (        tests.asm):00854                         FCB     $A0     
C976 6362203F3F3F     (        tests.asm):00855                         FCC     "cb ???"
                      (        tests.asm):00856                         
C97C E619             (        tests.asm):00857                         FDB     $E619           ; DraCo, colour basic 1.2 modified for Dragon hardware
C97E A0               (        tests.asm):00858                         FCB     $A0     
C97F 6362312E3264     (        tests.asm):00859                         FCC     "cb1.2d"
                      (        tests.asm):00860                         
C985 7A31             (        tests.asm):00861                         FDB     $7A31           ; Dragon 64 RAM mode ROM, lo
C987 80               (        tests.asm):00862                         FCB     $80     
C988 4436342D4C4F     (        tests.asm):00863                         FCC     "D64-LO"
                      (        tests.asm):00864                         
C98E ABE9             (        tests.asm):00865                         FDB     $ABE9           ; Dragon 64 RAM mode ROM, hi
C990 A0               (        tests.asm):00866                         FCB     $A0     
C991 4436342D4849     (        tests.asm):00867                         FCC     "D64-HI"
                      (        tests.asm):00868                         
C997 FFFF             (        tests.asm):00869                         FDB     $FFFF
C999 FF               (        tests.asm):00870                         FCB     PageInvalid
C99A 4E4F20524F4D     (        tests.asm):00871                         FCC     "NO ROM"
                      (        tests.asm):00872                         
C9A0 0000             (        tests.asm):00873                         FDB     $0000
C9A2 FF               (        tests.asm):00874                         FCB     PageInvalid
C9A3 554E4B4F574E     (        tests.asm):00875                         FCC     "UNKOWN"
C9A9                  (        tests.asm):00876         ChecksumTableEnd                
                      (        tests.asm):00877                         
                      (        tests.asm):00878         ;
                      (        tests.asm):00879         ; Dump PIAs
                      (        tests.asm):00880         ;               
                      (        tests.asm):00881                         
C9A9 170794           (        tests.asm):00882         DumpPIAS        lbsr    VCRLCDClrScr    ; Clear LCD
                      (        tests.asm):00883         
C9AC 308D08E4         (        tests.asm):00884                         leax    LPIATest,pcr    ; point at PIA test message
C9B0 1706E0           (        tests.asm):00885                         lbsr    DevWriteStr     ; and write it
                      (        tests.asm):00886                         
C9B3 170733           (        tests.asm):00887                         lbsr    WaitPause       ; wait with pause
                      (        tests.asm):00888                         
C9B6 338D00B0         (        tests.asm):00889                         leau    DragonPIA,pcr   ; point at Dragon PIA table
C9BA C608             (        tests.asm):00890                         ldb     #DIPDgnCoCo     ; is it a dragon or CoCo?
C9BC 1703B5           (        tests.asm):00891                         lbsr    DIPMask         ; go claculate
C9BF 2604             (        tests.asm):00892                         bne     DumpDragon      ; it's a Dragon already pointin at it's table
C9C1 338D00AD         (        tests.asm):00893                         leau    CoCoPIA,pcr     ; point at CoCo PIA table
                      (        tests.asm):00894         
C9C5 308D08DE         (        tests.asm):00895         DumpDragon      leax    LPIA0Mess,pcr   ; display message for PIA0
C9C9 170683           (        tests.asm):00896                         lbsr    LCDClrWriteStr  ; Clear screen, Write it
                      (        tests.asm):00897                         
C9CC 8EFF00           (        tests.asm):00898                         ldx     #PIA0DA         ; point at PIA
C9CF 8D13             (        tests.asm):00899                         bsr     GetPIADisplay   ; get and display
                      (        tests.asm):00900         
C9D1 308D08D8         (        tests.asm):00901                         leax    LPIA1Mess,pcr   ; display message for PIA0
C9D5 17060E           (        tests.asm):00902                         lbsr    LCDWriteStr     ; Write it
                      (        tests.asm):00903         
C9D8 8EFF20           (        tests.asm):00904                         ldx     #PIA1DA         ; point at PIA
C9DB 8D0A             (        tests.asm):00905                         bsr     GetPIADisplay2  ; get and display
                      (        tests.asm):00906         
C9DD 1702AD           (        tests.asm):00907                         lbsr    VCR             ; EOL on screen
C9E0 170706           (        tests.asm):00908                         lbsr    WaitPause       ; wait with pause
C9E3 39               (        tests.asm):00909                         rts
                      (        tests.asm):00910                         
C9E4 170302           (        tests.asm):00911         GetPIADisplay   lbsr    Newline         ; make sure we are at beginning of line
                      (        tests.asm):00912                         
C9E7 109E1F           (        tests.asm):00913         GetPIADisplay2  ldy     CursorPos       ; save current cursor position
C9EA 109F21           (        tests.asm):00914                         sty     SaveCursorPos   
                      (        tests.asm):00915                         
C9ED 3410             (        tests.asm):00916                         pshs    x
                      (        tests.asm):00917                         
C9EF 308D0ADD         (        tests.asm):00918                         leax    MessPA,pcr      ; point to message
C9F3 170281           (        tests.asm):00919                         lbsr    WriteStr        ; display it
                      (        tests.asm):00920                                         
C9F6 3510             (        tests.asm):00921                         puls    x               ; recover PIA pointer
                      (        tests.asm):00922                         
C9F8 3440             (        tests.asm):00923                         pshs    u
C9FA CE0023           (        tests.asm):00924                         ldu     #PIABuff        ; point at PIA value buffer
C9FD 170501           (        tests.asm):00925                         lbsr    GetPIA          ; get it's values
CA00 3540             (        tests.asm):00926                         puls    u
                      (        tests.asm):00927                         
CA02 9E21             (        tests.asm):00928                         ldx     SaveCursorPos   ; recover cursor pos
CA04 9F1F             (        tests.asm):00929                         stx     CursorPos
                      (        tests.asm):00930                         
CA06 108E0023         (        tests.asm):00931                         ldy     #PIABuff        ; point at PIA value buffer
CA0A 8606             (        tests.asm):00932                         lda     #6              ; 6 values
CA0C 3402             (        tests.asm):00933                         pshs    a               ; save counter on stack
                      (        tests.asm):00934                         
CA0E C602             (        tests.asm):00935                         ldb     #2              ; move cursor 2 places forward
                      (        tests.asm):00936                         
CA10 17025A           (        tests.asm):00937         NextPIAReg      lbsr    CursorMove      ; move it
                      (        tests.asm):00938         
CA13 A6A0             (        tests.asm):00939                         lda     ,y+             ; get a value from buffer
CA15 170658           (        tests.asm):00940                         lbsr    DevHexByte      ; output value
                      (        tests.asm):00941                         
CA18 A6E4             (        tests.asm):00942                         lda     ,s              ; get counter
                      (        tests.asm):00943         
CA1A 8104             (        tests.asm):00944                         cmpa    #$04            ; done 3 values (not decremented till end of loop)?
CA1C 2707             (        tests.asm):00945                         beq     PIASpace        ; yes output space not dash
CA1E 8101             (        tests.asm):00946                         cmpa    #$01            ; end of values.....
CA20 2703             (        tests.asm):00947                         beq     PIASpace        ; yes output space not dash
                      (        tests.asm):00948                         
CA22 862D             (        tests.asm):00949                         lda     #'-'            ; dash between values on LCD
                      (        tests.asm):00950                         
CA24 8C               (        tests.asm):00951                         fcb     Skip2           ; skip 2 bytes
CA25 8620             (        tests.asm):00952         PIASpace        lda     #' '            ; output a space to LCD 
CA27 1705AB           (        tests.asm):00953                         lbsr    LCDWriteChar    ; output to LCD
                      (        tests.asm):00954                         
CA2A C603             (        tests.asm):00955                         ldb     #3              ; 3 spaces forward (on next loop)
                      (        tests.asm):00956                         
CA2C 6AE4             (        tests.asm):00957                         dec     ,s              ; decrement counter
CA2E 26E0             (        tests.asm):00958                         bne     NextPIAReg      ; keep going if more to do
                      (        tests.asm):00959         
                      (        tests.asm):00960         ; check read PIA registers (control and DDR) against expected values
                      (        tests.asm):00961                         
CA30 8602             (        tests.asm):00962         CheckPIA        lda     #2              ; 2 loops
CA32 3402             (        tests.asm):00963                         pshs    a
CA34 6F61             (        tests.asm):00964                         clr     1,s             ; clear byte on stack, check flag
                      (        tests.asm):00965                         
CA36 108E0020         (        tests.asm):00966                         ldy     #PIABuff-3      ; point at PIA value buffer
CA3A 3123             (        tests.asm):00967         CheckPIALoop    leay    3,y             ; point to next group of registers
CA3C A621             (        tests.asm):00968                         lda     1,y             ; get CR
CA3E 843F             (        tests.asm):00969                         anda    #CRMask         ; mask out input bits
CA40 A1C0             (        tests.asm):00970                         cmpa    ,u+             ; check against expected value
CA42 2702             (        tests.asm):00971                         beq     ValOK           ; it's OK
CA44 6C61             (        tests.asm):00972                         inc     1,s             ; flag bad
                      (        tests.asm):00973                         
CA46 A622             (        tests.asm):00974         ValOK           lda     2,y             ; get read ddr
CA48 A1C0             (        tests.asm):00975                         cmpa    ,u+             ; check ddr
CA4A 2702             (        tests.asm):00976                         beq     ValOK2
CA4C 6C61             (        tests.asm):00977                         inc     1,s             ; flag bad
                      (        tests.asm):00978                 
CA4E 6AE4             (        tests.asm):00979         ValOK2          dec     ,s              ; decrement counter
CA50 26E8             (        tests.asm):00980                         bne     CheckPIALoop    ; do B side
                      (        tests.asm):00981         
CA52 308D0AB2         (        tests.asm):00982                         leax    MessOK,pcr      ; assume values OK
CA56 8659             (        tests.asm):00983                         lda     #'Y'            
CA58 6D61             (        tests.asm):00984                         tst     1,s             ; test ok flag
CA5A 2706             (        tests.asm):00985                         beq     PIAAllOK        ; yep the're OK
CA5C 308D0AAC         (        tests.asm):00986                         leax    MessNO,pcr      ; not ok message
CA60 864E             (        tests.asm):00987                         lda     #'N'
                      (        tests.asm):00988                         
CA62 170570           (        tests.asm):00989         PIAAllOK        lbsr    LCDWriteChar    ; write LCD
CA65 17020F           (        tests.asm):00990                         lbsr    WriteStr        ; write to VDG  
CA68 3586             (        tests.asm):00991                         puls    d,pc            ; restore and return
                      (        tests.asm):00992         
     003F             (        tests.asm):00993         CRMask          EQU     $3F             ; mask to read Control regsiter values, ignore input bits
                      (        tests.asm):00994         
                      (        tests.asm):00995         ; tabe to test PIA values
CA6A 3400             (        tests.asm):00996         DragonPIA       FCB     $34,$00         ; PIA 0, CRA,DDRA
CA6C 35FF             (        tests.asm):00997                         FCB     $35,$FF         ; PIA 0, CRB,DDRB
CA6E 34FE             (        tests.asm):00998                         FCB     $34,$FE         ; PIA 1, CRA,DDRA
                      (        tests.asm):00999                         ifndef  Test
                      (        tests.asm):01000                         FCB     $35,$F8         ; PIA 1, CRB,DDRB
                      (        tests.asm):01001                         else
CA70 35F8             (        tests.asm):01002                         FCB     $35,$F8         ; PIA 1, CRB,DDRB
                      (        tests.asm):01003                         endc
                      (        tests.asm):01004                         
CA72 3400             (        tests.asm):01005         CoCoPIA         FCB     $34,$00         ; PIA 0, CRA,DDRA
CA74 35FF             (        tests.asm):01006                         FCB     $35,$FF         ; PIA 0, CRB,DDRB
CA76 34FE             (        tests.asm):01007                         FCB     $34,$FE         ; PIA 1, CRA,DDRA
                      (        tests.asm):01008                         ifndef  Test
                      (        tests.asm):01009                         FCB     $35,$F8         ; PIA 1, CRB,DDRB
                      (        tests.asm):01010                         else
CA78 35F8             (        tests.asm):01011                         FCB     $35,$F8         ; PIA 1, CRB,DDRB
                      (        tests.asm):01012                         endc
                      (        tests.asm):01013                 
                      (        tests.asm):01014         ;
                      (        tests.asm):01015         ; Test to see if CPU is a 6809 or 6309.
                      (        tests.asm):01016         ;       
                      (        tests.asm):01017         ; 
CA7A                  (        tests.asm):01018         GetCPUType      
                      (        tests.asm):01019         ;               lbsr    LCDClrScr       ; clear LCD screen
CA7A 308D0A13         (        tests.asm):01020                         leax    LCPUIs,pcr      ; point to message
CA7E 170612           (        tests.asm):01021                         lbsr    DevWriteStr     ; write it
                      (        tests.asm):01022                         
CA81 C6FF             (        tests.asm):01023                         ldb     #$ff            ; setup b
CA83 10               (        tests.asm):01024                         FCB     $10             ; This will be CLRD on 6309, CLRA on 6809
CA84 4F               (        tests.asm):01025                         clra
CA85 5D               (        tests.asm):01026                         tstb                    ; is b zero?
                      (        tests.asm):01027                         
CA86 2706             (        tests.asm):01028                         beq     Is6309          ; yes, 6309
                      (        tests.asm):01029                         
CA88 308D0A0B         (        tests.asm):01030                         leax    LCPU6809,pcr    ; 6809 messsage
CA8C 2004             (        tests.asm):01031                         bra     ShowCPU         
                      (        tests.asm):01032         
CA8E 308D0A0A         (        tests.asm):01033         Is6309          leax    LCPU6309,pcr    ; 6809 messsage
CA92 1705FE           (        tests.asm):01034         ShowCPU         lbsr    DevWriteStr
CA95 1701F5           (        tests.asm):01035                         lbsr    VCR
CA98 16064E           (        tests.asm):01036                         lbra    WaitPause       ; wait a while
                      (     DiagCart.asm):00382                         use     togglemode.asm  ; Test routines to toggle chip selects.
                      (   togglemode.asm):00001         ;
                      (   togglemode.asm):00002         ; Togglemode....toggle various chip selects.
                      (   togglemode.asm):00003         ;
                      (   togglemode.asm):00004         
CA9B                  (   togglemode.asm):00005         ToggleMode
CA9B 3401             (   togglemode.asm):00006                 pshs    cc                      ; save flags
CA9D 1A50             (   togglemode.asm):00007                 orcc    #IntsDisable
CA9F 17069E           (   togglemode.asm):00008                 lbsr    VCRLCDClrScr            ; clear LCD screen, CR on VDG
CAA2 308D0189         (   togglemode.asm):00009                 leax    ToggleLine,pcr          ; Point to message      
CAA6 17053D           (   togglemode.asm):00010                 lbsr    LCDWriteStr             ; write string on LCD
                      (   togglemode.asm):00011                 
CAA9 338D008E         (   togglemode.asm):00012                 leau    ToggleList,pcr          ; Point to toggle list
CAAD 1701DD           (   togglemode.asm):00013                 lbsr    VCR                     ; new line
                      (   togglemode.asm):00014         
CAB0 308D017B         (   togglemode.asm):00015                 leax    ToggleLine,pcr          ; Point to message      
CAB4 1701C0           (   togglemode.asm):00016                 lbsr    WriteStr                ; Write it
                      (   togglemode.asm):00017                 
CAB7 DC1F             (   togglemode.asm):00018                 ldd     CursorPos               ; save current cursor pos
CAB9 DD21             (   togglemode.asm):00019                 std     SaveCursorPos
                      (   togglemode.asm):00020                 
CABB                  (   togglemode.asm):00021         ToggleModeLoop1
CABB DC21             (   togglemode.asm):00022                 ldd     SaveCursorPos           ; restore cursor pos
CABD DD1F             (   togglemode.asm):00023                 std     CursorPos
CABF 170271           (   togglemode.asm):00024                 lbsr    ClrEOL                  ; clear to end of line
                      (   togglemode.asm):00025                 
CAC2 C601             (   togglemode.asm):00026                 ldb     #$01                    ; clear line 1
CAC4 170596           (   togglemode.asm):00027                 lbsr    LCDClearLine
                      (   togglemode.asm):00028                 
CAC7 EC42             (   togglemode.asm):00029                 ldd     2,u                     ; offset of message
CAC9 847F             (   togglemode.asm):00030                 anda    #$7F                    ; mask out write bit
CACB 308D00A0         (   togglemode.asm):00031                 leax    AY0,pcr                 ; base of message table
CACF 308B             (   togglemode.asm):00032                 leax    d,x                     ; add offset
CAD1 1705BF           (   togglemode.asm):00033                 lbsr    DevWriteStr             ; write it to screen / LCD
                      (   togglemode.asm):00034                 
CAD4                  (   togglemode.asm):00035         CallToggle      
CAD4 8D3C             (   togglemode.asm):00036                 bsr     DoToggle                ; toggle it & scan for buttons
                      (   togglemode.asm):00037         
CAD6 3402             (   togglemode.asm):00038                 pshs    a                       ; save button bitmap
                      (   togglemode.asm):00039                 
CAD8 8601             (   togglemode.asm):00040                 lda     #ButtonNext             ; Is next pressed ?
CADA A4E4             (   togglemode.asm):00041                 anda    ,s                      ; check it
CADC 2632             (   togglemode.asm):00042                 bne     ToggleModeExit          ; yes, exit ToggleMode
                      (   togglemode.asm):00043                 
CADE 8604             (   togglemode.asm):00044                 lda     #ButtonS3               ; is S3 pressed?
CAE0 A4E4             (   togglemode.asm):00045                 anda    ,s                      ; check it
CAE2 260A             (   togglemode.asm):00046                 bne     NextEntry
                      (   togglemode.asm):00047                 
CAE4 8608             (   togglemode.asm):00048                 lda     #ButtonS4               ; is S4 pressed?
CAE6 A4E4             (   togglemode.asm):00049                 anda    ,s                      ; check it
CAE8 2615             (   togglemode.asm):00050                 bne     PrevEntry
                      (   togglemode.asm):00051                 
CAEA 3261             (   togglemode.asm):00052                 leas    1,s                     ; drop saved buttons
CAEC 20E6             (   togglemode.asm):00053                 bra     CallToggle              ; do nothing, keep toggling
                      (   togglemode.asm):00054         
CAEE                  (   togglemode.asm):00055         NextEntry
CAEE 3344             (   togglemode.asm):00056                 leau    4,u                     ; Entries are 4 bytes long
CAF0 AE42             (   togglemode.asm):00057                 ldx     2,u                     ; get string address
CAF2 8CFFFF           (   togglemode.asm):00058                 cmpx    #TTerminator            ; End of list?
CAF5 2604             (   togglemode.asm):00059                 bne     ContinueToggle          ; no, loop for more
                      (   togglemode.asm):00060                 
CAF7 338D0040         (   togglemode.asm):00061                 leau    ToggleList,pcr          ; point to beginning of list
                      (   togglemode.asm):00062         
CAFB                  (   togglemode.asm):00063         ContinueToggle
CAFB 3261             (   togglemode.asm):00064                 leas    1,s                     ; drop saved buttons
CAFD 20BC             (   togglemode.asm):00065                 bra     ToggleModeLoop1         ; loop for more
                      (   togglemode.asm):00066                 
CAFF                  (   togglemode.asm):00067         PrevEntry
CAFF 335C             (   togglemode.asm):00068                 leau    -4,u                    ; Entries are 4 bytes long
CB01 AE42             (   togglemode.asm):00069                 ldx     2,u                     ; get string address
CB03 8CFFFF           (   togglemode.asm):00070                 cmpx    #TTerminator            ; End of list?
CB06 26F3             (   togglemode.asm):00071                 bne     ContinueToggle          ; no, loop for more
                      (   togglemode.asm):00072                 
CB08 338D005F         (   togglemode.asm):00073                 leau    ToggleListTerm,pcr      ; point past end of list
CB0C 335C             (   togglemode.asm):00074                 leau    -4,u                    ; back one entry
CB0E 20EB             (   togglemode.asm):00075                 bra     ContinueToggle          ; loop for more
                      (   togglemode.asm):00076                         
CB10                  (   togglemode.asm):00077         ToggleModeExit
CB10 3583             (   togglemode.asm):00078                 puls    a,cc,pc                 ; restore and return
                      (   togglemode.asm):00079                 
CB12                  (   togglemode.asm):00080         DoToggle
CB12 5F               (   togglemode.asm):00081                 clrb                            ; clear counter
CB13 AEC4             (   togglemode.asm):00082                 ldx     ,u                      ; Get address to access
                      (   togglemode.asm):00083         
CB15                  (   togglemode.asm):00084         DoToggleRW
CB15 6D42             (   togglemode.asm):00085                 tst     2,u                     ; get R/W bit
CB17 2B07             (   togglemode.asm):00086                 bmi     DoToggleWLoop           ; if set write to that address
                      (   togglemode.asm):00087                 
CB19                  (   togglemode.asm):00088         DoToggleRLoop
CB19 A684             (   togglemode.asm):00089                 lda     ,x                      ; access the address......
CB1B 5A               (   togglemode.asm):00090                 decb                            ; decrement count
CB1C 26FB             (   togglemode.asm):00091                 bne     DoToggleRLoop           ; loop until zero
CB1E 2005             (   togglemode.asm):00092                 bra     DoTogglePoll            ; poll buttons
                      (   togglemode.asm):00093                 
CB20                  (   togglemode.asm):00094         DoToggleWLoop
CB20 A784             (   togglemode.asm):00095                 sta     ,x                      ; access the address......
CB22 5A               (   togglemode.asm):00096                 decb                            ; decrement count
CB23 26FB             (   togglemode.asm):00097                 bne     DoToggleWLoop           ; loop until zero
                      (   togglemode.asm):00098                 
CB25                  (   togglemode.asm):00099         DoTogglePoll    
CB25 B6FF43           (   togglemode.asm):00100                 lda     Buttons                 ; Are any buttons being pressed?
CB28 840F             (   togglemode.asm):00101                 anda    #ButtonMask             ; ignore non button bits
CB2A 27E9             (   togglemode.asm):00102                 beq     DoToggleRW              ; none down continue toggling
                      (   togglemode.asm):00103                 
CB2C 3402             (   togglemode.asm):00104                 pshs    a                       ; save buttons
                      (   togglemode.asm):00105         
CB2E                  (   togglemode.asm):00106         ToggleWaitUp    
CB2E B6FF43           (   togglemode.asm):00107                 lda     Buttons                 ; get buttons
CB31 840F             (   togglemode.asm):00108                 anda    #ButtonMask             ; ignore non button bits
CB33 26F9             (   togglemode.asm):00109                 bne     ToggleWaitUp            ; wait till released
                      (   togglemode.asm):00110                 
CB35 3582             (   togglemode.asm):00111                 puls    a,pc                    ; restore and return
                      (   togglemode.asm):00112                 
                      (   togglemode.asm):00113                 
     FFFF             (   togglemode.asm):00114         TTerminator     EQU     $FFFF   
     8000             (   togglemode.asm):00115         WFlag           EQU     $8000           ; write flag
                      (   togglemode.asm):00116         ; Table consists of entries each of 2 words, first is the address to access
                      (   togglemode.asm):00117         ; second is the offset of the name of the test, zero terminated
                      (   togglemode.asm):00118         ; note terminator at both ends is *REQUIRED*
CB37 FFFFFFFF         (   togglemode.asm):00119                 FDB     TTerminator,TTerminator ; terminator
CB3B                  (   togglemode.asm):00120         ToggleList
CB3B 00000000         (   togglemode.asm):00121                 FDB     $0000,(AY0-AY0)         ; RAM read $0000, bank0
CB3F 10000010         (   togglemode.asm):00122                 FDB     $1000,(AY0A-AY0)        ; RAM read $1000, bank 1 for 4K rams
CB43 40000020         (   togglemode.asm):00123                 FDB     $4000,(AY0B-AY0)        ; RAM read $4000, bank 1 for 16K rams
CB47 80000030         (   togglemode.asm):00124                 FDB     $8000,(AY1-AY0)         ; ROM $8000-$9FFF
CB4B A0000040         (   togglemode.asm):00125                 FDB     $A000,(AY2-AY0)         ; ROM $A000-$BFFF
CB4F DEFF0050         (   togglemode.asm):00126                 FDB     TriggerCTS,(AY3-AY0)    ; ROM $C000-$FEFF
CB53 FF000060         (   togglemode.asm):00127                 FDB     $FF00,(AY4-AY0)         ; PIA0
CB57 FF200070         (   togglemode.asm):00128                 FDB     $FF20,(AY5-AY0)         ; PIA1
CB5B FF500080         (   togglemode.asm):00129                 FDB     TriggerP2,(AY6-AY0)     ; I/O2
CB5F 00008090         (   togglemode.asm):00130                 FDB     $0000,WFlag+(AY7-AY0)   ; RAM write $0000, bank0
CB63 100080A0         (   togglemode.asm):00131                 FDB     $1000,WFlag+(AY7A-AY0)  ; RAM write $1000, bank 1 for 4K rams
CB67 400080B0         (   togglemode.asm):00132                 FDB     $4000,WFlag+(AY7B-AY0)  ; RAM write $4000, bank 1 for 16K rams
CB6B                  (   togglemode.asm):00133         ToggleListTerm
CB6B FFFFFFFF         (   togglemode.asm):00134                 FDB     TTerminator,TTerminator ; terminator
                      (   togglemode.asm):00135         
     000C             (   togglemode.asm):00136         NoToggle        EQU     (ToggleListTerm-ToggleList)/4
                      (   togglemode.asm):00137         
CB6F 52414D5220243030 (   togglemode.asm):00138         AY0     FCN     "RAMR $0000 (Y0)"
     3030202859302900
CB7F 52414D5220243130 (   togglemode.asm):00139         AY0A    FCN     "RAMR $1000 (Y0)"
     3030202859302900
CB8F 52414D5220243430 (   togglemode.asm):00140         AY0B    FCN     "RAMR $4000 (Y0)"
     3030202859302900
CB9F 524F4D2020243830 (   togglemode.asm):00141         AY1     FCN     "ROM  $8000 (Y1)"       
     3030202859312900
CBAF 524F4D2020244130 (   togglemode.asm):00142         AY2     FCN     "ROM  $A000 (Y2)"       
     3030202859322900
CBBF 524F4D2020244330 (   togglemode.asm):00143         AY3     FCN     "ROM  $C000 (Y3)"
     3030202859332900
CBCF 5049413020244646 (   togglemode.asm):00144         AY4     FCN     "PIA0 $FF00 (Y4)"
     3030202859342900
CBDF 5049413120244646 (   togglemode.asm):00145         AY5     FCN     "PIA1 $FF20 (Y5)"
     3230202859352900
CBEF 492F4F2020244646 (   togglemode.asm):00146         AY6     FCN     "I/O  $FF40 (Y6)"
     3430202859362900
CBFF 52414D5720243030 (   togglemode.asm):00147         AY7     FCN     "RAMW $0000 (Y7)"
     3030202859372900
CC0F 52414D5720243130 (   togglemode.asm):00148         AY7A    FCN     "RAMW $1000 (Y7)"
     3030202859372900
CC1F 52414D5720243430 (   togglemode.asm):00149         AY7B    FCN     "RAMW $4000 (Y7)"
     3030202859372900
                      (   togglemode.asm):00150         
                      (   togglemode.asm):00151         ;                123456789012345678901234 56789
CC2F                  (   togglemode.asm):00152         ToggleLine
CC2F 546F67676C696E67 (   togglemode.asm):00153                 FCN     "Toggling line: "
     206C696E653A2000
                      (   togglemode.asm):00154                 
                      (     DiagCart.asm):00383         ;****[ Included modules: drivers ]****************************************
                      (     DiagCart.asm):00384                         use     console.asm     ; VDG text output routines
                      (      console.asm):00001         ;
                      (      console.asm):00002         ; Console related routines.
                      (      console.asm):00003         ; 
                      (      console.asm):00004         
     001F             (      console.asm):00005         TextMaxX        EQU     31              ; Max X co-ordinate
     000F             (      console.asm):00006         TextMaxY        EQU     15              ; Max Y co-ordinate
     001F             (      console.asm):00007         TextYMask       EQU     TextMaxX        ; Mask to illiminate X bits
     01E0             (      console.asm):00008         TextLastLine    EQU     (TextMaxX+1)*TextMaxY
     0060             (      console.asm):00009         VDGSpace        EQU     $60             ; VDG space character
                      (      console.asm):00010         
                      (      console.asm):00011         
CC3F 8E0400           (      console.asm):00012         InitScreenVars  ldx     #TextScreenBase ; get base of screen RAM
CC42 17029A           (      console.asm):00013                         lbsr    SetSAMScr       ; set SAM screen address
                      (      console.asm):00014         
                      (      console.asm):00015         ;
                      (      console.asm):00016         ; Clear screen
                      (      console.asm):00017         ;
                      (      console.asm):00018         
CC45 8660             (      console.asm):00019         ClearScreen     lda     #VDGSpace       ; get space char
CC47 9E1B             (      console.asm):00020                         ldx     ScreenBase      ; point at screen base
CC49 9F1F             (      console.asm):00021                         stx     CursorPos       ; home cursor
CC4B A780             (      console.asm):00022         CLSLoop         sta     ,x+             ; clear a character             
CC4D 9C1D             (      console.asm):00023                         cmpx    ScreenEnd       ; end of screen
CC4F 26FA             (      console.asm):00024                         bne     CLSLoop         ; no keep going
CC51 39               (      console.asm):00025                         rts
                      (      console.asm):00026         
                      (      console.asm):00027         ;
                      (      console.asm):00028         ; GotoXY
                      (      console.asm):00029         ;
                      (      console.asm):00030         ; Entry:
                      (      console.asm):00031         ;       A       = New X
                      (      console.asm):00032         ;       B       = New Y
                      (      console.asm):00033         ; Exit:
                      (      console.asm):00034         ;       Updates CursorPos, CC.C clear if ok, set if error in X or Y
                      (      console.asm):00035         ;
                      (      console.asm):00036         
CC52 811F             (      console.asm):00037         GotoXY  cmpa    #TextMaxX               ; validate X
CC54 2214             (      console.asm):00038                 bhi     GotoXYError             ; invalid, error
                      (      console.asm):00039                 
CC56 C10F             (      console.asm):00040                 cmpb    #TextMaxY               ; validate Y
CC58 2210             (      console.asm):00041                 bhi     GotoXYError             ; invalid, error
                      (      console.asm):00042                 
CC5A 3402             (      console.asm):00043                 pshs    a                       ; save X
CC5C 8620             (      console.asm):00044                 lda     #(TextMaxX+1)           ; chars / line
CC5E 3D               (      console.asm):00045                 mul                             ; multiply them
CC5F EBE0             (      console.asm):00046                 addb    ,s+                     ; add X
CC61 8900             (      console.asm):00047                 adca    #0                      ; propagate carry
CC63 D31B             (      console.asm):00048                 addd    ScreenBase              ; add screen base
CC65 DD1F             (      console.asm):00049                 std     CursorPos               ; update cursor position
                      (      console.asm):00050                 
CC67 1CFE             (      console.asm):00051                 andcc   #~FlagCarry             ; clear carry
CC69 39               (      console.asm):00052                 rts
                      (      console.asm):00053         
CC6A                  (      console.asm):00054         GotoXYError     
CC6A 1A01             (      console.asm):00055                 orcc    #FlagCarry              ; flag error
CC6C 39               (      console.asm):00056                 rts
                      (      console.asm):00057         
                      (      console.asm):00058         ;
                      (      console.asm):00059         ; Move Cursor forward or backward the number of characters in b
                      (      console.asm):00060         ;
                      (      console.asm):00061         
CC6D                  (      console.asm):00062         CursorMove
CC6D 3410             (      console.asm):00063                 pshs    x                       ; save regs
CC6F 9E1F             (      console.asm):00064                 ldx     CursorPos               ; get cursor pos
CC71 3085             (      console.asm):00065                 leax    b,x                     ; move it
CC73 9F1F             (      console.asm):00066                 stx     CursorPos
CC75 3590             (      console.asm):00067                 puls    x,pc                    ; restor and return
                      (      console.asm):00068                 
                      (      console.asm):00069         ;
                      (      console.asm):00070         ; Write zero terminated string pointed to by X
                      (      console.asm):00071         ;
                      (      console.asm):00072                         
CC77 A680             (      console.asm):00073         WriteStr        lda     ,x+             ; get a char
CC79 4D               (      console.asm):00074                         tsta                    ; test for end of string
CC7A 2704             (      console.asm):00075                         beq     WriteEnd        ; yes exit      
                      (      console.asm):00076                         
CC7C 8D1A             (      console.asm):00077                         bsr     WriteChar       ; Write it.
CC7E 20F7             (      console.asm):00078                         bra     WriteStr        ; do next char
                      (      console.asm):00079                         
CC80 39               (      console.asm):00080         WriteEnd        rts
                      (      console.asm):00081         
                      (      console.asm):00082         ;
                      (      console.asm):00083         ; Write zero terminated string pointed to by X
                      (      console.asm):00084         ;
                      (      console.asm):00085                         
CC81 A680             (      console.asm):00086         WriteStrUpper   lda     ,x+             ; get a char
CC83 4D               (      console.asm):00087                         tsta                    ; test for end of string
CC84 27FA             (      console.asm):00088                         beq     WriteEnd        ; yes exit      
                      (      console.asm):00089                         
CC86 170483           (      console.asm):00090                         lbsr    UpCase          ; convert to upper case
                      (      console.asm):00091                         
CC89 8D0D             (      console.asm):00092         WriteStrUpGo    bsr     WriteChar       ; Write it.
CC8B 20F4             (      console.asm):00093                         bra     WriteStrUpper   ; do next char
                      (      console.asm):00094         
                      (      console.asm):00095         ;
                      (      console.asm):00096         ; For convenience.......
                      (      console.asm):00097         ;
CC8D 860D             (      console.asm):00098         VCR             lda     #CR             ; EOL
CC8F 8C               (      console.asm):00099                         fcb     Skip2           ; skip 2 bytes
                      (      console.asm):00100         
CC90 8620             (      console.asm):00101         VSpace          lda     #' '            ; space character
CC92 8C               (      console.asm):00102                         fcb     Skip2           ; skip 2 bytes
                      (      console.asm):00103                         
CC93 862D             (      console.asm):00104         VDash           lda     #'-'            ; dash character
CC95 8C               (      console.asm):00105                         fcb     Skip2           ; skip 2 bytes
                      (      console.asm):00106                         
CC96 8624             (      console.asm):00107         VDollar         lda     #'$'            ; write a dollar char
                      (      console.asm):00108         
CC98 0D1A             (      console.asm):00109         WriteChar       tst     ScreenOK        ; is it OK to use the screen
CC9A 2601             (      console.asm):00110                         bne     WriteCharOK     ; yes....
CC9C 39               (      console.asm):00111                         rts
                      (      console.asm):00112                         
CC9D 3416             (      console.asm):00113         WriteCharOK     pshs    d,x             ; save regs
CC9F 9E1F             (      console.asm):00114                         ldx     CursorPos       ; cursor positiion
                      (      console.asm):00115                         
CCA1 810D             (      console.asm):00116                         cmpa    #CR             ; EOL?
CCA3 2733             (      console.asm):00117                         beq     WriteEol        ; yes, deal with it
                      (      console.asm):00118                 
CCA5 8108             (      console.asm):00119                         cmpa    #BS             ; backspace?
CCA7 260A             (      console.asm):00120                         bne     NotBS
                      (      console.asm):00121                 
CCA9 9C1B             (      console.asm):00122                         cmpx    ScreenBase      ; at beginning of screen?
CCAB 2729             (      console.asm):00123                         beq     WriteCharEnd    ; do nothing
                      (      console.asm):00124                         
CCAD 8660             (      console.asm):00125                         lda     #VDGSpace       ; VDG space char
CCAF A782             (      console.asm):00126                         sta     ,-x             ; backspace it
CCB1 2021             (      console.asm):00127                         bra     WriteCharDone   ; save new cursor pos
                      (      console.asm):00128                         
CCB3 4D               (      console.asm):00129         NotBS           tsta                    ; set CC flags
CCB4 2B10             (      console.asm):00130                         bmi     WriteCharGo     ; just write it if semigraphic
                      (      console.asm):00131                                         
CCB6 8120             (      console.asm):00132                         cmpa    #' '            ; Is it a control char?
CCB8 251C             (      console.asm):00133                         blo     WriteCharEnd    ; do nothing
                      (      console.asm):00134                         
CCBA 8140             (      console.asm):00135                         cmpa    #'@'            ; is it a number or special char?
CCBC 2506             (      console.asm):00136                         bcs     WriteSpecial    ; yes, go do it
                      (      console.asm):00137                         
CCBE 8160             (      console.asm):00138                         cmpa    #$60            ; alphabetic uppercase?
CCC0 2504             (      console.asm):00139                         bcs     WriteCharGo     ; yep write it
                      (      console.asm):00140                         
CCC2 84DF             (      console.asm):00141                         anda    #$DF            ; clear bit 5 force ASCII lower case to be upper
CCC4 8840             (      console.asm):00142         WriteSpecial    eora    #$40            ; invert bit 6 swap upper / lower case 
CCC6 A780             (      console.asm):00143         WriteCharGo     sta     ,x+             ; write char to screen
                      (      console.asm):00144         
CCC8 9C1D             (      console.asm):00145                         cmpx    ScreenEnd       ; at end of screen?
CCCA 2608             (      console.asm):00146                         bne     WriteCharDone   ; nope, we're done
                      (      console.asm):00147                         
CCCC 8D2C             (      console.asm):00148                         bsr     ScrollScreen    ; scroll the screen....
CCCE 9E1B             (      console.asm):00149                         ldx     ScreenBase      ; reset to beginning of last line
CCD0 308901E0         (      console.asm):00150                         leax    TextLastLine,x
                      (      console.asm):00151         
CCD4 9F1F             (      console.asm):00152         WriteCharDone   stx     CursorPos       ; resave cursor pos
CCD6 3596             (      console.asm):00153         WriteCharEnd    puls    d,x,pc          ; restore and return            
                      (      console.asm):00154                         
CCD8 9F1F             (      console.asm):00155         WriteEol        stx     CursorPos       ; save cursor pos
CCDA 8D57             (      console.asm):00156                         bsr     ClrEOL          ; clear to end of line
CCDC 8D0B             (      console.asm):00157                         bsr     Newline         ; Move cursor to new line
CCDE 20F6             (      console.asm):00158                         bra     WriteCharEnd    ; restore cursor pos and continue
                      (      console.asm):00159         
                      (      console.asm):00160         ;
                      (      console.asm):00161         ; WriteCharUpper, writes char but uppercase first....
                      (      console.asm):00162         ;               
CCE0 3402             (      console.asm):00163         WriteCharUpper  pshs    a               ; save char so we don't change it
CCE2 170427           (      console.asm):00164                         lbsr    UpCase          ; convert to upper case
CCE5 8DB1             (      console.asm):00165                         bsr     WriteChar       ; go write it
CCE7 3582             (      console.asm):00166                         puls    a,pc            ; restore and return
                      (      console.asm):00167                                         
CCE9 DC1F             (      console.asm):00168         Newline         ldd     CursorPos       ; get cursor pos
CCEB C4E0             (      console.asm):00169                         andb    #~TextYMask     ; 32 chars / line
CCED C30020           (      console.asm):00170                         addd    #TextMaxX+1     ; move to next line
CCF0 DD1F             (      console.asm):00171                         std     CursorPos       ; save cursor pos
CCF2 10931D           (      console.asm):00172                         cmpd    ScreenEnd       ; are we past end of screen?
CCF5 2502             (      console.asm):00173                         blo     NewLineExit     ; no, just return
                      (      console.asm):00174                         
CCF7 8D01             (      console.asm):00175                         bsr     ScrollScreen    ; else scroll screen
CCF9 39               (      console.asm):00176         NewLineExit     rts
                      (      console.asm):00177         
CCFA 3416             (      console.asm):00178         ScrollScreen    pshs    x,d             ; save regs
CCFC 9E1B             (      console.asm):00179                         ldx     ScreenBase      ; Base of screen
CCFE 308901E0         (      console.asm):00180                         leax    TextLastLine,x  ; beginning of last line
CD02 3410             (      console.asm):00181                         pshs    x               ; save end on stack
                      (      console.asm):00182                         
CD04 9E1B             (      console.asm):00183                         ldx     ScreenBase      ; point at screen base
CD06 EC8820           (      console.asm):00184         ScrollNext1     ldd     (TextMaxX+1),x  ; get 2 chars from screen
CD09 ED81             (      console.asm):00185                         std     ,x++            ; save on line above
CD0B 9C1D             (      console.asm):00186                         cmpx    ScreenEnd       ; end of screen?
CD0D 26F7             (      console.asm):00187                         bne     ScrollNext1     ; no, loop again
                      (      console.asm):00188         
CD0F 3510             (      console.asm):00189                         puls    x               ; restore end of last line pointer
CD11 9F1F             (      console.asm):00190                         stx     CursorPos       ; update cursor pos
CD13 8D1E             (      console.asm):00191                         bsr     ClrEOL          ; clear to end of line          
                      (      console.asm):00192                         
CD15 3596             (      console.asm):00193                         puls    d,x,pc          ; restore and return
                      (      console.asm):00194         
CD17 3402             (      console.asm):00195         VDGSet          pshs    a               ; save a
CD19 967E             (      console.asm):00196                         lda     OutputFlag      ; get output flag
CD1B 977F             (      console.asm):00197                         sta     OldOutputFlag   ; save it
CD1D 8601             (      console.asm):00198                         lda     #DevVDG         ; LCD.....
CD1F 977E             (      console.asm):00199                         sta     OutputFlag      
CD21 3582             (      console.asm):00200                         puls    a,pc            ; restore and return
                      (      console.asm):00201         
CD23 8DF2             (      console.asm):00202         VHexByte        bsr     VDGSet          ; set to LCD only
CD25 170348           (      console.asm):00203                         lbsr    DevHexByte      ; call hex routine
CD28 1603A5           (      console.asm):00204                         lbra    OutputReset     ; Reset output byte
                      (      console.asm):00205                         
CD2B 8DEA             (      console.asm):00206         VHexWord        bsr     VDGSet          ; set to LCD only
CD2D 17034D           (      console.asm):00207                         lbsr    DevHexWord      ; call hex routine
CD30 16039D           (      console.asm):00208                         lbra    OutputReset     ; Reset output byte
                      (      console.asm):00209                         
                      (      console.asm):00210         ;
                      (      console.asm):00211         ; Clear to end of cursor line. 
                      (      console.asm):00212         ; Note does not change CursorPos
                      (      console.asm):00213         ;
CD33 3416             (      console.asm):00214         ClrEOL          pshs    x,d             ; save regs
CD35 DC1F             (      console.asm):00215                         ldd     CursorPos       ; get cursor position
CD37 C4E0             (      console.asm):00216                         andb    #~TextYMask     ; 32 chars / line
CD39 C30020           (      console.asm):00217                         addd    #TextMaxX+1     ; move to next line
CD3C 3406             (      console.asm):00218                         pshs    d               ; save as target on stack
CD3E 8660             (      console.asm):00219                         lda     #VDGSpace       ; get a space
CD40 9E1F             (      console.asm):00220                         ldx     CursorPos
CD42 ACE4             (      console.asm):00221         ClrEOLLoop      cmpx    ,s              ; reached EOL?
CD44 2704             (      console.asm):00222                         beq     ClrEOLEnd       ; yep exit
CD46 A780             (      console.asm):00223                         sta     ,x+             ; clear a char
CD48 20F8             (      console.asm):00224                         bra     ClrEOLLoop      ; do next 
                      (      console.asm):00225                         
CD4A 3262             (      console.asm):00226         ClrEOLEnd       leas    2,s             ; drop new cursor pos
CD4C 3596             (      console.asm):00227                         puls    x,d,pc          ; restore and return
                      (      console.asm):00228         
                      (      console.asm):00229         
                      (      console.asm):00230         ;
                      (      console.asm):00231         ; Save screen, copy screen RAM to temp buffer.
                      (      console.asm):00232         ;
                      (      console.asm):00233         
CD4E 9E1B             (      console.asm):00234         SaveScreen      ldx     ScreenBase      ; get base of screen RAM
CD50 108E0089         (      console.asm):00235                         ldy     #ScreenBuffer   ; point to buffer to save in
CD54 A680             (      console.asm):00236         SaveScreenLoop  lda     ,x+             ; get a byte
CD56 A7A0             (      console.asm):00237                         sta     ,y+             ; save in buffer
CD58 9C1D             (      console.asm):00238                         cmpx    ScreenEnd       ; end of screen?
CD5A 26F8             (      console.asm):00239                         bne     SaveScreenLoop  ; nope keep going
CD5C 39               (      console.asm):00240                         rts
                      (      console.asm):00241                         
CD5D 9E1B             (      console.asm):00242         RestoreScreen   ldx     ScreenBase      ; get base of screen RAM
CD5F 108E0089         (      console.asm):00243                         ldy     #ScreenBuffer   ; point to buffer to save in
CD63                  (      console.asm):00244         RestoreScreenLoop       
CD63 A6A0             (      console.asm):00245                         lda     ,y+             ; get a byte
CD65 A780             (      console.asm):00246                         sta     ,x+             ; save in buffer
CD67 9C1D             (      console.asm):00247                         cmpx    ScreenEnd       ; end of screen?
CD69 26F8             (      console.asm):00248                         bne     RestoreScreenLoop ; nope keep going
CD6B 39               (      console.asm):00249                         rts
                      (     DiagCart.asm):00385                         use     hardware.asm    ; hardware initialization and defines
                      (     hardware.asm):00001         ;
                      (     hardware.asm):00002         ; Hardware related routines for Diag cart
                      (     hardware.asm):00003         ;
                      (     hardware.asm):00004         
                      (     hardware.asm):00005         
     FF40             (     hardware.asm):00006         HWBase          EQU     $FF40           ; base hardware address
     FF40             (     hardware.asm):00007         LEDS            EQU     $FF40           ; LEDS, I/O register
     FF41             (     hardware.asm):00008         LEDS2           EQU     $FF41           ; second group of LEDS
                      (     hardware.asm):00009         
     0001             (     hardware.asm):00010         LED2IRQ         EQU     %00000001       ; LED to flash on IRQ
     0002             (     hardware.asm):00011         LED2Pause       EQU     %00000010       ; LED to light when in pause
                      (     hardware.asm):00012         
                      (     hardware.asm):00013         ; Dipswitches arwe bottom 4 bits, pushbuttons are top 4.
     FF42             (     hardware.asm):00014         DIPSw           EQU     HWBase+2        ; dipswitches for machine type 
     FF43             (     hardware.asm):00015         Buttons         EQU     HWBase+3        ; Buttons
                      (     hardware.asm):00016         
                      (     hardware.asm):00017         ; DIP switch constants
     000F             (     hardware.asm):00018         DIPSMask        EQU     %00001111       ; 4 DIP switches
     00F0             (     hardware.asm):00019         DIPCMask        EQU     %11110000       ; control dip switches.
                      (     hardware.asm):00020         
                      (     hardware.asm):00021         ;DIP masks
     0080             (     hardware.asm):00022         DIPLoopTest     EQU     %10000000       ; Loop tests, when we reach the end of all tests, run again
     0040             (     hardware.asm):00023         DIPNoDelay      EQU     %01000000       ; Don't delay between tests.
     0020             (     hardware.asm):00024         DIPSkipLong     EQU     %00100000       ; Skip long tests
     0010             (     hardware.asm):00025         DIPOneBank      EQU     %00010000       ; only test one bank of 4K or 16K RAMS
                      (     hardware.asm):00026         
     0008             (     hardware.asm):00027         DIPDgnCoCo      EQU     %00001000       ; Dragon (1) or CoCo (0)
     0004             (     hardware.asm):00028         DIPSetRAM       EQU     %00000100       ; Directly set RAM type from DIP 1 and 2
     0003             (     hardware.asm):00029         DIPMachineMask  EQU     %00000011       ; Mask for bits that set machine
     0003             (     hardware.asm):00030         DIPDRAMMask     EQU     %00000011       ; Mask for extracting DRAM type
                      (     hardware.asm):00031         
                      (     hardware.asm):00032         ; Dragons, valid with DgnCoCo=1
     0001             (     hardware.asm):00033         DIPD64          EQU     %00000001       ; If Dragon is D64 
     0002             (     hardware.asm):00034         DIPDAlpha       EQU     %00000010       ; if Dragon is Alpha
                      (     hardware.asm):00035         
                      (     hardware.asm):00036         ; CoCos, valid with DgnCoCo=0
     0000             (     hardware.asm):00037         DIPCoCo12       EQU     %00000000       ; CoCo1, CoCo2
     0001             (     hardware.asm):00038         DIPCoCo3        EQU     %00000001       ; CoCo3
                      (     hardware.asm):00039         
     0008             (     hardware.asm):00040         DIPMaskD32      EQU     DIPDgnCoCo
     0009             (     hardware.asm):00041         DIPMaskD64      EQU     (DIPDgnCoCo+DIPD64)
     000A             (     hardware.asm):00042         DIPMaskAlpha    EQU     (DIPDgnCoCo+DIPDAlpha)
                      (     hardware.asm):00043         
                      (     hardware.asm):00044         ;DIPTest                EQU     DIPMaskD32+DIPSkipLong+DIPLoopTest+DIPNoDelay   ; +SkipLong     ; when testing with Mame/Mess, dip switches will read this
                      (     hardware.asm):00045         ;DIPTest                EQU     DIPMaskD32      ; +SkipLong     ; when testing with Mame/Mess, dip switches will read this
     0029             (     hardware.asm):00046         DIPTest         EQU     DIPMaskD64+DIPSkipLong
                      (     hardware.asm):00047         ;DIPTest                        EQU     DIPCoCo3
                      (     hardware.asm):00048         
                      (     hardware.asm):00049         ; psuhbuttons
     000F             (     hardware.asm):00050         ButtonMask      EQU     %00001111       ; 4 pushbuttons
     0001             (     hardware.asm):00051         ButtonNext      EQU     %00000001       ; To move to next test
     0002             (     hardware.asm):00052         ButtonPause     EQU     %00000010       ; To pause tests
     0004             (     hardware.asm):00053         ButtonS3        EQU     %00000100       ; S3, currently unused
     0008             (     hardware.asm):00054         ButtonS4        EQU     %00001000       ; S4, currently unused
                      (     hardware.asm):00055         
     0004             (     hardware.asm):00056         ButtonSkip      EQU     ButtonS3        ; skip button
                      (     hardware.asm):00057         
     0003             (     hardware.asm):00058         ButtonNoWait    EQU     ButtonNext+ButtonPause  ; press these at startup to skip waits
                      (     hardware.asm):00059         
     FF44             (     hardware.asm):00060         StatusReg       EQU     HWBase+4        ; Status register
                      (     hardware.asm):00061         
                      (     hardware.asm):00062         ; status register constants
     0080             (     hardware.asm):00063         StatusReady     EQU     %10000000       ; Set this in status register once init done.
     0040             (     hardware.asm):00064         StatusNMICount  EQU     %01000000       ; NMI trigger is counting
     0020             (     hardware.asm):00065         StatusFIRQCount EQU     %00100000       ; FIRQ trigger is counting
     0010             (     hardware.asm):00066         StatusDisable   EQU     %00010000       ; Disable mapping in of onboard RAM and ROM, 
     0008             (     hardware.asm):00067         StatusP2Latch   EQU     %00001000       ; P2 access was latched
     0004             (     hardware.asm):00068         StatusCTSLatch  EQU     %00000100       ; CTS access was latched
     0002             (     hardware.asm):00069         StatusP2        EQU     %00000010       ; Live P2 level
     0001             (     hardware.asm):00070         StatusCTS       EQU     %00000001       ; Live CTS level
                      (     hardware.asm):00071         
                      (     hardware.asm):00072         ; also used as flags in WaitInt
     0040             (     hardware.asm):00073         NMITrigger      EQU     %01000000       ; Write to status register to trigger NMI
     0020             (     hardware.asm):00074         FIRQTrigger     EQU     %00100000       ; Write to status register to trigger FIRQ
                      (     hardware.asm):00075         
     0003             (     hardware.asm):00076         StatusCART      EQU     (StatusP2+StatusCTS) ; live CART line status
                      (     hardware.asm):00077         
     FF45             (     hardware.asm):00078         StatusReset     EQU     StatusReg+1     ; To reset P2 / CTS latches
                      (     hardware.asm):00079         
     FF50             (     hardware.asm):00080         TriggerP2       EQU     $FF50           ; Access here to trigger P2
     DEFF             (     hardware.asm):00081         TriggerCTS      EQU     $DEFF           ; Access here to trigger CTS
                      (     hardware.asm):00082         
     FF48             (     hardware.asm):00083         LCDCmdStat      EQU     HWBase+8        ; Character LCD Command/Status register
     FF49             (     hardware.asm):00084         LCDData         EQU     HWBase+9        ; Character LCD Data register 
                      (     hardware.asm):00085         
                      (     hardware.asm):00086         ;
                      (     hardware.asm):00087         ; Output value of LEDS to physical LEDS
                      (     hardware.asm):00088         ;
CD6C 7CFF40           (     hardware.asm):00089         LEDNext         inc     LEDS            ; Increment LED value
CD6F 39               (     hardware.asm):00090                         rts
                      (     hardware.asm):00091                         
CD70 B7FF40           (     hardware.asm):00092         LEDFromA        sta     LEDS            ; output them
CD73 39               (     hardware.asm):00093                         rts
                      (     hardware.asm):00094         
                      (     hardware.asm):00095         ; 
                      (     hardware.asm):00096         ; Get value of DIPSw and mask
                      (     hardware.asm):00097         ;
                      (     hardware.asm):00098         ; Entry:        b=mask, exit b=DIPSw and mask
CD74 3404             (     hardware.asm):00099         DIPMask         pshs    b               ; save mask
                      (     hardware.asm):00100                         
                      (     hardware.asm):00101                         ifndef Test
                      (     hardware.asm):00102                         ldb     DIPSw           ; get switches
                      (     hardware.asm):00103                         else
CD76 F6C002           (     hardware.asm):00104                         ldb     TestDIP         ; located at $c002, defined in DIPTest at top
                      (     hardware.asm):00105                                                 ; of this file.
                      (     hardware.asm):00106                         endc
                      (     hardware.asm):00107                         
CD79 E4E0             (     hardware.asm):00108                         andb    ,s+             ; mask them
CD7B 39               (     hardware.asm):00109                         rts
                      (     hardware.asm):00110         ;
                      (     hardware.asm):00111         ; Check to see if machine is same as supplied in b
                      (     hardware.asm):00112         ;
CD7C 3404             (     hardware.asm):00113         CheckMachine    pshs    b               ; save a
CD7E F6FF42           (     hardware.asm):00114                         ldb     DIPSw           ; get DIPS
CD81 C40F             (     hardware.asm):00115                         andb    #DIPSMask       ; Mask out all but machine
CD83 E1E4             (     hardware.asm):00116                         cmpb    ,s              ; same as supplied mask, set flags
CD85 3584             (     hardware.asm):00117                         puls    b,pc            ; recover machine, flags unaffected
                      (     hardware.asm):00118                         
                      (     hardware.asm):00119         
                      (     hardware.asm):00120         ;
                      (     hardware.asm):00121         ; Initialize PIAs
                      (     hardware.asm):00122         ;
                      (     hardware.asm):00123         
CD87                  (     hardware.asm):00124         SetupPIAs
CD87 C608             (     hardware.asm):00125                 ldb     #DIPDgnCoCo             ; is it a dragon or CoCo?
CD89 8DE9             (     hardware.asm):00126                 bsr     DIPMask                 ; go claculate
CD8B 1026006A         (     hardware.asm):00127                 lbne    DragonPIAs              ; Do dragon init
                      (     hardware.asm):00128         
CD8F                  (     hardware.asm):00129         CoCoPIAs
CD8F C601             (     hardware.asm):00130                 ldb     #DIPCoCo3               ; is this a CoCo3?
CD91 8DE1             (     hardware.asm):00131                 bsr     DIPMask                 ; go claculate
CD93 2705             (     hardware.asm):00132                 beq     CoCo12PIA               ; no just carry on with CoCo 1,2 
                      (     hardware.asm):00133                 
CD95 0303             (     hardware.asm):00134                 com     IsCoCo3                 ; flag it's a CoCo3 to other tests
CD97 1600AF           (     hardware.asm):00135                 lbra    InitCoCo3               ; yes init coco3
                      (     hardware.asm):00136                 
CD9A                  (     hardware.asm):00137         CoCo12PIA
CD9A 8EFF20           (     hardware.asm):00138                 ldx     #PIA1DA                 ; point x to pia1 
CD9D 6F88E1           (     hardware.asm):00139                 clr     -$1F,x                  ; clear pia0 control register a 
CDA0 6F88E3           (     hardware.asm):00140                 clr     -$1D,x                  ; clear pia0 control register b 
CDA3 6F88E0           (     hardware.asm):00141                 clr     -$20,x                  ; set pia0 side a to input 
CDA6 CCFF34           (     hardware.asm):00142                 ldd     #$ff34           
CDA9 A788E2           (     hardware.asm):00143                 sta     -$1E,x                  ; set pia0 side b to output 
CDAC E788E1           (     hardware.asm):00144                 stb     -$1F,x                  ; enable pia0 peripheral registers, disable pia0 
CDAF E788E3           (     hardware.asm):00145                 stb     -$1D,x                  ; mpu interrupts, set ca2, ca1 to outputs 
                      (     hardware.asm):00146         
CDB2 6F01             (     hardware.asm):00147                 clr     1,x                     ; clear control register a on pia1 
CDB4 6F03             (     hardware.asm):00148                 clr     3,x                     ; clear control register b on pia1 
CDB6 4A               (     hardware.asm):00149                 deca                            ; a reg now has $fe 
CDB7 A784             (     hardware.asm):00150                 sta     ,x                      ; bits 1-7 are outputs, bit 0 is input on pia1 side a 
CDB9 86F8             (     hardware.asm):00151                 lda     #$f8 
CDBB A702             (     hardware.asm):00152                 sta     2,x                     ; bits 0-2 are inputs, bits 3-7 are outputs on b side 
CDBD E701             (     hardware.asm):00153                 stb     1,x                     ; enable peripheral registers, disable pia1 mpu 
CDBF E703             (     hardware.asm):00154                 stb     3,x                     ; interrupts and set ca2, cb2 as outputs 
CDC1 6F02             (     hardware.asm):00155                 clr     2,x                     ; set 6847 mode to alpha-numeric 
CDC3 C602             (     hardware.asm):00156                 ldb     #$02
CDC5 E784             (     hardware.asm):00157                 stb     ,x                      ; make rs232 output marking 
                      (     hardware.asm):00158         
CDC7 CEFFC0           (     hardware.asm):00159                 ldu     #SAMCV0                 ; zero sam bits for vdg mode & display offset
CDCA C610             (     hardware.asm):00160                 ldb     #$10
CDCC A7C1             (     hardware.asm):00161         @sam    sta     ,u++
CDCE 5A               (     hardware.asm):00162                 decb
CDCF 26FB             (     hardware.asm):00163                 bne     @sam
                      (     hardware.asm):00164         
CDD1 F7FFC9           (     hardware.asm):00165                 stb     SAMSF1                  ; Set display offset to $0400
                      (     hardware.asm):00166         
                      (     hardware.asm):00167         ; Detect RAM
CDD4 0D03             (     hardware.asm):00168                 tst     IsCoCo3                 ; is this a CoCo3?
CDD6 2616             (     hardware.asm):00169                 bne     Ram64K                  ; flag as 64K rams.
                      (     hardware.asm):00170                 
CDD8 C604             (     hardware.asm):00171                 ldb     #$04                    ; mask for RAMZ input
CDDA A788E2           (     hardware.asm):00172                 sta     -$1E,x                  ; a contains $F8, this sets output bit high
CDDD E502             (     hardware.asm):00173                 bitb    2,x                     ; test RAM jumper input
CDDF 2713             (     hardware.asm):00174                 beq     Ram4K                   ; if low, we have 4K rams
                      (     hardware.asm):00175         
CDE1 6F88E2           (     hardware.asm):00176                 clr     -$1E,x                  ; set ram strobe low
CDE4 E502             (     hardware.asm):00177                 bitb    2,x                     ; test RAM jumper input
CDE6 2706             (     hardware.asm):00178                 beq     Ram64K                  ; followed strobe low so 64K
                      (     hardware.asm):00179                 
                      (     hardware.asm):00180         ;       stb     SAMSM0                  ; program SAM for 1 or 2 banks of 16
CDE8 C601             (     hardware.asm):00181                 ldb     #DRAM16                 ; 16K rams
CDEA D700             (     hardware.asm):00182                 stb     RAMFlag
CDEC 2008             (     hardware.asm):00183                 bra     LSamSetDRAM             ; Go program SAM
                      (     hardware.asm):00184                 
CDEE                  (     hardware.asm):00185         Ram64K  
                      (     hardware.asm):00186         ;       stb     SAMSM1                  ; program SAM for 1 of 64K
CDEE C602             (     hardware.asm):00187                 ldb     #DRAM64                 ; 16K rams
CDF0 D700             (     hardware.asm):00188                 stb     RAMFlag
CDF2 2002             (     hardware.asm):00189                 bra     LSamSetDRAM             ; Go program SAM
                      (     hardware.asm):00190                 
                      (     hardware.asm):00191         ; settings are already correct for 4K RAMS.     
CDF4 0F00             (     hardware.asm):00192         Ram4K   clr     RAMFlag                 ; flag 4K RAMS
CDF6                  (     hardware.asm):00193         LSamSetDRAM     
CDF6 1600BB           (     hardware.asm):00194                 lbra    SamSetDRAM              ; Go program SAM
                      (     hardware.asm):00195                 
                      (     hardware.asm):00196         ;
                      (     hardware.asm):00197         ; Setup PIAs oon the Dragon.
                      (     hardware.asm):00198         ;       
                      (     hardware.asm):00199                 
CDF9                  (     hardware.asm):00200         DragonPIAs
CDF9 CC0034           (     hardware.asm):00201                 LDD     #$0034                  ; Setup PIA0
CDFC 8EFF00           (     hardware.asm):00202                 LDX     #PIA0DA
CDFF A701             (     hardware.asm):00203                 STA     1,X                     ; zero ctrl regs, selects DDRs
CE01 A703             (     hardware.asm):00204                 STA     3,X
CE03 A784             (     hardware.asm):00205                 STA     ,X                      ; A=$00, $FF00 all inputs
CE05 43               (     hardware.asm):00206                 COMA                            
CE06 A702             (     hardware.asm):00207                 STA     2,X                     ; A=$FF, $FF02 all output
CE08 E701             (     hardware.asm):00208                 STB     1,X                     ; $34, CB=output, IRQ disabled, Data reg selected
CE0A E703             (     hardware.asm):00209                 STB     3,X
                      (     hardware.asm):00210         
CE0C 8EFF20           (     hardware.asm):00211                 LDX     #PIA1DA                 ; Setup PIA1
CE0F 6F01             (     hardware.asm):00212                 CLR     1,X                     ; zero ctrl regs, selects DDRs
CE11 6F03             (     hardware.asm):00213                 CLR     3,X
CE13 4A               (     hardware.asm):00214                 DECA                             
CE14 A784             (     hardware.asm):00215                 STA     ,X                      ; A=$FE, B7..1=output, B0=input
CE16 86F8             (     hardware.asm):00216                 LDA     #$F8                    
CE18 A702             (     hardware.asm):00217                 STA     2,X                     ; A=$F8, B7..3=output, B2..0=input
CE1A E701             (     hardware.asm):00218                 STB     1,X                     ; $34, CB=output, IRQ disabled, Data reg selected
CE1C E703             (     hardware.asm):00219                 STB     3,X                     
CE1E 6F84             (     hardware.asm):00220                 CLR     ,X                      ; Zero outputs of PIA1DA
CE20 6F02             (     hardware.asm):00221                 CLR     2,X                     ; Zero outputs of $ff22
                      (     hardware.asm):00222         
CE22 A602             (     hardware.asm):00223                 LDA     2,X                     ; Read memory config bit from PIA, $ff22
                      (     hardware.asm):00224         
CE24 B6FF22           (     hardware.asm):00225                 lda     PIA1DB                  ; Read memory config bit from PIA, $ff22
                      (     hardware.asm):00226                 
CE27 8EFFC0           (     hardware.asm):00227                 ldx     #SAMCV0                 ; zero sam bits for vdg mode & display offset
CE2A C610             (     hardware.asm):00228                 ldb     #$10
CE2C A781             (     hardware.asm):00229         @sam    sta     ,x++
CE2E 5A               (     hardware.asm):00230                 decb
CE2F 26FB             (     hardware.asm):00231                 bne     @sam
                      (     hardware.asm):00232         
CE31 F7FFC9           (     hardware.asm):00233                 stb     SAMSF1                  ; Set display offset to $0400
                      (     hardware.asm):00234         
CE34 C601             (     hardware.asm):00235                 ldb     #DIPD64                 ; are wa a dragon 64?
CE36 17FF3B           (     hardware.asm):00236                 lbsr    DIPMask                 ; read dips
CE39 260A             (     hardware.asm):00237                 bne     RAM64                   ; yes set it
                      (     hardware.asm):00238                 
CE3B 8504             (     hardware.asm):00239                 bita    #$04                    ; Dragon 32, check if 2x16 or 1x64
CE3D 2706             (     hardware.asm):00240                 beq     RAM64                   ; 1x64
                      (     hardware.asm):00241         
CE3F                  (     hardware.asm):00242         RAM16   
                      (     hardware.asm):00243         ;       stb     SAMSM0                  ; 1 or 2 banks of 16K   
CE3F C601             (     hardware.asm):00244                 ldb     #DRAM16                 ; Setup RAM flag
                      (     hardware.asm):00245         
CE41 D700             (     hardware.asm):00246         SetRAM  stb     RAMFlag         
CE43 206F             (     hardware.asm):00247                 bra     SamSetDRAM              ; Go program SAM        
                      (     hardware.asm):00248         
CE45                  (     hardware.asm):00249         RAM64   
                      (     hardware.asm):00250         ;       STB     SAMSM1
CE45 C602             (     hardware.asm):00251                 ldb     #DRAM64                 ; Setup RAM flag
CE47 20F8             (     hardware.asm):00252                 bra     SetRAM                  ; go set it
                      (     hardware.asm):00253         
                      (     hardware.asm):00254         ; Special initiaalization for CoCo3.
CE49                  (     hardware.asm):00255         InitCoCo3
CE49 8680             (     hardware.asm):00256                 lda     #Init1CoCo              ; init in CoCo 1/2 mode
CE4B B7FF90           (     hardware.asm):00257                 sta     InitReg1
CE4E 7FFFDE           (     hardware.asm):00258                 clr     SAMCTY                  ; ROM / RAM mode
                      (     hardware.asm):00259         
                      (     hardware.asm):00260                 if 0
                      (     hardware.asm):00261         ; setup palette registers
                      (     hardware.asm):00262                 ldx     #PaletteBase            ; point at palette registers
                      (     hardware.asm):00263                 lda     #$12                    ; base colour.....
                      (     hardware.asm):00264                 ldb     #$10                    ; 16 registers
                      (     hardware.asm):00265         
CE51                  (     hardware.asm):00266         Pal1    sta     ,x+                     ; save colour
                      (     hardware.asm):00267                 decb                            ; decrement count
                      (     hardware.asm):00268                 bne     Pal1
                      (     hardware.asm):00269                 endc 
                      (     hardware.asm):00270         
                      (     hardware.asm):00271         ; init MMU registers
CE51 308D0037         (     hardware.asm):00272                 leax    MMUInitData,pcr         ; point at MMU initialization data
CE55 108EFFA0         (     hardware.asm):00273                 ldy     #MMUBase                ; point at base
CE59 C610             (     hardware.asm):00274                 ldb     #MMUInitSize            ; 16 MMU registers
CE5B 8D27             (     hardware.asm):00275                 bsr     InitRegs                ; copy it
                      (     hardware.asm):00276         
CE5D 86C0             (     hardware.asm):00277                 lda     #DefaultInit1           ; default Init mode
CE5F B7FF90           (     hardware.asm):00278                 sta     InitReg1
                      (     hardware.asm):00279         
CE62 17FF35           (     hardware.asm):00280                 lbsr    CoCo12PIA               ; Do CoCo 1/2 PIA / SAM init.
                      (     hardware.asm):00281                 
CE65 7FFF92           (     hardware.asm):00282                 clr     IRQEnableReg            ; disable GIME IRQ interrrupts
CE68 7FFF93           (     hardware.asm):00283                 clr     FIRQEnableReg           ; disable GIME FIRQ interrrupts
                      (     hardware.asm):00284         
CE6B 308D002D         (     hardware.asm):00285                 leax    VidInitData,pcr         ; point at init data
CE6F 108EFF98         (     hardware.asm):00286                 ldy     #VideoReg               ; point at video registers
CE73 C608             (     hardware.asm):00287                 ldb     #VidInitSize            ; number of bytes
CE75 8D0D             (     hardware.asm):00288                 bsr     InitRegs                ; copy it
                      (     hardware.asm):00289         
CE77 308D0029         (     hardware.asm):00290                 leax    PaletteInitData,pcr     ; point at palette init data
CE7B 108EFFB0         (     hardware.asm):00291                 ldy     #PaletteBase            ; point at palette registers
CE7F C610             (     hardware.asm):00292                 ldb     #PaletteInitSize        ; byte count
CE81 8D01             (     hardware.asm):00293                 bsr     InitRegs                ; copy it
                      (     hardware.asm):00294                 
CE83 39               (     hardware.asm):00295                 rts
                      (     hardware.asm):00296         
CE84                  (     hardware.asm):00297         InitRegs
CE84 A680             (     hardware.asm):00298                 lda     ,x+                     ; get a byte
CE86 A7A0             (     hardware.asm):00299                 sta     ,y+                     ; put it in reg
CE88 5A               (     hardware.asm):00300                 decb                            ; decrement count
CE89 26F9             (     hardware.asm):00301                 bne     InitRegs
CE8B 39               (     hardware.asm):00302                 rts
                      (     hardware.asm):00303         
CE8C                  (     hardware.asm):00304         MMUInitData
CE8C 38393A3B         (     hardware.asm):00305                 FCB     Block70,Block71,Block72,Block73         ; task register 0
CE90 3C3D3E3F         (     hardware.asm):00306                 FCB     Block74,Block75,Block76,Block77
                      (     hardware.asm):00307                 
CE94 30313233         (     hardware.asm):00308                 FCB     Block60,Block61,Block62,Block63         ; task register 1
CE98 34353637         (     hardware.asm):00309                 FCB     Block64,Block65,Block66,Block67
     0010             (     hardware.asm):00310         MMUInitSize     EQU     (*-MMUInitData)
                      (     hardware.asm):00311         
                      (     hardware.asm):00312         ; Video reg init data
CE9C                  (     hardware.asm):00313         VidInitData
                      (     hardware.asm):00314         ;       FCB     $06,$08,$00,$00         ; $FF98 (VideoReg), $FF99 (VideoResReg)
                      (     hardware.asm):00315         ;                                       ; $FF9A (BorderReg), $FF9B (unused) 
                      (     hardware.asm):00316         ;       FCB     $0F                     ; $FF9C (VScrollReg)
                      (     hardware.asm):00317         ;       FCB     $E0,$80                 ; $FF9D (VertOddsetMSB), $FF9E (VertOffsetLSB)
                      (     hardware.asm):00318         ;       FCB     $00                     ; $FF9F (HOffsetReg)
                      (     hardware.asm):00319         ; Old values
CE9C 00000000         (     hardware.asm):00320                 FCB     $00,$00,$00,$00         ; $FF98 (VideoReg), $FF99 (VideoResReg)
                      (     hardware.asm):00321                                                 ; $FF9A (BorderReg), $FF9B (unused) 
CEA0 0F               (     hardware.asm):00322                 FCB     $0F                     ; $FF9C (VScrollReg)
CEA1 E000             (     hardware.asm):00323                 FCB     $E0,$00                 ; $FF9D (VertOddsetMSB), $FF9E (VertOffsetLSB)
CEA3 00               (     hardware.asm):00324                 FCB     $00                     ; $FF9F (HOffsetReg)
     0008             (     hardware.asm):00325         VidInitSize     EQU     (*-VidInitData) 
                      (     hardware.asm):00326         
                      (     hardware.asm):00327         ; Old values
                      (     hardware.asm):00328         ;       FCB     $00,$00,$00,$00         ; $FF98 (VideoReg), $FF99 (VideoResReg)
                      (     hardware.asm):00329         ;                                       ; $FF9A (BorderReg), $FF9B (unused) 
                      (     hardware.asm):00330         ;       FCB     $0F                     ; $FF9C (VScrollReg)
                      (     hardware.asm):00331         ;       FCB     $E0,$00                 ; $FF9D (VertOddsetMSB), $FF9E (VertOffsetLSB)
                      (     hardware.asm):00332         ;       FCB     $00                     ; $FF9F (HOffsetReg)
                      (     hardware.asm):00333         
CEA4                  (     hardware.asm):00334         PaletteInitData
CEA4 12240B07         (     hardware.asm):00335                 FCB     18,36,11,7
CEA8 3F1F0926         (     hardware.asm):00336                 FCB     63,31,9,38
CEAC 0012003F         (     hardware.asm):00337                 FCB     0,18,0,63
CEB0 00120026         (     hardware.asm):00338                 FCB     0,18,0,38
     0010             (     hardware.asm):00339         PaletteInitSize EQU     (*-PaletteInitData)     
                      (     hardware.asm):00340         ;
                      (     hardware.asm):00341         ; SamSetDRAM, program the SAM for the dram type.
                      (     hardware.asm):00342         ; Checks to see if the direct RAM set switch is set, if so uses it's
                      (     hardware.asm):00343         ; value (and updates the RAMFlag as well). Otherwise it uses the 
                      (     hardware.asm):00344         ; RAMFlag value detected from the hardware. 
                      (     hardware.asm):00345         ;
                      (     hardware.asm):00346                 
CEB4                  (     hardware.asm):00347         SamSetDRAM
CEB4 C604             (     hardware.asm):00348                 ldb     #DIPSetRAM              ; check the jumper
CEB6 17FEBB           (     hardware.asm):00349                 lbsr    DIPMask                 ; read dips
CEB9 2707             (     hardware.asm):00350                 beq     SamSetFromHW            ; not set use detected value
                      (     hardware.asm):00351         
CEBB C603             (     hardware.asm):00352                 ldb     #DIPDRAMMask            ; extract DRAM type bits
CEBD 17FEB4           (     hardware.asm):00353                 lbsr    DIPMask                 ; read dips     
CEC0 D700             (     hardware.asm):00354                 stb     RAMFlag                 ; set RAMFlag
                      (     hardware.asm):00355         
CEC2                  (     hardware.asm):00356         SamSetFromHW
CEC2 9600             (     hardware.asm):00357                 lda     RAMFlag                 ; read RAM type
CEC4 8EFFDA           (     hardware.asm):00358                 ldx     #SAMCM0                 ; point at memory type flags
CEC7 C602             (     hardware.asm):00359                 ldb     #2                      ; 2 bits
                      (     hardware.asm):00360         
CEC9                  (     hardware.asm):00361         SamBitTest      
CEC9 44               (     hardware.asm):00362                 lsra                            ; shift bottom bit into carry
CECA 2402             (     hardware.asm):00363                 bcc     SamBitClear             ; carry clear no need to set anything 
CECC A701             (     hardware.asm):00364                 sta     1,x                     ; set the bit
                      (     hardware.asm):00365         
CECE                  (     hardware.asm):00366         SamBitClear
CECE 3002             (     hardware.asm):00367                 leax    2,x                     ; point at next bit
CED0 5A               (     hardware.asm):00368                 decb                            ; decrement count
CED1 26F6             (     hardware.asm):00369                 bne     SamBitTest              ; loop if more to do
                      (     hardware.asm):00370                 
CED3 39               (     hardware.asm):00371                 rts     
                      (     hardware.asm):00372         ; 
                      (     hardware.asm):00373         ; Clear a block of RAM
                      (     hardware.asm):00374         ;
                      (     hardware.asm):00375         ; Entry:
                      (     hardware.asm):00376         ;       a       = value to clear to (if entered at RamClear)
                      (     hardware.asm):00377         ;       x       = base of area to clear
                      (     hardware.asm):00378         ;       y       = end of area to clear
                      (     hardware.asm):00379         ;
                      (     hardware.asm):00380                 
CED4 4F               (     hardware.asm):00381         RamZero         clra    
CED5 3420             (     hardware.asm):00382         RamClear        pshs    y               ; save terminating value on stack
CED7 A780             (     hardware.asm):00383         RamClearLoop    sta     ,x+             ; clear a byte
CED9 ACE4             (     hardware.asm):00384                         cmpx    ,s              ; reached end yet?
CEDB 26FA             (     hardware.asm):00385                         bne     RamClearLoop    ; nope continue
CEDD 35A0             (     hardware.asm):00386                         puls    y,pc            ; restore and return
                      (     hardware.asm):00387                 
                      (     hardware.asm):00388         ;
                      (     hardware.asm):00389         ; Set SAM's screen address.
                      (     hardware.asm):00390         ;
                      (     hardware.asm):00391         ; Entry:
                      (     hardware.asm):00392         ;       X       = Screen address
                      (     hardware.asm):00393         
CEDF 3416             (     hardware.asm):00394         SetSAMScr       pshs    x,d             ; save regs
CEE1 1F10             (     hardware.asm):00395                         tfr     x,d             ; get address into d
                      (     hardware.asm):00396                         
CEE3 9F1B             (     hardware.asm):00397                         stx     ScreenBase      ; save screen base
CEE5 30890200         (     hardware.asm):00398                         leax    TextScreenLen,x ; Work out address of end of screen
CEE9 9F1D             (     hardware.asm):00399                         stx     ScreenEnd       ; save screen end
                      (     hardware.asm):00400                         
CEEB C607             (     hardware.asm):00401                         ldb     #7              ; 7 sam address bits
CEED 8EFFC6           (     hardware.asm):00402                         LDX     #SAMCF0         ; point at SAM offset bits      
CEF0 46               (     hardware.asm):00403                         rora                    ; onl7 7 bits to set
                      (     hardware.asm):00404         
CEF1 46               (     hardware.asm):00405         SetSamBits      rora                    ; get bit into carry
CEF2 2504             (     hardware.asm):00406                         bcs     SetSamBit               
CEF4 A784             (     hardware.asm):00407                         sta     ,x              ; clear sam bit
CEF6 2002             (     hardware.asm):00408                         bra     NextSamBit      ; do next
                      (     hardware.asm):00409                         
CEF8 A701             (     hardware.asm):00410         SetSamBit       sta     1,x
CEFA 3002             (     hardware.asm):00411         NextSamBit      leax    2,x             ; point to next bitset
CEFC 5A               (     hardware.asm):00412                         decb                    ; decrement count
CEFD 26F2             (     hardware.asm):00413                         bne     SetSamBits      ; more, keep going
                      (     hardware.asm):00414                         
CEFF 3596             (     hardware.asm):00415                         puls    x,d,pc          ; restore and return
                      (     hardware.asm):00416         
                      (     hardware.asm):00417         ;
                      (     hardware.asm):00418         ; GetPIA, get a PIA's registers
                      (     hardware.asm):00419         ;
                      (     hardware.asm):00420         ; Entry:
                      (     hardware.asm):00421         ;       X       = PIA base address.
                      (     hardware.asm):00422         ;       U       = 6 byte buffer for PIA regs
                      (     hardware.asm):00423         ;
                      (     hardware.asm):00424         ; Exit:
                      (     hardware.asm):00425         ;       6 bytes in area pointed to by U : DA, CRA, DDRA, DB, CRB, DDRB
                      (     hardware.asm):00426         ;
                      (     hardware.asm):00427         
CF01 3440             (     hardware.asm):00428         GetPIA          pshs    u               ; save data pointer     
                      (     hardware.asm):00429                         
CF03 EC84             (     hardware.asm):00430                         ldd     ,x              ; get data + control register
CF05 EDC1             (     hardware.asm):00431                         std     ,u++            ; stack them
                      (     hardware.asm):00432                         
CF07 C4FB             (     hardware.asm):00433                         andb    #~CRDDRDATA     ; select DDR register
CF09 E701             (     hardware.asm):00434                         stb     1,x             
CF0B A684             (     hardware.asm):00435                         lda     ,x              ; get DDR value
CF0D A7C0             (     hardware.asm):00436                         sta     ,u+             ; save DDR value
CF0F CA04             (     hardware.asm):00437                         orb     #CRDDRDATA      ; select data register
CF11 E701             (     hardware.asm):00438                         stb     1,x
                      (     hardware.asm):00439                         
CF13 3002             (     hardware.asm):00440                         leax    2,x             ; move to side B
                      (     hardware.asm):00441                         
CF15 EC84             (     hardware.asm):00442                         ldd     ,x              ; get data + control register
CF17 EDC1             (     hardware.asm):00443                         std     ,u++            ; stack them
                      (     hardware.asm):00444                                 
CF19 C4FB             (     hardware.asm):00445                         andb    #~CRDDRDATA     ; select DDR register
CF1B E701             (     hardware.asm):00446                         stb     1,x             
CF1D A684             (     hardware.asm):00447                         lda     ,x              ; get DDR value
CF1F A7C0             (     hardware.asm):00448                         sta     ,u+             ; save DDR value
CF21 CA04             (     hardware.asm):00449                         orb     #CRDDRDATA      ; select data register
CF23 E701             (     hardware.asm):00450                         stb     1,x
                      (     hardware.asm):00451                         
CF25 35C0             (     hardware.asm):00452                         puls    u,pc            ; restore and return
                      (     hardware.asm):00453                         
                      (     hardware.asm):00454         ;
                      (     hardware.asm):00455         ; Check pause, check to see if pause button is pressed, 
                      (     hardware.asm):00456         ;       if so wait for it's release and invert pause flag.
                      (     hardware.asm):00457         ; 
                      (     hardware.asm):00458         
CF27 3402             (     hardware.asm):00459         CheckPause      pshs    a               ; save a
CF29 8602             (     hardware.asm):00460                         lda     #ButtonPause    ; pause button
CF2B B4FF43           (     hardware.asm):00461                         anda    Buttons         ; is button pressed?
CF2E 2711             (     hardware.asm):00462                         beq     NoPause         ; nope, just exit
                      (     hardware.asm):00463         
CF30 8602             (     hardware.asm):00464         WaitPauseUp     lda     #ButtonPause    ; pause button
CF32 B4FF43           (     hardware.asm):00465                         anda    Buttons         ; is button pressed?
CF35 26F9             (     hardware.asm):00466                         bne     WaitPauseUp     ; wait for release
                      (     hardware.asm):00467                         
CF37 0380             (     hardware.asm):00468                         com     Paused          ; invert paused flag
CF39 8602             (     hardware.asm):00469                         lda     #LED2Pause      ; turn on LED
CF3B B8FF41           (     hardware.asm):00470                         eora    LEDS2
CF3E B7FF41           (     hardware.asm):00471                         sta     LEDS2
                      (     hardware.asm):00472                         
CF41 3582             (     hardware.asm):00473         NoPause         puls    a,pc            ; restore and return    
                      (     hardware.asm):00474                                 
                      (     hardware.asm):00475         ;
                      (     hardware.asm):00476         ; WaitNext. wait for next button to be pressed and released.
                      (     hardware.asm):00477         ;
CF43 3402             (     hardware.asm):00478         WaitNext        pshs    a               ; save a
CF45 8601             (     hardware.asm):00479                         lda     #ButtonNext     ; button to wait for
CF47 8D02             (     hardware.asm):00480                         bsr     ButtonWait      ; go wait for press and release
CF49 3582             (     hardware.asm):00481                         puls    a,pc            ; restore and return
                      (     hardware.asm):00482                         
                      (     hardware.asm):00483         ;
                      (     hardware.asm):00484         ; ButtonWait, wait for the button in a to be pressed and released.
                      (     hardware.asm):00485         ;               
                      (     hardware.asm):00486         
CF4B 3402             (     hardware.asm):00487         ButtonWait      pshs    a               ; save on stack
CF4D A6E4             (     hardware.asm):00488         WaitDown        lda     ,s              ; Get button value from stack
CF4F B4FF43           (     hardware.asm):00489                         anda    Buttons         ; is button pressed?
CF52 A1E4             (     hardware.asm):00490                         cmpa    ,s              ; button pressed?
CF54 26F7             (     hardware.asm):00491                         bne     WaitDown        ; no, wait till it's down
                      (     hardware.asm):00492                         
CF56 A6E4             (     hardware.asm):00493         WaitUp          lda     ,s              ; Get button value from stack
CF58 B4FF43           (     hardware.asm):00494                         anda    Buttons         ; is button pressed?
CF5B 26F9             (     hardware.asm):00495                         bne     WaitUp          ; yes, wait till it's rleased
                      (     hardware.asm):00496                                         
CF5D 3582             (     hardware.asm):00497                         puls    a,pc            ; restore and return
                      (     hardware.asm):00498         
                      (     hardware.asm):00499         ;
                      (     hardware.asm):00500         ; Button pressed, is a button pressed.
                      (     hardware.asm):00501         ;
CF5F 3402             (     hardware.asm):00502         ButtonPressed   pshs    a               ; save button mask
CF61 B4FF43           (     hardware.asm):00503                         anda    Buttons         ; mask in any being pressed
CF64 A1E0             (     hardware.asm):00504                         cmpa    ,s+             ; was it the same as mask?
CF66 39               (     hardware.asm):00505                         rts
                      (     hardware.asm):00506                         
CF67 3402             (     hardware.asm):00507         QueryButton     pshs    a
CF69 B6FF43           (     hardware.asm):00508         QueryButtonL1   lda     Buttons         ; read buttons
CF6C 840F             (     hardware.asm):00509                         anda    #ButtonMask     ; mask out invalid bits
CF6E 27F9             (     hardware.asm):00510                         beq     QueryButtonL1   ; loop until button pressed
                      (     hardware.asm):00511         
CF70 A7E4             (     hardware.asm):00512                         sta     ,s              ; save button for caller
CF72 B6FF43           (     hardware.asm):00513         QueryButtonL2   lda     Buttons         ; read buttons
CF75 840F             (     hardware.asm):00514                         anda    #ButtonMask     ; mask out invalid bits
CF77 26F9             (     hardware.asm):00515                         bne     QueryButtonL2   ; loop until buttons released
CF79 3582             (     hardware.asm):00516                         puls    a,pc            ; return values
                      (     DiagCart.asm):00386                         use     lcd.asm         ; LCD output routines
                      (          lcd.asm):00001         ;
                      (          lcd.asm):00002         ; LCD driver for standard character Hitachi HD44780 based LCD modules.
                      (          lcd.asm):00003         ;
                      (          lcd.asm):00004         
                      (          lcd.asm):00005         ; Constants borrowed from AVR source
                      (          lcd.asm):00006         
                      (          lcd.asm):00007         
     0001             (          lcd.asm):00008         LCDCmdClear             equ     0x01    ; Clear screen
     0002             (          lcd.asm):00009         LCDCmdCursorHome        equ     0x02    ; Cursor home
                      (          lcd.asm):00010         
     0004             (          lcd.asm):00011         LCDCmdEntryModeSet      equ     0x04    ; Set entry mode, 
     0002             (          lcd.asm):00012         LCDCmdEntryI            equ     0x02    ; Combine with EntryModeSet, 1 cursor moves right, 0 cursor moves left
     0001             (          lcd.asm):00013         LCDCmdEntryS            equ     0x01    ; Combine with EntryModeSet, 1=shift display as I, 0 don't shift display
                      (          lcd.asm):00014         
     0006             (          lcd.asm):00015         LCDCmdEntryModeSetI     equ     LCDCmdEntryModeSet+LCDCmdEntryI
     0007             (          lcd.asm):00016         LCDCmdEntryModeSetIS    equ     LCDCmdEntryModeSetI+LCDCmdEntryS
     0005             (          lcd.asm):00017         LCDCmdEntryModeSetS     equ     LCDCmdEntryModeSet+LCDCmdEntryS
                      (          lcd.asm):00018         
     0008             (          lcd.asm):00019         LCDCmdDisplay           equ     0x08    ; Turn display off
     0004             (          lcd.asm):00020         LCDCmdDispDisp          equ     0x04    ; Display on 1 / off 0
     0002             (          lcd.asm):00021         LCDCmdDispCurs          equ     0x02    ; Cursor on 1 / off 0
     0001             (          lcd.asm):00022         LCDCmdDispBlink         equ     0x01    ; Blink on 1 / off 0
                      (          lcd.asm):00023         
     000C             (          lcd.asm):00024         LCDCmdDisplayOn         equ     LCDCmdDisplay+LCDCmdDispDisp            ; Display on
     000E             (          lcd.asm):00025         LCDCmdDisplayOnCurs     equ     LCDCmdDisplayOn+LCDCmdDispCurs          ; Display on with cursor
     000F             (          lcd.asm):00026         LCDCmdDisplayOnCursBnk  equ     LCDCmdDisplayOnCurs+LCDCmdDispBlink     ; Display on with blinking cursor
                      (          lcd.asm):00027         
     0010             (          lcd.asm):00028         LCDCmdShiftCursLeft     equ     0x10    ; Shift cursor left
     0014             (          lcd.asm):00029         LCDCmdShiftCursRight    equ     0x14    ; Shift cursor right
     0018             (          lcd.asm):00030         LCDCmdShiftDispLeft     equ     0x18    ; Shift display left
     001C             (          lcd.asm):00031         LCDCmdShiftDispRight    equ     0x1C    ; Shift display right
                      (          lcd.asm):00032         
                      (          lcd.asm):00033         ; The set data length and no lines must be ored together before sending
                      (          lcd.asm):00034         
     0020             (          lcd.asm):00035         LCDCmdSetDataLen4       equ     0x20    ; Set data length 4 bit
     0030             (          lcd.asm):00036         LCDCmdSetDataLen8       equ     0x30    ; Set data length 8 bit
     0000             (          lcd.asm):00037         LCDCmdLines1            equ     0x00    ; Set 1 line mode
     0008             (          lcd.asm):00038         LCDCmdLines2            equ     0x08    ; Set 2 line mode
                      (          lcd.asm):00039         
                      (          lcd.asm):00040         ; CG address functions must be ored with 6 bit address to set
                      (          lcd.asm):00041         ; DD address functions must be ored with 7 bit address to set
                      (          lcd.asm):00042         
     0040             (          lcd.asm):00043         LCDCmdCGRamAddrSet      equ     0x40    ; Set Character generator address
     0080             (          lcd.asm):00044         LCDCmdDDRamAddrSet      equ     0x80    ; Set Data ram address
                      (          lcd.asm):00045         
     0080             (          lcd.asm):00046         LCDBusyFlagMask         equ     0x80    ; Mask for busy flag
                      (          lcd.asm):00047         
     0018             (          lcd.asm):00048         LCDLineLen              equ     24      ; LCD line length
     0002             (          lcd.asm):00049         LCDNoLines              equ     2       ; LCD no of lines
                      (          lcd.asm):00050         
CF7B 0F29             (          lcd.asm):00051         LCDInit         clr     LCDFlag         ; Flag LCD not in use
                      (          lcd.asm):00052         
CF7D 8E0000           (          lcd.asm):00053                         ldx     #0              ; init counter
CF80 B6FF48           (          lcd.asm):00054         LCDInitLoop     lda     LCDCmdStat      ; get status flag
CF83 2A1D             (          lcd.asm):00055                         bpl     LNotBusy        ; if bit 7 is clear it's not busy
                      (          lcd.asm):00056                         
CF85 3001             (          lcd.asm):00057                         leax    1,x             ; increment wait counter
CF87 26F7             (          lcd.asm):00058                         bne     LCDInitLoop     ; keep looping if not 0
                      (          lcd.asm):00059                         
CF89 39               (          lcd.asm):00060                         rts                     ; return leaving LCD flagged not in use
                      (          lcd.asm):00061         
                      (          lcd.asm):00062         ; Try to INIT the LCD by software
CF8A 0F29             (          lcd.asm):00063         LCDInit2        clr     LCDFlag         ; Flag LCD not in use
CF8C C630             (          lcd.asm):00064                         ldb     #LCDCmdSetDataLen8      ; function set
                      (          lcd.asm):00065         
CF8E 8603             (          lcd.asm):00066                         lda     #3              ; send it 3 times
                      (          lcd.asm):00067                         
CF90 8D08             (          lcd.asm):00068         LCDInit2Loop    bsr     LCDDelay        ; Delay a little after poweron
CF92 F7FF48           (          lcd.asm):00069                         stb     LCDCmdStat      ; send the command
                      (          lcd.asm):00070                         
CF95 4A               (          lcd.asm):00071                         deca                    ; decrement count
CF96 26F8             (          lcd.asm):00072                         bne     LCDInit2Loop    ; loop again if not zero
                      (          lcd.asm):00073         
CF98 20E1             (          lcd.asm):00074                         bra     LCDInit         ; jump to normal init loop
                      (          lcd.asm):00075                         
CF9A 8E1000           (          lcd.asm):00076         LCDDelay        ldx     #$1000          ; delat loop counter
CF9D 301F             (          lcd.asm):00077         LCDDelayLoop    leax    -1,x            ; decrement counter
CF9F 26FC             (          lcd.asm):00078                         bne     LCDDelayLoop    ; loop until zero
CFA1 39               (          lcd.asm):00079                         rts
                      (          lcd.asm):00080                                         
CFA2 0A29             (          lcd.asm):00081         LNotBusy        dec     LCDFlag         ; mark LCD available
                      (          lcd.asm):00082         
CFA4 8602             (          lcd.asm):00083                         lda     #DevLCD         ; select LCD as output device
CFA6 9A7E             (          lcd.asm):00084                         ora     OutputFlag
CFA8 977E             (          lcd.asm):00085                         sta     OutputFlag
                      (          lcd.asm):00086                 
CFAA C638             (          lcd.asm):00087                         ldb     #LCDCmdSetDataLen8+LCDCmdLines2 ; 8 bit data 2 display lines
CFAC 8D0F             (          lcd.asm):00088                         bsr     LCDCommand
                      (          lcd.asm):00089         
CFAE C606             (          lcd.asm):00090                         ldb     #LCDCmdEntryModeSetI
CFB0 8D0B             (          lcd.asm):00091                         bsr     LCDCommand
                      (          lcd.asm):00092                         
CFB2 C60F             (          lcd.asm):00093                         ldb     #LCDCmdDisplayOnCursBnk ; turn display on
CFB4 8D07             (          lcd.asm):00094                         bsr     LCDCommand
                      (          lcd.asm):00095                         
CFB6 C610             (          lcd.asm):00096                         ldb     #LCDCmdShiftCursLeft
CFB8 8D03             (          lcd.asm):00097                         bsr     LCDCommand
                      (          lcd.asm):00098                         
CFBA 8D56             (          lcd.asm):00099                         bsr     LCDClrScr       ; clear the screen
                      (          lcd.asm):00100                         
CFBC 39               (          lcd.asm):00101                         rts
                      (          lcd.asm):00102         
                      (          lcd.asm):00103         ;
                      (          lcd.asm):00104         ; LCD Comamnd
                      (          lcd.asm):00105         ;
                      (          lcd.asm):00106         ; Send command in B to LCD.
                      (          lcd.asm):00107         ;
                      (          lcd.asm):00108         
CFBD 0D29             (          lcd.asm):00109         LCDCommand      tst     LCDFlag         ; Is LCD available?             
CFBF 2724             (          lcd.asm):00110                         beq     LCDExit         ; nope....
                      (          lcd.asm):00111                         
CFC1 F7FF48           (          lcd.asm):00112                         stb     LCDCmdStat      ; send the command
                      (          lcd.asm):00113                         
CFC4 7DFF48           (          lcd.asm):00114         LCDCmdWait      tst     LCDCmdStat      ; Wait for it to complete
CFC7 2BFB             (          lcd.asm):00115                         bmi     LCDCmdWait      ; b7 set if busy
CFC9 39               (          lcd.asm):00116                         rts     
                      (          lcd.asm):00117         
                      (          lcd.asm):00118         ;
                      (          lcd.asm):00119         ; For convenience.......
                      (          lcd.asm):00120         ;
                      (          lcd.asm):00121         
CFCA 860D             (          lcd.asm):00122         LCR             lda     #CR             ; carrige return
CFCC 8C               (          lcd.asm):00123                         fcb     Skip2           ; skip 2 bytes
                      (          lcd.asm):00124         
CFCD 8620             (          lcd.asm):00125         LSpace          lda     #' '            ; space character
CFCF 8C               (          lcd.asm):00126                         fcb     Skip2           ; skip 2 bytes
                      (          lcd.asm):00127                         
CFD0 862D             (          lcd.asm):00128         LDash           lda     #'-'            ; dash character
CFD2 8C               (          lcd.asm):00129                         fcb     Skip2           ; skip 2 bytes
                      (          lcd.asm):00130                         
CFD3 8624             (          lcd.asm):00131         LDollar         lda     #'$'            ; write a dollar char
                      (          lcd.asm):00132                         
                      (          lcd.asm):00133         ;
                      (          lcd.asm):00134         ; Write character in A to LCD.
                      (          lcd.asm):00135         ;
                      (          lcd.asm):00136                         
CFD5 0D29             (          lcd.asm):00137         LCDWriteChar    tst     LCDFlag         ; Is LCD available?             
CFD7 270C             (          lcd.asm):00138                         beq     LCDExit         ; nope....
                      (          lcd.asm):00139                         
CFD9 810D             (          lcd.asm):00140                         cmpa    #CR             ; EOL?
CFDB 2725             (          lcd.asm):00141                         beq     LCDNewLine      ; yes do a newline
                      (          lcd.asm):00142                         
CFDD B7FF49           (          lcd.asm):00143                         sta     LCDData         ; send the data
                      (          lcd.asm):00144         
CFE0 7DFF48           (          lcd.asm):00145         LCDCharLoop     tst     LCDCmdStat      ; Wait for it to become free again
CFE3 2BFB             (          lcd.asm):00146                         bmi     LCDCharLoop
                      (          lcd.asm):00147                         
CFE5 39               (          lcd.asm):00148         LCDExit         rts             
                      (          lcd.asm):00149         
                      (          lcd.asm):00150         ;
                      (          lcd.asm):00151         ; LCDWriteStr, write a zero terminates string from X
                      (          lcd.asm):00152         ;
                      (          lcd.asm):00153         
CFE6 3402             (          lcd.asm):00154         LCDWriteStr     pshs    a               ; save a
CFE8 A680             (          lcd.asm):00155         LCDWriteStrLoop lda     ,x+             ; get character from string
CFEA 2704             (          lcd.asm):00156                         beq     LCDWriteStrExit ; exit if null
                      (          lcd.asm):00157                         
CFEC 8DE7             (          lcd.asm):00158                         bsr     LCDWriteChar    ; write it
CFEE 20F8             (          lcd.asm):00159                         bra     LCDWriteStrLoop ; write next
                      (          lcd.asm):00160         
CFF0 3582             (          lcd.asm):00161         LCDWriteStrExit puls    a,pc            ; restore and return
                      (          lcd.asm):00162         ;
                      (          lcd.asm):00163         ; LCDGotoXY
                      (          lcd.asm):00164         ;
                      (          lcd.asm):00165         ; Entry:
                      (          lcd.asm):00166         ;       A       = X co-ordinate
                      (          lcd.asm):00167         ;       B       = Y co-ordinate
                      (          lcd.asm):00168         ;
CFF2 3402             (          lcd.asm):00169         LCDGotoXY       pshs    a       
CFF4 C403             (          lcd.asm):00170                         andb    #$03            ; Max line no is 4....
CFF6 D72A             (          lcd.asm):00171                         stb     LCDLineNo       ; update line number
                      (          lcd.asm):00172         
CFF8 8640             (          lcd.asm):00173                         lda     #$40            ; 
CFFA 3D               (          lcd.asm):00174                         mul                     ; result will be in b anyway.....
CFFB EBE0             (          lcd.asm):00175                         addb    ,s+             ; add X co-ordinate
CFFD CB80             (          lcd.asm):00176                         addb    #LCDCmdDDRamAddrSet     ; the command
                      (          lcd.asm):00177                         
CFFF 8DBC             (          lcd.asm):00178                         bsr     LCDCommand      ; send it
D001 39               (          lcd.asm):00179                         rts
                      (          lcd.asm):00180         
D002 3406             (          lcd.asm):00181         LCDNewLine      pshs    d
D004 D62A             (          lcd.asm):00182                         ldb     LCDLineNo       ; get line number
D006 C101             (          lcd.asm):00183                         cmpb    #LCDNoLines-1   ; greater than max LineNo?
D008 2403             (          lcd.asm):00184                         bhs     NoNewLine       ; yes, don't update
                      (          lcd.asm):00185                         
D00A 5C               (          lcd.asm):00186                         incb                    ; increment it
D00B D72A             (          lcd.asm):00187                         stb     LCDLineNo       ; update line no
                      (          lcd.asm):00188                         
D00D 4F               (          lcd.asm):00189         NoNewLine       clra                    ; X=0
D00E 8DE2             (          lcd.asm):00190                         bsr     LCDGotoXY       ; move cursor
D010 3586             (          lcd.asm):00191                         puls    d,pc            ; restore and return            
                      (          lcd.asm):00192                         
                      (          lcd.asm):00193                         
                      (          lcd.asm):00194         ;
                      (          lcd.asm):00195         ; LCDClrScr, clear the screen
                      (          lcd.asm):00196         ;
                      (          lcd.asm):00197         
D012 3406             (          lcd.asm):00198         LCDClrScr       pshs    d
                      (          lcd.asm):00199         
D014 C601             (          lcd.asm):00200                         ldb     #LCDCmdClear    ; Clear screen command
D016 8DA5             (          lcd.asm):00201                         bsr     LCDCommand
                      (          lcd.asm):00202                         
D018 CC0000           (          lcd.asm):00203                         ldd     #$0000          ; X,Y=0,0
D01B 8DD5             (          lcd.asm):00204                         bsr     LCDGotoXY
                      (          lcd.asm):00205                         
D01D 3586             (          lcd.asm):00206         LCDClrScrExit   puls    d,pc            ; restore and return
                      (          lcd.asm):00207                         
                      (          lcd.asm):00208         
D01F 3402             (          lcd.asm):00209         LCDSet          pshs    a               ; save a
D021 967E             (          lcd.asm):00210                         lda     OutputFlag      ; get output flag
D023 977F             (          lcd.asm):00211                         sta     OldOutputFlag   ; save it
D025 8602             (          lcd.asm):00212                         lda     #DevLCD         ; LCD.....
D027 977E             (          lcd.asm):00213                         sta     OutputFlag      
D029 3582             (          lcd.asm):00214                         puls    a,pc            ; restore and return
                      (          lcd.asm):00215                         
                      (          lcd.asm):00216         ;
                      (          lcd.asm):00217         ; LCD hex routines
                      (          lcd.asm):00218         ;
                      (          lcd.asm):00219         
D02B 8DF2             (          lcd.asm):00220         LCDHexByte      bsr     LCDSet          ; set to LCD only
D02D 170040           (          lcd.asm):00221                         lbsr    DevHexByte      ; call hex routine
D030 16009D           (          lcd.asm):00222                         lbra    OutputReset     ; Reset output byte
                      (          lcd.asm):00223                         
D033 8DEA             (          lcd.asm):00224         LCDHexWord      bsr     LCDSet          ; set to LCD only
D035 170045           (          lcd.asm):00225                         lbsr    DevHexWord      ; call hex routine
D038 160095           (          lcd.asm):00226                         lbra    OutputReset     ; Reset output byte
                      (          lcd.asm):00227                         
D03B 3410             (          lcd.asm):00228         LCDPrintBuff    pshs    x               ; save x
D03D 8E002B           (          lcd.asm):00229                         ldx     #PrintBuff      ; point at print buffer 
D040 17FFA3           (          lcd.asm):00230                         lbsr    LCDWriteStr     ; go write it
D043 3590             (          lcd.asm):00231                         puls    x,pc            ; restore and return
                      (          lcd.asm):00232         
                      (          lcd.asm):00233                         
                      (          lcd.asm):00234         ;
                      (          lcd.asm):00235         ; Display 'Passed' message on LCD, wait for a short delay.
                      (          lcd.asm):00236         ;               
                      (          lcd.asm):00237                         
D045 308D0196         (          lcd.asm):00238         LCDPassed       leax    LPassed,pcr     ; point at message
D049 8D9B             (          lcd.asm):00239                         bsr     LCDWriteStr     ; write it
D04B 17008A           (          lcd.asm):00240                         lbsr    Wait            ; delay loop
D04E 39               (          lcd.asm):00241                         rts
                      (          lcd.asm):00242                         
                      (          lcd.asm):00243         ;
                      (          lcd.asm):00244         ; Clear screen and display message pointed to by X
                      (          lcd.asm):00245         ;               
                      (          lcd.asm):00246         
D04F 8DC1             (          lcd.asm):00247         LCDClrWriteStr  bsr     LCDClrScr       ; clear screen
D051 2093             (          lcd.asm):00248                         bra     LCDWriteStr     ; and write the string
                      (          lcd.asm):00249                         
D053                  (          lcd.asm):00250         LCDClrWriteStrWait
D053 8DFA             (          lcd.asm):00251                         bsr     LCDClrWriteStr  ; clear screen, write string
D055 160091           (          lcd.asm):00252                         lbra    WaitPause       ; and then wait
                      (          lcd.asm):00253         
D058                  (          lcd.asm):00254         LCDClrWriteStrWaitB
D058 8DF5             (          lcd.asm):00255                         bsr     LCDClrWriteStr  ; clear screen, write string
D05A 16007D           (          lcd.asm):00256                         lbra    WaitB           ; and then wait
                      (          lcd.asm):00257                         
                      (          lcd.asm):00258         ;
                      (          lcd.asm):00259         ; B= line to clear
                      (          lcd.asm):00260         ;
D05D                  (          lcd.asm):00261         LCDClearLine
D05D 3404             (          lcd.asm):00262                 pshs    b                       ; Save line no
D05F 4F               (          lcd.asm):00263                 clra                            ; for gotoxy
D060 8D90             (          lcd.asm):00264                 bsr     LCDGotoXY               ; move to that line
D062 C628             (          lcd.asm):00265                 ldb     #40                     ; 40 characters / line
                      (          lcd.asm):00266                         
D064                  (          lcd.asm):00267         LCDClearLineLoop
D064 17FF66           (          lcd.asm):00268                 lbsr    LSpace                  ; write a space
D067 5A               (          lcd.asm):00269                 decb                            ; decrement count
D068 26FA             (          lcd.asm):00270                 bne     LCDClearLineLoop        ; loop until done
                      (          lcd.asm):00271                 
D06A 3504             (          lcd.asm):00272                 puls    b                       ; restore lineno
D06C 4F               (          lcd.asm):00273                 clra                            ; col 0
D06D 16FF82           (          lcd.asm):00274                 lbra    LCDGotoXY
                      (     DiagCart.asm):00387                         use     outdev.asm      ; Combined VDG /LCD output
                      (       outdev.asm):00001         ;
                      (       outdev.asm):00002         ; OutDev, combined VDG / LCD output
                      (       outdev.asm):00003         ;
                      (       outdev.asm):00004         
                      (       outdev.asm):00005         ;
                      (       outdev.asm):00006         ; LCD hex routines
                      (       outdev.asm):00007         ;
                      (       outdev.asm):00008         
D070 3416             (       outdev.asm):00009         DevHexByte      pshs    d,x             ; save regs
D072 308D2FB5         (       outdev.asm):00010                         leax    PrintBuff,pcr   ; point at print buffer 
D076 17009E           (       outdev.asm):00011                         lbsr    BufHexByte      ; put it in buffer
D079 8D0D             (       outdev.asm):00012         DHexPrint       bsr     DevPrintBuff    ; print it from buffer
D07B 3596             (       outdev.asm):00013                         puls    d,x,pc          ; restore and return
                      (       outdev.asm):00014         
D07D 3416             (       outdev.asm):00015         DevHexWord      pshs    d,x             ; save regs
D07F 308D2FA8         (       outdev.asm):00016                         leax    PrintBuff,pcr   ; point at print buffer 
D083 1700B0           (       outdev.asm):00017                         lbsr    BufHexWord      ; put it in buffer
D086 20F1             (       outdev.asm):00018                         bra     DHexPrint       ; print it
                      (       outdev.asm):00019         
D088 3412             (       outdev.asm):00020         DevPrintBuff    pshs    x,a             ; save x
D08A 308D2F9D         (       outdev.asm):00021                         leax    PrintBuff,pcr   ; point at print buffer 
D08E 170002           (       outdev.asm):00022                         lbsr    DevWriteStr     ; go write it
D091 3592             (       outdev.asm):00023                         puls    a,x,pc          ; restore and return
                      (       outdev.asm):00024         
                      (       outdev.asm):00025         
                      (       outdev.asm):00026         ;
                      (       outdev.asm):00027         ; DevWriteStr, write a zero terminates string from X
                      (       outdev.asm):00028         ;
                      (       outdev.asm):00029         
D093 3402             (       outdev.asm):00030         DevWriteStr     pshs    a               ; save a
D095 A680             (       outdev.asm):00031         DevWriteStrLoop lda     ,x+             ; get character from string
D097 2704             (       outdev.asm):00032                         beq     DevWriteStrExit ; exit if null
                      (       outdev.asm):00033                         
D099 8D1F             (       outdev.asm):00034                         bsr     DevWriteChar    ; write it
D09B 20F8             (       outdev.asm):00035                         bra     DevWriteStrLoop ; write next
                      (       outdev.asm):00036         
D09D 3582             (       outdev.asm):00037         DevWriteStrExit puls    a,pc            ; restore and return
                      (       outdev.asm):00038         
D09F                  (       outdev.asm):00039         DevWriteStrWait 
D09F 8DF2             (       outdev.asm):00040                         bsr     DevWriteStr     ; clear screen, write string
D0A1 160045           (       outdev.asm):00041                         lbra    WaitPause       ; and then wait
                      (       outdev.asm):00042         
                      (       outdev.asm):00043         ;
                      (       outdev.asm):00044         ; Write a specified number of characters.
                      (       outdev.asm):00045         ;               
                      (       outdev.asm):00046         ; Entry:
                      (       outdev.asm):00047         ;       X       = address of string to write
                      (       outdev.asm):00048         ;       B       = character count
                      (       outdev.asm):00049         ;
                      (       outdev.asm):00050         
D0A4                  (       outdev.asm):00051         DevWriteStrN    
D0A4 5D               (       outdev.asm):00052                 tstb                            ; end of string?
D0A5 2707             (       outdev.asm):00053                 beq     DevWriteEnd             ; yes exit      
D0A7 A680             (       outdev.asm):00054                 lda     ,x+                     ; get a char
                      (       outdev.asm):00055                         
D0A9 8D0F             (       outdev.asm):00056                 bsr     DevWriteChar            ; Write it.
D0AB 5A               (       outdev.asm):00057                 decb
D0AC 20F6             (       outdev.asm):00058                 bra     DevWriteStrN            ; do next char
D0AE                  (       outdev.asm):00059         DevWriteEnd
D0AE 39               (       outdev.asm):00060                 rts
                      (       outdev.asm):00061         
                      (       outdev.asm):00062         
                      (       outdev.asm):00063         ;
                      (       outdev.asm):00064         ; For convenience.......
                      (       outdev.asm):00065         ;
D0AF 860D             (       outdev.asm):00066         DCR             lda     #CR             ; carrage return
D0B1 8C               (       outdev.asm):00067                         fcb     Skip2           ; skip 2 bytes
                      (       outdev.asm):00068                         
D0B2 8620             (       outdev.asm):00069         DSpace          lda     #' '            ; space character
D0B4 8C               (       outdev.asm):00070                         fcb     Skip2           ; skip 2 bytes
                      (       outdev.asm):00071                         
D0B5 862D             (       outdev.asm):00072         DDash           lda     #'-'            ; dash character
D0B7 8C               (       outdev.asm):00073                         fcb     Skip2           ; skip 2 bytes
                      (       outdev.asm):00074                         
D0B8 8624             (       outdev.asm):00075         DDollar         lda     #'$'            ; write a dollar char
                      (       outdev.asm):00076         
                      (       outdev.asm):00077         ;
                      (       outdev.asm):00078         ; Write character in A to devices in OutputFlag.
                      (       outdev.asm):00079         ;
                      (       outdev.asm):00080                         
D0BA 3404             (       outdev.asm):00081         DevWriteChar    pshs    b               ; save b
                      (       outdev.asm):00082         
D0BC C601             (       outdev.asm):00083                         ldb     #DevVDG         ; output to VDG?
D0BE D57E             (       outdev.asm):00084                         bitb    OutputFlag              
D0C0 2703             (       outdev.asm):00085                         beq     DW1             ; nope skip
D0C2 17FC1B           (       outdev.asm):00086                         lbsr    WriteCharUpper  ;  write to VDG
                      (       outdev.asm):00087                         
D0C5 C602             (       outdev.asm):00088         DW1             ldb     #DevLCD         ; output to LCD?
D0C7 D57E             (       outdev.asm):00089                         bitb    OutputFlag              
D0C9 2703             (       outdev.asm):00090                         beq     DW2             ; nope skip
D0CB 17FF07           (       outdev.asm):00091                         lbsr    LCDWriteChar    ; write to LCD          
D0CE                  (       outdev.asm):00092         DW2             
D0CE 3584             (       outdev.asm):00093                         puls    b,pc            ; restore and return
                      (       outdev.asm):00094         
                      (       outdev.asm):00095         ;
                      (       outdev.asm):00096         ; Output reset
                      (       outdev.asm):00097         ;
                      (       outdev.asm):00098         
D0D0 3402             (       outdev.asm):00099         OutputReset     pshs    a               ; save register
D0D2 967F             (       outdev.asm):00100                         lda     OldOutputFlag   ; restore old output
D0D4 977E             (       outdev.asm):00101                         sta     OutputFlag      
D0D6 3582             (       outdev.asm):00102                         puls    a,pc            ; resore and return
                      (     DiagCart.asm):00388                         use     utils.asm       ; various utility functions
D0D8 C602             (        utils.asm):00001         Wait            ldb     #$02    
D0DA 0D81             (        utils.asm):00002         WaitB           tst     NoWait          ; are we waiting?
D0DC 260A             (        utils.asm):00003                         bne     WaitExit        ; nope exit
                      (        utils.asm):00004                 
D0DE 8E0000           (        utils.asm):00005         WaitLoop2       ldx     #$0000          ; zero counter
D0E1 301F             (        utils.asm):00006         WaitLoop        leax    -1,x            ; decrement inner count
D0E3 26FC             (        utils.asm):00007                         bne     WaitLoop        ; loop until zero
                      (        utils.asm):00008                         
D0E5 5A               (        utils.asm):00009                         decb                    ; decrement outer counter
D0E6 26F6             (        utils.asm):00010                         bne     WaitLoop2       ; loop until zero
D0E8 39               (        utils.asm):00011         WaitExit        rts
                      (        utils.asm):00012         
                      (        utils.asm):00013         
D0E9 3401             (        utils.asm):00014         WaitPause       pshs    cc              ; save codes
D0EB C601             (        utils.asm):00015                         ldb     #$01    
D0ED 8C               (        utils.asm):00016                         fcb     Skip2
                      (        utils.asm):00017         
D0EE 3401             (        utils.asm):00018         WaitBPause      pshs    cc
D0F0 0D81             (        utils.asm):00019         WaitBPause2     tst     NoWait          ; are we waiting?
D0F2 2616             (        utils.asm):00020                         bne     EndWait         ; nope exit
                      (        utils.asm):00021         
D0F4 8E0000           (        utils.asm):00022         WaitPauseLoop2  ldx     #$0000          ; zero counter
D0F7 17FE2D           (        utils.asm):00023         WaitPauseLoop   lbsr    CheckPause      ; check for Pause press
D0FA 301F             (        utils.asm):00024                         leax    -1,x            ; decrement inner count
D0FC 26F9             (        utils.asm):00025                         bne     WaitPauseLoop   ; loop until zero
                      (        utils.asm):00026                         
D0FE 5A               (        utils.asm):00027                         decb                    ; decrement outer counter
D0FF 26F3             (        utils.asm):00028                         bne     WaitPauseLoop2  ; loop until zero
                      (        utils.asm):00029         
D101 0D80             (        utils.asm):00030         WaitUnPause     tst     Paused          ; is pause pressed?     
D103 2705             (        utils.asm):00031                         beq     EndWait         ; no, exit
D105 17FE1F           (        utils.asm):00032                         lbsr    CheckPause      ; check for Pause press
D108 20F7             (        utils.asm):00033                         bra     WaitUnPause
                      (        utils.asm):00034                         
D10A 3581             (        utils.asm):00035         EndWait         puls    cc,pc           ; restore and return
                      (        utils.asm):00036         
                      (        utils.asm):00037         ;
                      (        utils.asm):00038         ; UpCase, convert character in A to upper case
                      (        utils.asm):00039         ;
                      (        utils.asm):00040         
D10C 8161             (        utils.asm):00041         UpCase          cmpa    #'a'            ; lowercase A
D10E 2506             (        utils.asm):00042                         blo     UpCaseExit      ; lower leave it alone
                      (        utils.asm):00043                         
D110 817A             (        utils.asm):00044                         cmpa    #'z'            ; lower case z
D112 2202             (        utils.asm):00045                         bhi     UpCaseExit      ; higher leave it alone
                      (        utils.asm):00046                         
D114 84DF             (        utils.asm):00047                         anda    #$DF            ; force it upper case
D116                  (        utils.asm):00048         UpCaseExit
D116 39               (        utils.asm):00049                         rts
                      (        utils.asm):00050         
                      (        utils.asm):00051         ;
                      (        utils.asm):00052         ; HexByte, HexWord. Write Hex byte in A or hex word in D to buffer at X
                      (        utils.asm):00053         ;
                      (        utils.asm):00054         ; On exit X contains the updated buffer pos.
                      (        utils.asm):00055         ;
                      (        utils.asm):00056         
D117 3402             (        utils.asm):00057         BufHexByte      pshs    a               ; save byte
D119 84F0             (        utils.asm):00058                         anda    #$F0            ; get MSN
D11B 44               (        utils.asm):00059                         lsra                    ; shift to LSN
D11C 44               (        utils.asm):00060                         lsra    
D11D 44               (        utils.asm):00061                         lsra
D11E 44               (        utils.asm):00062                         lsra                    
D11F 8D0A             (        utils.asm):00063                         bsr     HexNibble
D121 A6E4             (        utils.asm):00064                         lda     ,s              ; recover value
D123 840F             (        utils.asm):00065                         anda    #$0F            ; Mask oust LSN
D125 8D04             (        utils.asm):00066                         bsr     HexNibble
D127 6F84             (        utils.asm):00067                         clr     ,x              ; zero terminator
D129 3582             (        utils.asm):00068                         puls    a,pc            ; restore and return
                      (        utils.asm):00069                         
D12B 8B30             (        utils.asm):00070         HexNibble       adda    #'0'            ; convert to ASCII
D12D 8139             (        utils.asm):00071                         cmpa    #'9'            ; is it A..F?
D12F 2302             (        utils.asm):00072                         bls     OutHexNibble    ; no output it
D131 8B07             (        utils.asm):00073                         adda    #'A'-':'        ; add difference
D133 A780             (        utils.asm):00074         OutHexNibble    sta     ,x+             ; go write it in buffer
D135 39               (        utils.asm):00075                         rts
                      (        utils.asm):00076         
D136 3406             (        utils.asm):00077         BufHexWord      pshs    d               ; save word
D138 8DDD             (        utils.asm):00078                         bsr     BufHexByte      ; output msb
D13A A661             (        utils.asm):00079                         lda     1,s             ; get LSB
D13C 8DD9             (        utils.asm):00080                         bsr     BufHexByte      ; output msb
D13E 3586             (        utils.asm):00081                         puls    d,pc            ; restore and return
                      (        utils.asm):00082                         
                      (        utils.asm):00083                         
                      (        utils.asm):00084         ;
                      (        utils.asm):00085         ; CR on VDG, and clear LCD screen
                      (        utils.asm):00086         ;               
D140 17FB4A           (        utils.asm):00087         VCRLCDClrScr    lbsr    VCR             ; CR on VDG screen
D143 16FECC           (        utils.asm):00088                         lbra    LCDClrScr       ; clear LCD
                      (        utils.asm):00089                         
D146 3410             (        utils.asm):00090         VCRLCDClrMess   pshs    x               ; save message pointer
D148 17FB42           (        utils.asm):00091                         lbsr    VCR             ; CR on VDG screen
D14B 17FEC4           (        utils.asm):00092                         lbsr    LCDClrScr       ; clear LCD
D14E 3510             (        utils.asm):00093                         puls    x               ; restore pointer
D150 16FF40           (        utils.asm):00094                         lbra    DevWriteStr     ; output it
                      (        utils.asm):00095         ;               lbra    LCDNewLine      ; and move to a newline on LCD
                      (     DiagCart.asm):00389         ;****[ Text modules ]*****************************************************                      
                      (     DiagCart.asm):00390                         use     lcdtext.asm     ; Text messages for LCD 
                      (      lcdtext.asm):00001         ;
                      (      lcdtext.asm):00002         ; Text messages for LCD.
                      (      lcdtext.asm):00003         ;
                      (      lcdtext.asm):00004         
                      (      lcdtext.asm):00005         ;                                 111111111122222       
                      (      lcdtext.asm):00006         ;                        123456789012345678901234 56789
D153 447261676F6E2F43 (      lcdtext.asm):00007         LCDSignon       FCC     "Dragon/CoCo Diag Cart"  
     6F436F2044696167
     2043617274
D168 0D               (      lcdtext.asm):00008                         FCB     CR
D169 56657273696F6E20 (      lcdtext.asm):00009                         FCN     "Version 1.30"
     312E333000
                      (      lcdtext.asm):00010         
D176 536F667477617265 (      lcdtext.asm):00011         LBuildDate      FCC     "Software build date :"
     206275696C642064
     617465203A
D18B 0D00             (      lcdtext.asm):00012                         FCB     CR,0
                      (      lcdtext.asm):00013         
D18D 54657374696E6720 (      lcdtext.asm):00014         LScreenRAM      FCC     'Testing VDG RAM.....'
     5644472052414D2E
     2E2E2E2E
D1A1 0D00             (      lcdtext.asm):00015                         FCB     CR,0
                      (      lcdtext.asm):00016                 
D1A3 54657374696E6720 (      lcdtext.asm):00017         LMessRamTest    FCN     'Testing RAM:$'
     52414D3A2400
                      (      lcdtext.asm):00018         
D1B1 54657374696E6720 (      lcdtext.asm):00019         LMessRamTestB   FCN     'Testing RAM block:$'
     52414D20626C6F63
     6B3A2400
                      (      lcdtext.asm):00020         
D1C5 546573742076616C (      lcdtext.asm):00021         LTestValue      FCN     'Test value:$'
     75653A2400
                      (      lcdtext.asm):00022                         
D1D2 0D               (      lcdtext.asm):00023         LMessFailedAt   FCB     CR
D1D3 4661696C65642061 (      lcdtext.asm):00024                         FCN     'Failed at:$'
     743A2400
                      (      lcdtext.asm):00025                         
D1DF 0D               (      lcdtext.asm):00026         LPassed         FCB     CR
D1E0 5061737365642E20 (      lcdtext.asm):00027                         FCN     'Passed.                '
     2020202020202020
     2020202020202000
                      (      lcdtext.asm):00028         
D1F8 4164647265737320 (      lcdtext.asm):00029         LAddr07Test     FCN     'Address 0..7 test '
     302E2E3720746573
     742000
                      (      lcdtext.asm):00030                         
D20B 4164647265737320 (      lcdtext.asm):00031         LAddr9FTest     FCN     'Address 9..F test '
     392E2E4620746573
     742000
                      (      lcdtext.asm):00032         
D21E 524F4D3A24383030 (      lcdtext.asm):00033         LMessCSum80     FCN     'ROM:$8000 checksum:$'
     3020636865636B73
     756D3A2400
                      (      lcdtext.asm):00034                         
D233 524F4D3A24413030 (      lcdtext.asm):00035         LMessCSumA0     FCN     'ROM:$A000 checksum:$'
     3020636865636B73
     756D3A2400
                      (      lcdtext.asm):00036         
D248 524F4D3A24433030 (      lcdtext.asm):00037         LMessCSumC0     FCN     'ROM:$C000 checksum:$'
     3020636865636B73
     756D3A2400
                      (      lcdtext.asm):00038                         
D25D 524F4D3A24453030 (      lcdtext.asm):00039         LMessCSumE0     FCN     'ROM:$E000 checksum:$'
     3020636865636B73
     756D3A2400
                      (      lcdtext.asm):00040         
D272 20436F7272656374 (      lcdtext.asm):00041         LCorrect        FCN     ' Correct location'
     206C6F636174696F
     6E00
                      (      lcdtext.asm):00042         
D284 2057726F6E67206C (      lcdtext.asm):00043         LWrong          FCN     ' Wrong location'
     6F636174696F6E00
                      (      lcdtext.asm):00044         
                      (      lcdtext.asm):00045         ;                                 111111111122222       
                      (      lcdtext.asm):00046         ;                        123456789012345678901234 56789
D294 5049412052656769 (      lcdtext.asm):00047         LPIATest        FCN     'PIA Register test.'
     7374657220746573
     742E00
                      (      lcdtext.asm):00048         
D2A7 504941302000     (      lcdtext.asm):00049         LPIA0Mess       FCN     'PIA0 '
                      (      lcdtext.asm):00050                         
D2AD 0D               (      lcdtext.asm):00051         LPIA1Mess       FCB     CR
D2AE 504941312000     (      lcdtext.asm):00052                         FCN     'PIA1 '
                      (      lcdtext.asm):00053         
D2B4 414349412000     (      lcdtext.asm):00054         LACIAMess       FCN     'ACIA '
                      (      lcdtext.asm):00055         
D2BA 50494132202000   (      lcdtext.asm):00056         LPIA2Mess       FCN     'PIA2  '
                      (      lcdtext.asm):00057         
D2C1 426567696E206C6F (      lcdtext.asm):00058         LMessBeginLong  FCC     'Begin long RAM tests'
     6E672052414D2074
     65737473
D2D5 0D00             (      lcdtext.asm):00059                         FCB     CR,0
                      (      lcdtext.asm):00060                         
D2D7 426567696E204472 (      lcdtext.asm):00061         LMessD64        FCN     'Begin Dragon 64 tests.'
     61676F6E20363420
     74657374732E00
                      (      lcdtext.asm):00062         
D2EE 456E642044726167 (      lcdtext.asm):00063         LMessD64End     FCN     'End Dragon 64 tests.'
     6F6E203634207465
     7374732E00
                      (      lcdtext.asm):00064         
D303 426567696E207570 (      lcdtext.asm):00065         LMess64K        FCC     'Begin upper RAM tests'
     7065722052414D20
     7465737473
D318 0D00             (      lcdtext.asm):00066                         FCB     CR,0
                      (      lcdtext.asm):00067                         
D31A 436F6E6669677572 (      lcdtext.asm):00068         LMachineConf    FCC     'Configured machine :'
     6564206D61636869
     6E65203A
D32E 0D00             (      lcdtext.asm):00069                         FCB     CR,0
                      (      lcdtext.asm):00070         
                      (      lcdtext.asm):00071         ; Table of pointers to machine names, and RAM chip types
D330 D34C             (      lcdtext.asm):00072         LModelTableD    FDB     LDragon
D332 D353             (      lcdtext.asm):00073                         FDB     LD32            
D334 D357             (      lcdtext.asm):00074                         FDB     LD64
D336 D35B             (      lcdtext.asm):00075                         FDB     LDAlpha
D338 D362             (      lcdtext.asm):00076                         FDB     LInvalid
                      (      lcdtext.asm):00077                         
                      (      lcdtext.asm):00078                         
D33A D36B             (      lcdtext.asm):00079         LModelTableC    FDB     LCoCo
D33C D370             (      lcdtext.asm):00080                         FDB     LCoCo12         
D33E D375             (      lcdtext.asm):00081                         FDB     LCoCo3
D340 D378             (      lcdtext.asm):00082                         FDB     LCoCo2b
D342 D362             (      lcdtext.asm):00083                         FDB     LInvalid
                      (      lcdtext.asm):00084                         
                      (      lcdtext.asm):00085                         
D344 D37C             (      lcdtext.asm):00086         LRAMTable       FDB     L4K
D346 D380             (      lcdtext.asm):00087                         FDB     L16K
D348 D385             (      lcdtext.asm):00088                         FDB     L64K
D34A D38A             (      lcdtext.asm):00089                         FDB     LStatic
                      (      lcdtext.asm):00090                         
D34C 447261676F6E00   (      lcdtext.asm):00091         LDragon         FCN     'Dragon'                
D353 20333200         (      lcdtext.asm):00092         LD32            FCN     ' 32'
D357 20363400         (      lcdtext.asm):00093         LD64            FCN     ' 64'
D35B 20416C70686100   (      lcdtext.asm):00094         LDAlpha         FCN     ' Alpha'
D362 20556E6B6E6F776E (      lcdtext.asm):00095         LInvalid        FCN     ' Unknown'      
     00
                      (      lcdtext.asm):00096         
D36B 436F436F00       (      lcdtext.asm):00097         LCoCo           FCN     'CoCo'
D370 20312F3200       (      lcdtext.asm):00098         LCoCo12         FCN     ' 1/2'
D375 203300           (      lcdtext.asm):00099         LCoCo3          FCN     ' 3'
D378 20326200         (      lcdtext.asm):00100         LCoCo2b         FCN     ' 2b'           
                      (      lcdtext.asm):00101         
D37C 20344B00         (      lcdtext.asm):00102         L4K             FCN     ' 4K'
D380 2031364B00       (      lcdtext.asm):00103         L16K            FCN     ' 16K'
D385 2036344B00       (      lcdtext.asm):00104         L64K            FCN     ' 64K'
D38A 2053746174696300 (      lcdtext.asm):00105         LStatic         FCN     ' Static'
                      (      lcdtext.asm):00106         
D392 456E61626C696E67 (      lcdtext.asm):00107         LIntsEnable     FCC     'Enabling Interrupts'
     20496E7465727275
     707473
D3A5 0D00             (      lcdtext.asm):00108                         FCB     CR,0
                      (      lcdtext.asm):00109                         
D3A7 2053707572696F75 (      lcdtext.asm):00110         LSpuriousNMI    FCC     ' Spurious NMIs'
     73204E4D4973
D3B5 0D00             (      lcdtext.asm):00111                         FCB     CR,0
                      (      lcdtext.asm):00112         
D3B7 2053707572696F75 (      lcdtext.asm):00113         LSpuriousFIRQ   FCN     ' Spurious FIRQs'
     7320464952517300
                      (      lcdtext.asm):00114         
D3C7 57616974204E4D49 (      lcdtext.asm):00115         LWaitNMI        FCN     'Wait NMI '
     2000
D3D1 5761697420464952 (      lcdtext.asm):00116         LWaitFIRQ       FCN     'Wait FIRQ '
     512000
D3DC 50322000         (      lcdtext.asm):00117         LWaitP2         FCN     'P2 '
D3E0 4354532000       (      lcdtext.asm):00118         LWaitCTS        FCN     'CTS '
                      (      lcdtext.asm):00119         
D3E5 5472696767657265 (      lcdtext.asm):00120         LTriggered      FCN     'Triggered'
     6400
D3EF 54696D656F757400 (      lcdtext.asm):00121         LTimeout        FCN     'Timeout'
                      (      lcdtext.asm):00122         
D3F7 506173732000     (      lcdtext.asm):00123         LPass           FCN     'Pass '
D3FD 4661696C2000     (      lcdtext.asm):00124         LFail           FCN     'Fail '
                      (      lcdtext.asm):00125         
D403 4361727472696467 (      lcdtext.asm):00126         LCartTest       FCC     'Cartridge signal test'
     65207369676E616C
     2074657374
D418 0D00             (      lcdtext.asm):00127                         FCB     CR,0
                      (      lcdtext.asm):00128         
                      (      lcdtext.asm):00129         ;                                 111111111122222       
                      (      lcdtext.asm):00130         ;                        123456789012345678901234 56789
D41A 4572722043617274 (      lcdtext.asm):00131         LCartError      FCN     'Err Cart line stuck:'
     206C696E65207374
     75636B3A00
                      (      lcdtext.asm):00132                         
D42F 416C6C2074657374 (      lcdtext.asm):00133         LComplete       FCC     'All tests complete'
     7320636F6D706C65
     7465
D441 0D               (      lcdtext.asm):00134                         FCB     CR
D442 5072657373204E45 (      lcdtext.asm):00135                         FCN     'Press NEXT to retest.' 
     585420746F207265
     746573742E00
                      (      lcdtext.asm):00136                         
                      (      lcdtext.asm):00137         ;                                 111111111122222       
                      (      lcdtext.asm):00138         ;                        123456789012345678901234 56789
D458 50726F626520666F (      lcdtext.asm):00139         LProbeDPlus     FCC     'Probe for Dragon Plus '
     7220447261676F6E
     20506C757320
D46E 0D00             (      lcdtext.asm):00140                         FCB     CR,0
                      (      lcdtext.asm):00141         
D470 4E6F7420         (      lcdtext.asm):00142         LProbeNotFound  FCC     'Not '
D474 466F756E6400     (      lcdtext.asm):00143         LProbeFound     FCN     'Found' 
                      (      lcdtext.asm):00144         
D47A 447261676F6E2050 (      lcdtext.asm):00145         LDPlusVRTest    FCC     'Dragon Plus RAM tests'
     6C75732052414D20
     7465737473
D48F 0D00             (      lcdtext.asm):00146                         FCB     CR,0
                      (      lcdtext.asm):00147         
D491 204350553A00     (      lcdtext.asm):00148         LCPUIs          FCN     ' CPU:'
D497 3638303900       (      lcdtext.asm):00149         LCPU6809        FCN     '6809'
D49C 3633303900       (      lcdtext.asm):00150         LCPU6309        FCN     '6309'
                      (      lcdtext.asm):00151         
                      (      lcdtext.asm):00152                 
                      (     DiagCart.asm):00391                         use     vdgtext.asm     ; Text messages for VDG (where different)
                      (      vdgtext.asm):00001         ;
                      (      vdgtext.asm):00002         ; Text messages for VDG.
                      (      vdgtext.asm):00003         ;
                      (      vdgtext.asm):00004         
D4A1 54455354494E4720 (      vdgtext.asm):00005         MessRamTest     FCC     'TESTING RAM:$'
     52414D3A24
D4AE 00               (      vdgtext.asm):00006                         FCB     0
                      (      vdgtext.asm):00007                         
D4AF 504153534544     (      vdgtext.asm):00008         MessPassed      FCC     'PASSED'
D4B5 0D00             (      vdgtext.asm):00009                         FCB     CR,0
                      (      vdgtext.asm):00010         
D4B7 0D               (      vdgtext.asm):00011         MessFailedAt    FCB     CR
D4B8 4641494C45442041 (      vdgtext.asm):00012                         FCC     'FAILED AT:$'
     543A24
D4C3 00               (      vdgtext.asm):00013                         FCB     0
                      (      vdgtext.asm):00014         
D4C4 2057523A24       (      vdgtext.asm):00015         MessWrote       FCC     ' WR:$'
D4C9 00               (      vdgtext.asm):00016                         FCB     0
                      (      vdgtext.asm):00017         
D4CA 2052443A24       (      vdgtext.asm):00018         MessRead        FCC     ' RD:$'
D4CF 00               (      vdgtext.asm):00019                         FCB     0
                      (      vdgtext.asm):00020                 
                      (      vdgtext.asm):00021         ;MessCSum80     FCC     'ROM:$8000 CHECKSUM:$'
                      (      vdgtext.asm):00022         ;               FCB     0
                      (      vdgtext.asm):00023         
                      (      vdgtext.asm):00024         ;MessCSumA0     FCC     'ROM:$A000 CHECKSUM:$'
                      (      vdgtext.asm):00025         ;               FCB     0
                      (      vdgtext.asm):00026                                         
D4D0 443A2E2E20433A2E (      vdgtext.asm):00027         MessPA          FCC     'D:.. C:.. R:.. D:.. C:.. R:.. '
     2E20523A2E2E2044
     3A2E2E20433A2E2E
     20523A2E2E20
D4EE 00               (      vdgtext.asm):00028                         FCB     0                       
                      (      vdgtext.asm):00029         
D4EF 0D               (      vdgtext.asm):00030         MessD64         FCB     CR
D4F0 424547494E204452 (      vdgtext.asm):00031                         FCC     'BEGIN DRAGON 64 TESTS.'
     41474F4E20363420
     54455354532E
D506 0D00             (      vdgtext.asm):00032                         FCB     CR,0
                      (      vdgtext.asm):00033         
D508 204F4B00         (      vdgtext.asm):00034         MessOK  FCN     ' OK'
                      (      vdgtext.asm):00035         
D50C 204E4F00         (      vdgtext.asm):00036         MessNO  FCN     ' NO'
                      (     DiagCart.asm):00392         ;****[ Build date ]*******************************************************                      
D510                  (     DiagCart.asm):00393         BuildDate
                      (     DiagCart.asm):00394                         use     datetime.asm    
D510 323032302D30362D (     datetime.asm):00001                 FCC    "2020-06-09 17:43:39"
     30392031373A3433
     3A3339
D523 00               (     DiagCart.asm):00395                         fcb     0
                      (     DiagCart.asm):00396         ;*************************************************************************                      
                      (     DiagCart.asm):00397                         
D524 3B               (     DiagCart.asm):00398         NewSWI3         RTI
D525 3B               (     DiagCart.asm):00399         NewSWI2         RTI
                      (     DiagCart.asm):00400         
                      (     DiagCart.asm):00401         ; New FIRQ routine
D526 7DFF44           (     DiagCart.asm):00402         NewFIRQ         tst     StatusReg       ; Test status reg are we ready?
D529 2A14             (     DiagCart.asm):00403                         bpl     SpuriousFIRQ    ; no, it's spurious
                      (     DiagCart.asm):00404                         
D52B 3402             (     DiagCart.asm):00405         DoFIRQ          pshs    a               ; FIRQ only saves PC and CC
D52D B6FF22           (     DiagCart.asm):00406                         lda     PIA1DB          ; clear int
                      (     DiagCart.asm):00407                         
D530 B60087           (     DiagCart.asm):00408                         lda     >WaitInt        ; Get wait for int flag
D533 8420             (     DiagCart.asm):00409                         anda    #FIRQTrigger    ; waiting for FIRQ?
D535 2706             (     DiagCart.asm):00410                         beq     SpuriousFIRQP   ; no do spurious count
                      (     DiagCart.asm):00411                         
D537 B70088           (     DiagCart.asm):00412                         sta     >GotInt         ; otherwise flag we got the int.....
D53A 3502             (     DiagCart.asm):00413                         puls    a               ; restore a
D53C 3B               (     DiagCart.asm):00414                         rti                     ; and exit
                      (     DiagCart.asm):00415                 
D53D 3502             (     DiagCart.asm):00416         SpuriousFIRQP   puls    a       
D53F 0C86             (     DiagCart.asm):00417         SpuriousFIRQ    inc     FIRQCount+1     ; increment spurious FIRQ counter
D541 2402             (     DiagCart.asm):00418                         bcc     FIRQExit        ; no carry, exit
D543 0C85             (     DiagCart.asm):00419                         inc     FIRQCount       ; propagate carry
                      (     DiagCart.asm):00420         
D545 3B               (     DiagCart.asm):00421         FIRQExit        RTI
                      (     DiagCart.asm):00422         
                      (     DiagCart.asm):00423         ; New IRQ routine
D546 B6FF03           (     DiagCart.asm):00424         NewIRQ          lda     PIA0CRB         ; check for frame sync int
D549 2A15             (     DiagCart.asm):00425                         bpl     NewIRQEnd       ; not frame sync, exit
                      (     DiagCart.asm):00426                         
D54B B6FF02           (     DiagCart.asm):00427                         lda     PIA0DB          ; read the PIA clear the int
                      (     DiagCart.asm):00428                         
D54E 7A0082           (     DiagCart.asm):00429                         dec     >IRQCount       ; decrement counter
D551 260D             (     DiagCart.asm):00430                         bne     NewIRQEnd       ; not zero
D553 8632             (     DiagCart.asm):00431                         lda     #IRQBlinkRate   ; re-initialize
D555 B70082           (     DiagCart.asm):00432                         sta     >IRQCount
                      (     DiagCart.asm):00433         
                      (     DiagCart.asm):00434         ; Blink LED first character on screen, perhaps move to an LED for final hardware.       
                      (     DiagCart.asm):00435                         if 0
                      (     DiagCart.asm):00436                         ldx     >ScreenBase     ; point at screen
                      (     DiagCart.asm):00437                         lda     #$80            ; toggle tob bit of first char of screen
                      (     DiagCart.asm):00438                         eora    ,x
                      (     DiagCart.asm):00439                         sta     ,x              ; and put it back
                      (     DiagCart.asm):00440                         endc
                      (     DiagCart.asm):00441                         
D558 8601             (     DiagCart.asm):00442                         lda     #LED2IRQ        ; LED to blink
D55A B8FF41           (     DiagCart.asm):00443                         eora    LEDS2           ; combine
D55D B7FF41           (     DiagCart.asm):00444                         sta     LEDS2           ; save it back
                      (     DiagCart.asm):00445                         
D560 3B               (     DiagCart.asm):00446         NewIRQEnd       RTI
                      (     DiagCart.asm):00447                         
                      (     DiagCart.asm):00448                         
D561 3B               (     DiagCart.asm):00449         NewSWI          RTI
                      (     DiagCart.asm):00450         
                      (     DiagCart.asm):00451         ; new NMI 
D562 7DFF44           (     DiagCart.asm):00452         NewNMI          tst     StatusReg       ; Test status reg are we ready?
D565 2A0B             (     DiagCart.asm):00453                         bpl     SpuriousNMI     ; no mark spurious
                      (     DiagCart.asm):00454                         
D567 B60087           (     DiagCart.asm):00455                         lda     >WaitInt        ; Get wait for int flag
D56A 8440             (     DiagCart.asm):00456                         anda    #NMITrigger     ; waiting for NMI?
D56C 2704             (     DiagCart.asm):00457                         beq     SpuriousNMI     ; no do spurious count
                      (     DiagCart.asm):00458                         
D56E B70088           (     DiagCart.asm):00459                         sta     >GotInt         ; otherwise flag we got the int.....
D571 3B               (     DiagCart.asm):00460                         RTI                     ; return
                      (     DiagCart.asm):00461                         
                      (     DiagCart.asm):00462         
D572 0C84             (     DiagCart.asm):00463         SpuriousNMI     inc     NMICount+1      ; increment spurious NMI counter
D574 2402             (     DiagCart.asm):00464                         bcc     NMIExit         ; no carry, exit
D576 0C83             (     DiagCart.asm):00465                         inc     NMICount        ; propagate carry
                      (     DiagCart.asm):00466                         
D578 3B               (     DiagCart.asm):00467         NMIExit         RTI
                      (     DiagCart.asm):00468         
                      (     DiagCart.asm):00469                         
D579 0000000000000000 (     DiagCart.asm):00470         filler          zmb     (HWVecBase-*)   
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00
                      (     DiagCart.asm):00471         ; interrupt vectors             
                      (     DiagCart.asm):00472                         org     HWVecBase
FFF2 C014             (     DiagCart.asm):00473         VecSWI3         FDB     IndirectVSWI3
FFF4 C017             (     DiagCart.asm):00474         VecSWI2         FDB     IndirectVSWI2
FFF6 C01A             (     DiagCart.asm):00475         VecFIRQ         FDB     IndirectVFIRQ
FFF8 C01D             (     DiagCart.asm):00476         VecIRQ          FDB     IndirectVIRQ
FFFA C020             (     DiagCart.asm):00477         VecSWI          FDB     IndirectVSWI
FFFC C023             (     DiagCart.asm):00478         VecNMI          FDB     IndirectVNMI
FFFE C026             (     DiagCart.asm):00479         VecReset        FDB     IndirectVReset          
